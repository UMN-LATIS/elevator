{"version":3,"sources":["bootstrap-tagsinput.js"],"names":["$","defaultOptions","tagClass","item","focusClass","itemValue","toString","itemText","this","itemTitle","freeInput","addOnBlur","maxTags","undefined","maxChars","confirmKeys","delimiter","delimiterRegex","cancelConfirmKeysOnEmpty","onTagExists","$tag","hide","fadeIn","trimValue","allowDuplicates","triggerChange","TagsInput","element","options","isInit","itemsArray","$element","isSelect","tagName","multiple","hasAttribute","objectItems","placeholderText","attr","inputSize","Math","max","length","$container","$input","appendTo","before","build","makeOptionItemFunction","key","propertyName","makeOptionFunction","value","prototype","constructor","add","dontPushVal","self","trim","match","remove","items","split","i","pushVal","existing","grep","maxInputLength","beforeItemAddEvent","Event","cancel","trigger","push","htmlEncode","data","findInputWrapper","after","optionExists","encodeURIComponent","$option","append","addClass","typeahead","$existingTag","filter","other","beforeItemRemoveEvent","inArray","splice","removeClass","removeAll","pop","refresh","each","contents","nodeType","nodeValue","val","map","join","extend","source","query","process","processItems","texts","text","isFunction","success","then","when","updater","matcher","toLowerCase","indexOf","sorter","sort","highlighter","regex","RegExp","replace","typeaheadjs","isArray","valueKey","f_datum","datum","fn","apply","on","proxy","obj","event","removeAttr","focus","focusin","focusout","target","$inputWrapper","which","doGetCaretPosition","prev","next","$prevTag","$nextTag","textLength","ceil","keyPressEvent","lookupList","found","maxLengthReached","index","keyCombination","alt","hasOwnProperty","altKey","shift","shiftKey","ctrl","ctrlKey","substr","preventDefault","closest","destroy","off","removeData","show","input","elt","container","parentNode","tagsinput","arg1","arg2","arg3","results","retVal","Constructor","htmlEncodeContainer","html","oField","iCaretPos","document","selection","oSel","createRange","moveStart","selectionStart","window","jQuery"],"mappings":"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","file":"bootstrap-tagsinput.min.js","sourcesContent":["/*\n * bootstrap-tagsinput v0.8.0\n * \n */\n\n(function ($) {\n  \"use strict\";\n\n  var defaultOptions = {\n    tagClass: function(item) {\n      return 'label label-info';\n    },\n    focusClass: 'focus',\n    itemValue: function(item) {\n      return item ? item.toString() : item;\n    },\n    itemText: function(item) {\n      return this.itemValue(item);\n    },\n    itemTitle: function(item) {\n      return null;\n    },\n    freeInput: true,\n    addOnBlur: true,\n    maxTags: undefined,\n    maxChars: undefined,\n    confirmKeys: [13, 44],\n    delimiter: ',',\n    delimiterRegex: null,\n    cancelConfirmKeysOnEmpty: false,\n    onTagExists: function(item, $tag) {\n      $tag.hide().fadeIn();\n    },\n    trimValue: false,\n    allowDuplicates: false,\n    triggerChange: true\n  };\n\n  /**\n   * Constructor function\n   */\n  function TagsInput(element, options) {\n    this.isInit = true;\n    this.itemsArray = [];\n\n    this.$element = $(element);\n    this.$element.hide();\n\n    this.isSelect = (element.tagName === 'SELECT');\n    this.multiple = (this.isSelect && element.hasAttribute('multiple'));\n    this.objectItems = options && options.itemValue;\n    this.placeholderText = element.hasAttribute('placeholder') ? this.$element.attr('placeholder') : '';\n    this.inputSize = Math.max(1, this.placeholderText.length);\n\n    this.$container = $('<div class=\"bootstrap-tagsinput\"></div>');\n    this.$input = $('<input type=\"text\" placeholder=\"' + this.placeholderText + '\"/>').appendTo(this.$container);\n\n    this.$element.before(this.$container);\n\n    this.build(options);\n    this.isInit = false;\n  }\n\n  TagsInput.prototype = {\n    constructor: TagsInput,\n\n    /**\n     * Adds the given item as a new tag. Pass true to dontPushVal to prevent\n     * updating the elements val()\n     */\n    add: function(item, dontPushVal, options) {\n      var self = this;\n\n      if (self.options.maxTags && self.itemsArray.length >= self.options.maxTags)\n        return;\n\n      // Ignore falsey values, except false\n      if (item !== false && !item)\n        return;\n\n      // Trim value\n      if (typeof item === \"string\" && self.options.trimValue) {\n        item = $.trim(item);\n      }\n\n      // Throw an error when trying to add an object while the itemValue option was not set\n      if (typeof item === \"object\" && !self.objectItems)\n        throw(\"Can't add objects when itemValue option is not set\");\n\n      // Ignore strings only containg whitespace\n      if (item.toString().match(/^\\s*$/))\n        return;\n\n      // If SELECT but not multiple, remove current tag\n      if (self.isSelect && !self.multiple && self.itemsArray.length > 0)\n        self.remove(self.itemsArray[0]);\n\n      if (typeof item === \"string\" && this.$element[0].tagName === 'INPUT') {\n        var delimiter = (self.options.delimiterRegex) ? self.options.delimiterRegex : self.options.delimiter;\n        var items = item.split(delimiter);\n        if (items.length > 1) {\n          for (var i = 0; i < items.length; i++) {\n            this.add(items[i], true);\n          }\n\n          if (!dontPushVal)\n            self.pushVal(self.options.triggerChange);\n          return;\n        }\n      }\n\n      var itemValue = self.options.itemValue(item),\n          itemText = self.options.itemText(item),\n          tagClass = self.options.tagClass(item),\n          itemTitle = self.options.itemTitle(item);\n\n      // Ignore items allready added\n      var existing = $.grep(self.itemsArray, function(item) { return self.options.itemValue(item) === itemValue; } )[0];\n      if (existing && !self.options.allowDuplicates) {\n        // Invoke onTagExists\n        if (self.options.onTagExists) {\n          var $existingTag = $(\".tag\", self.$container).filter(function() { return $(this).data(\"item\") === existing; });\n          self.options.onTagExists(item, $existingTag);\n        }\n        return;\n      }\n\n      // if length greater than limit\n      if (self.items().toString().length + item.length + 1 > self.options.maxInputLength)\n        return;\n\n      // raise beforeItemAdd arg\n      var beforeItemAddEvent = $.Event('beforeItemAdd', { item: item, cancel: false, options: options});\n      self.$element.trigger(beforeItemAddEvent);\n      if (beforeItemAddEvent.cancel)\n        return;\n\n      // register item in internal array and map\n      self.itemsArray.push(item);\n\n      // add a tag element\n\n      var $tag = $('<span class=\"tag ' + htmlEncode(tagClass) + (itemTitle !== null ? ('\" title=\"' + itemTitle) : '') + '\">' + htmlEncode(itemText) + '<span data-role=\"remove\"></span></span>');\n      $tag.data('item', item);\n      self.findInputWrapper().before($tag);\n      $tag.after(' ');\n\n      // Check to see if the tag exists in its raw or uri-encoded form\n      var optionExists = (\n        $('option[value=\"' + encodeURIComponent(itemValue) + '\"]', self.$element).length ||\n        $('option[value=\"' + htmlEncode(itemValue) + '\"]', self.$element).length\n      );\n\n      // add <option /> if item represents a value not present in one of the <select />'s options\n      if (self.isSelect && !optionExists) {\n        var $option = $('<option selected>' + htmlEncode(itemText) + '</option>');\n        $option.data('item', item);\n        $option.attr('value', itemValue);\n        self.$element.append($option);\n      }\n\n      if (!dontPushVal)\n        self.pushVal(self.options.triggerChange);\n\n      // Add class when reached maxTags\n      if (self.options.maxTags === self.itemsArray.length || self.items().toString().length === self.options.maxInputLength)\n        self.$container.addClass('bootstrap-tagsinput-max');\n\n      // If using typeahead, once the tag has been added, clear the typeahead value so it does not stick around in the input.\n      if ($('.typeahead, .twitter-typeahead', self.$container).length) {\n        self.$input.typeahead('val', '');\n      }\n\n      if (this.isInit) {\n        self.$element.trigger($.Event('itemAddedOnInit', { item: item, options: options }));\n      } else {\n        self.$element.trigger($.Event('itemAdded', { item: item, options: options }));\n      }\n    },\n\n    /**\n     * Removes the given item. Pass true to dontPushVal to prevent updating the\n     * elements val()\n     */\n    remove: function(item, dontPushVal, options) {\n      var self = this;\n\n      if (self.objectItems) {\n        if (typeof item === \"object\")\n          item = $.grep(self.itemsArray, function(other) { return self.options.itemValue(other) ==  self.options.itemValue(item); } );\n        else\n          item = $.grep(self.itemsArray, function(other) { return self.options.itemValue(other) ==  item; } );\n\n        item = item[item.length-1];\n      }\n\n      if (item) {\n        var beforeItemRemoveEvent = $.Event('beforeItemRemove', { item: item, cancel: false, options: options });\n        self.$element.trigger(beforeItemRemoveEvent);\n        if (beforeItemRemoveEvent.cancel)\n          return;\n\n        $('.tag', self.$container).filter(function() { return $(this).data('item') === item; }).remove();\n        $('option', self.$element).filter(function() { return $(this).data('item') === item; }).remove();\n        if($.inArray(item, self.itemsArray) !== -1)\n          self.itemsArray.splice($.inArray(item, self.itemsArray), 1);\n      }\n\n      if (!dontPushVal)\n        self.pushVal(self.options.triggerChange);\n\n      // Remove class when reached maxTags\n      if (self.options.maxTags > self.itemsArray.length)\n        self.$container.removeClass('bootstrap-tagsinput-max');\n\n      self.$element.trigger($.Event('itemRemoved',  { item: item, options: options }));\n    },\n\n    /**\n     * Removes all items\n     */\n    removeAll: function() {\n      var self = this;\n\n      $('.tag', self.$container).remove();\n      $('option', self.$element).remove();\n\n      while(self.itemsArray.length > 0)\n        self.itemsArray.pop();\n\n      self.pushVal(self.options.triggerChange);\n    },\n\n    /**\n     * Refreshes the tags so they match the text/value of their corresponding\n     * item.\n     */\n    refresh: function() {\n      var self = this;\n      $('.tag', self.$container).each(function() {\n        var $tag = $(this),\n            item = $tag.data('item'),\n            itemValue = self.options.itemValue(item),\n            itemText = self.options.itemText(item),\n            tagClass = self.options.tagClass(item);\n\n          // Update tag's class and inner text\n          $tag.attr('class', null);\n          $tag.addClass('tag ' + htmlEncode(tagClass));\n          $tag.contents().filter(function() {\n            return this.nodeType == 3;\n          })[0].nodeValue = htmlEncode(itemText);\n\n          if (self.isSelect) {\n            var option = $('option', self.$element).filter(function() { return $(this).data('item') === item; });\n            option.attr('value', itemValue);\n          }\n      });\n    },\n\n    /**\n     * Returns the items added as tags\n     */\n    items: function() {\n      return this.itemsArray;\n    },\n\n    /**\n     * Assembly value by retrieving the value of each item, and set it on the\n     * element.\n     */\n    pushVal: function() {\n      var self = this,\n          val = $.map(self.items(), function(item) {\n            return '\"' + self.options.itemValue(item).toString() + '\"';\n          });\n      self.$element.val(val.join(self.options.delimiter), true);\n\n      if (self.options.triggerChange)\n        self.$element.trigger('change');\n    },\n\n    /**\n     * Initializes the tags input behaviour on the element\n     */\n    build: function(options) {\n      var self = this;\n\n      self.options = $.extend({}, defaultOptions, options);\n      // When itemValue is set, freeInput should always be false\n      if (self.objectItems)\n        self.options.freeInput = false;\n\n      makeOptionItemFunction(self.options, 'itemValue');\n      makeOptionItemFunction(self.options, 'itemText');\n      makeOptionFunction(self.options, 'tagClass');\n\n      // Typeahead Bootstrap version 2.3.2\n      if (self.options.typeahead) {\n        var typeahead = self.options.typeahead || {};\n\n        makeOptionFunction(typeahead, 'source');\n\n        self.$input.typeahead($.extend({}, typeahead, {\n          source: function (query, process) {\n            function processItems(items) {\n              var texts = [];\n\n              for (var i = 0; i < items.length; i++) {\n                var text = self.options.itemText(items[i]);\n                map[text] = items[i];\n                texts.push(text);\n              }\n              process(texts);\n            }\n\n            this.map = {};\n            var map = this.map,\n                data = typeahead.source(query);\n\n            if ($.isFunction(data.success)) {\n              // support for Angular callbacks\n              data.success(processItems);\n            } else if ($.isFunction(data.then)) {\n              // support for Angular promises\n              data.then(processItems);\n            } else {\n              // support for functions and jquery promises\n              $.when(data)\n               .then(processItems);\n            }\n          },\n          updater: function (text) {\n            self.add(this.map[text]);\n            return this.map[text];\n          },\n          matcher: function (text) {\n            return (text.toLowerCase().indexOf(this.query.trim().toLowerCase()) !== -1);\n          },\n          sorter: function (texts) {\n            return texts.sort();\n          },\n          highlighter: function (text) {\n            var regex = new RegExp( '(' + this.query + ')', 'gi' );\n            return text.replace( regex, \"<strong>$1</strong>\" );\n          }\n        }));\n      }\n\n      // typeahead.js\n      if (self.options.typeaheadjs) {\n\n          // Determine if main configurations were passed or simply a dataset\n          var typeaheadjs = self.options.typeaheadjs;\n          if (!$.isArray(typeaheadjs)) {\n              typeaheadjs = [null, typeaheadjs];\n          }\n          var valueKey = typeaheadjs[1].valueKey; // We should test typeaheadjs.size >= 1\n          var f_datum = valueKey ? function (datum) { return datum[valueKey];  }\n                                 : function (datum) {  return datum;  }\n          $.fn.typeahead.apply(self.$input,typeaheadjs).on('typeahead:selected', $.proxy(function (obj, datum) {\n              self.add( f_datum(datum) );\n              self.$input.typeahead('val', '');\n            }, self));\n\n      }\n\n      self.$container.on('click', $.proxy(function(event) {\n        if (! self.$element.attr('disabled')) {\n          self.$input.removeAttr('disabled');\n        }\n        self.$input.focus();\n      }, self));\n\n        if (self.options.addOnBlur && self.options.freeInput) {\n          self.$input.on('focusout', $.proxy(function(event) {\n              // HACK: only process on focusout when no typeahead opened, to\n              //       avoid adding the typeahead text as tag\n              if ($('.typeahead, .twitter-typeahead', self.$container).length === 0) {\n                self.add(self.$input.val());\n                self.$input.val('');\n              }\n          }, self));\n        }\n\n      // Toggle the 'focus' css class on the container when it has focus\n      self.$container.on({\n        focusin: function() {\n          self.$container.addClass(self.options.focusClass);\n        },\n        focusout: function() {\n          self.$container.removeClass(self.options.focusClass);\n        },\n      });\n\n      self.$container.on('keydown', 'input', $.proxy(function(event) {\n        var $input = $(event.target),\n            $inputWrapper = self.findInputWrapper();\n\n        if (self.$element.attr('disabled')) {\n          self.$input.attr('disabled', 'disabled');\n          return;\n        }\n\n        switch (event.which) {\n          // BACKSPACE\n          case 8:\n            if (doGetCaretPosition($input[0]) === 0) {\n              var prev = $inputWrapper.prev();\n              if (prev.length) {\n                self.remove(prev.data('item'));\n              }\n            }\n            break;\n\n          // DELETE\n          case 46:\n            if (doGetCaretPosition($input[0]) === 0) {\n              var next = $inputWrapper.next();\n              if (next.length) {\n                self.remove(next.data('item'));\n              }\n            }\n            break;\n\n          // LEFT ARROW\n          case 37:\n            // Try to move the input before the previous tag\n            var $prevTag = $inputWrapper.prev();\n            if ($input.val().length === 0 && $prevTag[0]) {\n              $prevTag.before($inputWrapper);\n              $input.focus();\n            }\n            break;\n          // RIGHT ARROW\n          case 39:\n            // Try to move the input after the next tag\n            var $nextTag = $inputWrapper.next();\n            if ($input.val().length === 0 && $nextTag[0]) {\n              $nextTag.after($inputWrapper);\n              $input.focus();\n            }\n            break;\n         default:\n             // ignore\n         }\n\n        // Reset internal input's size\n        var textLength = $input.val().length,\n            wordSpace = Math.ceil(textLength / 5),\n            size = textLength + wordSpace + 1;\n        $input.attr('size', Math.max(this.inputSize, $input.val().length));\n      }, self));\n\n      self.$container.on('keypress', 'input', $.proxy(function(event) {\n         var $input = $(event.target);\n\n         if (self.$element.attr('disabled')) {\n            self.$input.attr('disabled', 'disabled');\n            return;\n         }\n\n         var text = $input.val(),\n         maxLengthReached = self.options.maxChars && text.length >= self.options.maxChars;\n         if (self.options.freeInput && (keyCombinationInList(event, self.options.confirmKeys) || maxLengthReached)) {\n            // Only attempt to add a tag if there is data in the field\n            if (text.length !== 0) {\n               self.add(maxLengthReached ? text.substr(0, self.options.maxChars) : text);\n               $input.val('');\n            }\n\n            // If the field is empty, let the event triggered fire as usual\n            if (self.options.cancelConfirmKeysOnEmpty === false) {\n                event.preventDefault();\n            }\n         }\n\n         // Reset internal input's size\n         var textLength = $input.val().length,\n            wordSpace = Math.ceil(textLength / 5),\n            size = textLength + wordSpace + 1;\n         $input.attr('size', Math.max(this.inputSize, $input.val().length));\n      }, self));\n\n      // Remove icon clicked\n      self.$container.on('click', '[data-role=remove]', $.proxy(function(event) {\n        if (self.$element.attr('disabled')) {\n          return;\n        }\n        self.remove($(event.target).closest('.tag').data('item'));\n      }, self));\n\n      // Only add existing value as tags when using strings as tags\n      if (self.options.itemValue === defaultOptions.itemValue) {\n        if (self.$element[0].tagName === 'INPUT') {\n            self.add(self.$element.val());\n        } else {\n          $('option', self.$element).each(function() {\n            self.add($(this).attr('value'), true);\n          });\n        }\n      }\n    },\n\n    /**\n     * Removes all tagsinput behaviour and unregsiter all event handlers\n     */\n    destroy: function() {\n      var self = this;\n\n      // Unbind events\n      self.$container.off('keypress', 'input');\n      self.$container.off('click', '[role=remove]');\n\n      self.$container.remove();\n      self.$element.removeData('tagsinput');\n      self.$element.show();\n    },\n\n    /**\n     * Sets focus on the tagsinput\n     */\n    focus: function() {\n      this.$input.focus();\n    },\n\n    /**\n     * Returns the internal input element\n     */\n    input: function() {\n      return this.$input;\n    },\n\n    /**\n     * Returns the element which is wrapped around the internal input. This\n     * is normally the $container, but typeahead.js moves the $input element.\n     */\n    findInputWrapper: function() {\n      var elt = this.$input[0],\n          container = this.$container[0];\n      while(elt && elt.parentNode !== container)\n        elt = elt.parentNode;\n\n      return $(elt);\n    }\n  };\n\n  /**\n   * Register JQuery plugin\n   */\n  $.fn.tagsinput = function(arg1, arg2, arg3) {\n    var results = [];\n\n    this.each(function() {\n      var tagsinput = $(this).data('tagsinput');\n      // Initialize a new tags input\n      if (!tagsinput) {\n          tagsinput = new TagsInput(this, arg1);\n          $(this).data('tagsinput', tagsinput);\n          results.push(tagsinput);\n\n          if (this.tagName === 'SELECT') {\n              $('option', $(this)).attr('selected', 'selected');\n          }\n\n          // Init tags from $(this).val()\n          $(this).val($(this).val());\n      } else if (!arg1 && !arg2) {\n          // tagsinput already exists\n          // no function, trying to init\n          results.push(tagsinput);\n      } else if(tagsinput[arg1] !== undefined) {\n          // Invoke function on existing tags input\n            if(tagsinput[arg1].length === 3 && arg3 !== undefined){\n               var retVal = tagsinput[arg1](arg2, null, arg3);\n            }else{\n               var retVal = tagsinput[arg1](arg2);\n            }\n          if (retVal !== undefined)\n              results.push(retVal);\n      }\n    });\n\n    if ( typeof arg1 == 'string') {\n      // Return the results from the invoked function calls\n      return results.length > 1 ? results : results[0];\n    } else {\n      return results;\n    }\n  };\n\n  $.fn.tagsinput.Constructor = TagsInput;\n\n  /**\n   * Most options support both a string or number as well as a function as\n   * option value. This function makes sure that the option with the given\n   * key in the given options is wrapped in a function\n   */\n  function makeOptionItemFunction(options, key) {\n    if (typeof options[key] !== 'function') {\n      var propertyName = options[key];\n      options[key] = function(item) { return item[propertyName]; };\n    }\n  }\n  function makeOptionFunction(options, key) {\n    if (typeof options[key] !== 'function') {\n      var value = options[key];\n      options[key] = function() { return value; };\n    }\n  }\n  /**\n   * HtmlEncodes the given value\n   */\n  var htmlEncodeContainer = $('<div />');\n  function htmlEncode(value) {\n    if (value) {\n      return htmlEncodeContainer.text(value).html();\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * Returns the position of the caret in the given input field\n   * http://flightschool.acylt.com/devnotes/caret-position-woes/\n   */\n  function doGetCaretPosition(oField) {\n    var iCaretPos = 0;\n    if (document.selection) {\n      oField.focus ();\n      var oSel = document.selection.createRange();\n      oSel.moveStart ('character', -oField.value.length);\n      iCaretPos = oSel.text.length;\n    } else if (oField.selectionStart || oField.selectionStart == '0') {\n      iCaretPos = oField.selectionStart;\n    }\n    return (iCaretPos);\n  }\n\n  /**\n    * Returns boolean indicates whether user has pressed an expected key combination.\n    * @param object keyPressEvent: JavaScript event object, refer\n    *     http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n    * @param object lookupList: expected key combinations, as in:\n    *     [13, {which: 188, shiftKey: true}]\n    */\n  function keyCombinationInList(keyPressEvent, lookupList) {\n      var found = false;\n      $.each(lookupList, function (index, keyCombination) {\n          if (typeof (keyCombination) === 'number' && keyPressEvent.which === keyCombination) {\n              found = true;\n              return false;\n          }\n\n          if (keyPressEvent.which === keyCombination.which) {\n              var alt = !keyCombination.hasOwnProperty('altKey') || keyPressEvent.altKey === keyCombination.altKey,\n                  shift = !keyCombination.hasOwnProperty('shiftKey') || keyPressEvent.shiftKey === keyCombination.shiftKey,\n                  ctrl = !keyCombination.hasOwnProperty('ctrlKey') || keyPressEvent.ctrlKey === keyCombination.ctrlKey;\n              if (alt && shift && ctrl) {\n                  found = true;\n                  return false;\n              }\n          }\n      });\n\n      return found;\n  }\n\n  /**\n   * Initialize tagsinput behaviour on inputs and selects which have\n   * data-role=tagsinput\n   */\n  $(function() {\n    $(\"input[data-role=tagsinput], select[multiple][data-role=tagsinput]\").tagsinput();\n  });\n})(window.jQuery);"]}