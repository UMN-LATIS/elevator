{"version":3,"sources":["excerpt.js"],"names":["embeddedStartTimeValue","embeddedEndTimeValue","suppressSeek","suppressCounter","setPlayBounds","startTime","endTime","getTime","jwplayer","getPosition","$","document","ready","onTime","e","position","seek","requests","responses","requestHandler","event","type","data","player","once","window","parent","postMessage","payload","sendScrubberPosition","getState","pause","pausePlayer","previousScrubberPosition","sendScrubberChanges","ms","currentScubberPosition","setTimeout","addEventListener"],"mappings":"AACA,IAAIA,uBAAyB,KACzBC,qBAAuB,KACvBC,cAAe,EACfC,gBAAkB,EA4BtB,SAASC,cAAcC,EAAWC,GACjCN,uBAAyBK,EACzBJ,qBAAuBK,EAGxB,SAASC,UACR,OAAOC,SAAS,gBAAgBC,cAjCjCC,EAAEC,UAAUC,OAAM,WACjBJ,SAAS,gBAAgBK,QAAO,SAAUC,GAEpCd,wBAA2BC,yBAGhCE,gBACsB,KACrBA,gBAAkB,EAClBD,cAAe,GAEZA,eAIAY,EAAEC,SAAYf,uBAAyB,IAC1CQ,SAAS,gBAAgBQ,KAAKhB,wBAC9BE,cAAe,GAEZY,EAAEC,SAAWd,uBAChBO,SAAS,gBAAgBQ,KAAKhB,wBAC9BE,cAAe,WAsBlB,WACC,MAEMe,EACY,kBADZA,EAEkB,wBAFlBA,EAGS,eAGTC,EACc,oBADdA,EAEsB,4BAFtBA,EAGoB,0BAHpBA,EAIiB,uBAGvB,SAASC,EAAeC,GAEvB,MAAMC,KAAEA,GAASD,EAAME,KACvB,OAAID,IAASJ,EA6Bd,SAAuBZ,EAAWC,GACjCN,uBAAyBK,EACzBJ,qBAAuBK,EACvB,MAAMiB,EAASf,SAAS,gBACxBe,EAAOC,KAAK,OAAQ,IAAMD,EAAOP,KAAKX,IAEtCoB,OAAOC,OAAOC,YAAY,CACzBN,KAAMH,GACJ,KApCKd,CAAcgB,EAAME,KAAKM,QAAQvB,UAAWe,EAAME,KAAKM,QAAQtB,SAEnEe,IAASJ,EACLY,IAEJR,IAASJ,EAKd,WACC,MAAMM,EAASf,SAAS,gBACE,YAAtBe,EAAOO,YACVP,EAAOQ,QAERN,OAAOC,OAAOC,YAAY,CACzBN,KAAMH,EACNU,QAASL,EAAOO,YACd,KAZKE,QADR,EAgBD,SAASH,IACRJ,OAAOC,OAAOC,YAAY,CACzBN,KAAMH,EACNU,QAASrB,WACP,KAsBJ,IAAI0B,EAA2B,KAC/B,SAASC,EAAoBC,EAAK,KACjC,MAAMC,EAAyB7B,UAC/B,OAAI6B,IAA2BH,IAG/BJ,IACAI,EAA2BG,GAHnBC,WAAWH,EAAqBC,GAOzCzB,GAAE,WAEDe,OAAOa,iBAAiB,UAAWnB,GAGnCe,IAvBAT,OAAOC,OAAOC,YAAY,CACzBN,KAAMH,GACJ,QA9DL","file":"excerpt.min.js","sourcesContent":["\nvar embeddedStartTimeValue = null;\nvar embeddedEndTimeValue = null;\nvar suppressSeek = false;\nvar suppressCounter = 0;\n$(document).ready(function() {\n\tjwplayer(\"videoElement\").onTime(function (e) {\n\n\t\tif (!embeddedStartTimeValue || !embeddedEndTimeValue) {\n\t\t\treturn;\n\t\t}\n\t\tsuppressCounter++;\n\t\tif (suppressCounter > 10) {\n\t\t\tsuppressCounter = 0;\n\t\t\tsuppressSeek = false;\n\t\t}\n\t\tif (suppressSeek) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (e.position < (embeddedStartTimeValue - 5)) {\n\t\t\tjwplayer(\"videoElement\").seek(embeddedStartTimeValue);\n\t\t\tsuppressSeek = true;\n\t\t}\n\t\tif (e.position > embeddedEndTimeValue) {\n\t\t\tjwplayer(\"videoElement\").seek(embeddedStartTimeValue);\n\t\t\tsuppressSeek = true;\n\t\t}\n\t});\n});\n\n\nfunction setPlayBounds(startTime, endTime) {\n\tembeddedStartTimeValue = startTime;\n\tembeddedEndTimeValue = endTime;\n}\n\nfunction getTime() {\n\treturn jwplayer(\"videoElement\").getPosition();\n}\n\n/**\n * The excerpt media player is loaded in an iframe, and we'll\n * need to communicate with the parent window to set the play bounds\n * and get the current scrubber position.\n * This sets up some some simple request/response messaging between\n * between the iframe and the parent window.\n */\n(function setupIframeMessaging() {\n\tconst log = (...args) => console.log('[IFRAME] ', ...args);\n\n\tconst requests = {\n\t\tSET_PLAY_BOUNDS: 'SET_PLAY_BOUNDS',\n\t\tGET_SCRUBBER_POSITION: 'GET_SCRUBBER_POSITION',\n\t\tPAUSE_PLAYER: 'PAUSE_PLAYER',\n\t}\n\n\tconst responses = {\n\t\tMEDIAPLAYER_READY: 'MEDIAPLAYER_READY',\n\t\tCURRENT_SCRUBBER_POSITION: 'CURRENT_SCRUBBER_POSITION',\n\t\tSET_PLAY_BOUNDS_SUCCESS: 'SET_PLAY_BOUNDS_SUCCESS',\n\t\tPAUSE_PLAYER_SUCCESS: 'PAUSE_PLAYER_SUCCESS',\n\t}\n\n\tfunction requestHandler(event) {\n\t\t// log('message received:', event.data?.type ?? 'unknown' , event.data?.payload ?? '');\n\t\tconst { type } = event.data;\n\t\tif (type === requests.SET_PLAY_BOUNDS) {\n\t\t\treturn setPlayBounds(event.data.payload.startTime, event.data.payload.endTime);\n\t\t}\n\t\tif (type === requests.GET_SCRUBBER_POSITION) {\n\t\t\treturn sendScrubberPosition();\n\t\t}\n\t\tif (type === requests.PAUSE_PLAYER) {\n\t\t\treturn pausePlayer();\n\t\t}\n\t}\n\n\tfunction pausePlayer() {\n\t\tconst player = jwplayer(\"videoElement\");\n\t\tif (player.getState() === 'playing') {\n\t\t\tplayer.pause();\n\t\t}\n\t\twindow.parent.postMessage({\n\t\t\ttype: responses.PAUSE_PLAYER_SUCCESS,\n\t\t\tpayload: player.getState(),\n\t\t}, '*');\n\t}\n\n\tfunction sendScrubberPosition() {\n\t\twindow.parent.postMessage({\n\t\t\ttype: responses.CURRENT_SCRUBBER_POSITION,\n\t\t\tpayload: getTime(),\n\t\t}, '*');\n\t}\n\n\tfunction setPlayBounds(startTime, endTime) {\n\t\tembeddedStartTimeValue = startTime;\n\t\tembeddedEndTimeValue = endTime;\n\t\tconst player = jwplayer(\"videoElement\");\n\t\tplayer.once('play', () => player.seek(startTime));\n\n\t\twindow.parent.postMessage({\n\t\t\ttype: responses.SET_PLAY_BOUNDS_SUCCESS,\n\t\t}, '*');\n\t}\n\n\tfunction sendMediaPlayerReady() {\n\t\twindow.parent.postMessage({\n\t\t\ttype: responses.MEDIAPLAYER_READY,\n\t\t}, '*');\n\t}\n\n\t// sends the current scrubber position to the parent window\n\t// if changes are detected\n\tlet previousScrubberPosition = null;\n\tfunction sendScrubberChanges(ms = 1000) {\n\t\tconst currentScubberPosition = getTime();\n\t\tif (currentScubberPosition === previousScrubberPosition) {\n\t\t\treturn setTimeout(sendScrubberChanges, ms);\n\t\t}\n\t\tsendScrubberPosition();\n\t\tpreviousScrubberPosition = currentScubberPosition;\n\t\treturn setTimeout(sendScrubberChanges, ms);\n\t}\n\n\t$(function () {\n\t\t// once the document is ready, setup the iframe messaging\n\t\twindow.addEventListener('message', requestHandler);\n\t\t\n\t\t// send any current scrubber position to parent window\n\t\tsendScrubberChanges();\n\n\t\t// let parent window knows the media player is ready\n\t\tsendMediaPlayerReady();\n\t});\n})();\n"]}