{"version":3,"sources":["serializeForm.js"],"names":["$","fn","serializeForm","this","length","data","lookup","selector","parse","named","name","replace","split","cap","$el","i","undefined","push","val","filter","each","find","jQuery"],"mappings":"CAOC,SAAUA,GACTA,EAAEC,GAAGC,cAAgB,WAGnB,GAAKC,KAAKC,OAAS,EACjB,OAAO,CAGT,IAAIC,MACAC,EAASD,EACTE,EAAW,yDACXC,EAAQ,WAGV,GAAIC,GAAQN,KAAKO,KAAKC,QAAQ,iBAAkB,OAAOC,MAAM,KACzDC,EAAMJ,EAAML,OAAS,EACrBU,EAAMd,EAAGG,KAGb,IAAKM,EAAO,GAAM,CAChB,IAAM,GAAIM,GAAI,EAAOF,EAAJE,EAASA,IAExBT,EAASA,EAAQG,EAAMM,IAAOT,EAAQG,EAAMM,MACrB,KAAnBN,EAAOM,EAAI,SAIOC,UAAnBV,EAAOF,OACVE,EAAOW,KAAMH,EAAII,OAEjBZ,EAAQG,EAAOI,IAAWC,EAAII,MAIhCZ,EAASD,GAWb,OANAF,MAAKgB,OAAQZ,GAAWa,KAAMZ,GAG9BL,KAAKkB,KAAMd,GAAWa,KAAMZ,GAGrBH,IAERiB","file":"serializeForm.js","sourcesContent":["/*\n * serializeForm\n * https://github.com/danheberden/serializeForm\n *\n * Copyright (c) 2012 Dan Heberden\n * Licensed under the MIT, GPL licenses.\n */\n(function( $ ){\n  $.fn.serializeForm = function() {\n\n    // don't do anything if we didn't get any elements\n    if ( this.length < 1) {\n      return false;\n    }\n\n    var data = {};\n    var lookup = data; //current reference of data\n    var selector = ':input[type!=\"checkbox\"][type!=\"radio\"], input:checked';\n    var parse = function() {\n\n      // data[a][b] becomes [ data, a, b ]\n      var named = this.name.replace(/\\[([^\\]]+)?\\]/g, ',$1').split(',');\n      var cap = named.length - 1;\n      var $el = $( this );\n\n      // Ensure that only elements with valid `name` properties will be serialized\n      if ( named[ 0 ] ) {\n        for ( var i = 0; i < cap; i++ ) {\n          // move down the tree - create objects or array if necessary\n          lookup = lookup[ named[i] ] = lookup[ named[i] ] ||\n            ( named[ i + 1 ] === \"\" ? [] : {} );\n        }\n\n        // at the end, push or assign the value\n        if ( lookup.length !==  undefined ) {\n          lookup.push( $el.val() );\n        }else {\n          lookup[ named[ cap ] ]  = $el.val();\n        }\n\n        // assign the reference back to root\n        lookup = data;\n      }\n    };\n\n    // first, check for elements passed into this function\n    this.filter( selector ).each( parse );\n\n    // then parse possible child elements\n    this.find( selector ).each( parse );\n\n    // return data\n    return data;\n  };\n}( jQuery ));"],"sourceRoot":"/source/"}