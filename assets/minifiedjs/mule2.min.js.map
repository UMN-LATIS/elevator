{"version":3,"sources":["mule2.js"],"names":["namespace","CryptoJS","h","s","f","t","lib","g","j","Base","extend","a","prototype","this","c","mixIn","hasOwnProperty","init","$super","apply","arguments","create","toString","clone","q","WordArray","words","sigBytes","length","u","stringify","concat","d","b","clamp","e","push","ceil","call","slice","random","v","enc","Hex","join","parse","parseInt","substr","k","Latin1","String","fromCharCode","charCodeAt","l","Utf8","decodeURIComponent","escape","Error","unescape","encodeURIComponent","x","BufferedBlockAlgorithm","reset","_data","_nDataBytes","_append","_process","blockSize","max","_minBufferSize","min","m","_doProcessBlock","splice","Hasher","cfg","_doReset","update","finalize","_doFinalize","_createHelper","_createHmacHelper","w","HMAC","algo","Math","sqrt","pow","SHA256","_hash","p","n","r","floor","HmacSHA256","_hasher","_oKey","_iKey","undefined","ArrayBuffer","Uint8Array","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","buffer","byteOffset","byteLength","XHR","args","headers","method","xhr","XMLHttpRequest","load_callback","addEventListener","error_callback","state_change_callback","progress_callback","upload","timeout_callback","url","extra_params","param_name","indexOf","open","header","setRequestHeader","body","send","mule_upload","settings","Uploader","input","file_input","file","chunk_size","MB","max_size","GB","num_workers","key","bucket","host","location","protocol","access_key","content_type","acl","on_progress","on_chunk_progress","on_select","on_error","on_complete","on_init","on_start","on_chunk_uploaded","ajax_base","accepted_extensions","set_state","onchange","force","get_state","target","files","upload_file","setTimeout","debug","log","console","i","KB","File","webkitSlice","mozSlice","FileList","Blob","navigator","userAgent","lastModifiedDate","Date","size","alert","file_extension","name","replace","split","pop","extensions_array","file_accepted","filename","filesize","mime_type","collectionId","last_modified","valueOf","json","JSON","responseText","date","auth","upload_id","chunks","backup_key","load_file","AmazonXHR","list","parts","chunk","set_progress","get_chunk_size","set_chunk_finished","set_chunk_uploading","_loaded_chunks","_progress","_total_progress","_uploading_chunks","_chunks","xml","responseXML","getElementsByTagName","textContent","_start_fired","get_total_progress","next_chunk","get_next_chunk","upload_chunk","upload_finished","finish_upload","get_chunk_uploading","is_chunk_loaded","start","end","last_progress_time","_intervals","handler","readyState","DONE","status","error_handler","notify_chunk_uploaded","clearInterval","interval","setInterval","progress_handler","loaded","error_handled","error_arguments","check_already_uploaded","notify_upload_finished","abort","_chunk_xhr","update_chunks","cancel","num_chunks","finish","callback","path","inner_handler","_init_chunks","part_number","add_loaded_chunk","is_selected","_state","state","log_status","val","is_last_chunk","querystring","uploadId","data","payload","marker","window","xml_parts","etag","is_truncated","part_marker","new_parts","chunk_num","callbacks","xhr_callback","readystate_callback","Object","partNumber","uploads","x-amz-acl","Content-Disposition","Content-Type","self","request_date","date_string","getUTCFullYear","utils","zfill","getUTCMonth","getUTCDate","uriencode","iso8601","region","header_keys","sort","get_authorization_header","first","get_sorted_keys","signed_headers","toLowerCase","canonical_request","get_canonical_request","string_to_sign","get_string_to_sign","signature","sign_request","request","toUpperCase","value","querystring_keys","trim","time","to_sign","res","string","output","ch","obj","keys","getUTCHours","getUTCMinutes","getUTCSeconds","str","num"],"mappings":"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","file":"mule2.min.js","sourcesContent":["/**\n * mule-uploader.js\n *\n * Copyright 2012-2014, Gabriel Purcaru\n * Released under GPL License.\n * License: http://www.gnu.org/copyleft/gpl.html\n */\n\n\n(function(namespace){\n    /*\n    CryptoJS v3.1.2\n    code.google.com/p/crypto-js\n    (c) 2009-2013 by Jeff Mott. All rights reserved.\n    code.google.com/p/crypto-js/wiki/License\n    */\n    var CryptoJS=CryptoJS||function(h,s){var f={},t=f.lib={},g=function(){},j=t.Base={extend:function(a){g.prototype=this;var c=new g;a&&c.mixIn(a);c.hasOwnProperty(\"init\")||(c.init=function(){c.$super.init.apply(this,arguments)});c.init.prototype=c;c.$super=this;return c},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&&(this[c]=a[c]);a.hasOwnProperty(\"toString\")&&(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},\n    q=t.WordArray=j.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=s?c:4*a.length},toString:function(a){return(a||u).stringify(this)},concat:function(a){var c=this.words,d=a.words,b=this.sigBytes;a=a.sigBytes;this.clamp();if(b%4)for(var e=0;e<a;e++)c[b+e>>>2]|=(d[e>>>2]>>>24-8*(e%4)&255)<<24-8*((b+e)%4);else if(65535<d.length)for(e=0;e<a;e+=4)c[b+e>>>2]=d[e>>>2];else c.push.apply(c,d);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<<\n    32-8*(c%4);a.length=h.ceil(c/4)},clone:function(){var a=j.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],d=0;d<a;d+=4)c.push(4294967296*h.random()|0);return new q.init(c,a)}}),v=f.enc={},u=v.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var d=[],b=0;b<a;b++){var e=c[b>>>2]>>>24-8*(b%4)&255;d.push((e>>>4).toString(16));d.push((e&15).toString(16))}return d.join(\"\")},parse:function(a){for(var c=a.length,d=[],b=0;b<c;b+=2)d[b>>>3]|=parseInt(a.substr(b,\n    2),16)<<24-4*(b%8);return new q.init(d,c/2)}},k=v.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var d=[],b=0;b<a;b++)d.push(String.fromCharCode(c[b>>>2]>>>24-8*(b%4)&255));return d.join(\"\")},parse:function(a){for(var c=a.length,d=[],b=0;b<c;b++)d[b>>>2]|=(a.charCodeAt(b)&255)<<24-8*(b%4);return new q.init(d,c)}},l=v.Utf8={stringify:function(a){try{return decodeURIComponent(escape(k.stringify(a)))}catch(c){throw Error(\"Malformed UTF-8 data\");}},parse:function(a){return k.parse(unescape(encodeURIComponent(a)))}},\n    x=t.BufferedBlockAlgorithm=j.extend({reset:function(){this._data=new q.init;this._nDataBytes=0},_append:function(a){\"string\"==typeof a&&(a=l.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var c=this._data,d=c.words,b=c.sigBytes,e=this.blockSize,f=b/(4*e),f=a?h.ceil(f):h.max((f|0)-this._minBufferSize,0);a=f*e;b=h.min(4*a,b);if(a){for(var m=0;m<a;m+=e)this._doProcessBlock(d,m);m=d.splice(0,a);c.sigBytes-=b}return new q.init(m,b)},clone:function(){var a=j.clone.call(this);\n    a._data=this._data.clone();return a},_minBufferSize:0});t.Hasher=x.extend({cfg:j.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){x.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(c,d){return(new a.init(d)).finalize(c)}},_createHmacHelper:function(a){return function(c,d){return(new w.HMAC.init(a,\n    d)).finalize(c)}}});var w=f.algo={};return f}(Math);\n    (function(h){for(var s=CryptoJS,f=s.lib,t=f.WordArray,g=f.Hasher,f=s.algo,j=[],q=[],v=function(a){return 4294967296*(a-(a|0))|0},u=2,k=0;64>k;){var l;a:{l=u;for(var x=h.sqrt(l),w=2;w<=x;w++)if(!(l%w)){l=!1;break a}l=!0}l&&(8>k&&(j[k]=v(h.pow(u,0.5))),q[k]=v(h.pow(u,1/3)),k++);u++}var a=[],f=f.SHA256=g.extend({_doReset:function(){this._hash=new t.init(j.slice(0))},_doProcessBlock:function(c,d){for(var b=this._hash.words,e=b[0],f=b[1],m=b[2],h=b[3],p=b[4],j=b[5],k=b[6],l=b[7],n=0;64>n;n++){if(16>n)a[n]=\n    c[d+n]|0;else{var r=a[n-15],g=a[n-2];a[n]=((r<<25|r>>>7)^(r<<14|r>>>18)^r>>>3)+a[n-7]+((g<<15|g>>>17)^(g<<13|g>>>19)^g>>>10)+a[n-16]}r=l+((p<<26|p>>>6)^(p<<21|p>>>11)^(p<<7|p>>>25))+(p&j^~p&k)+q[n]+a[n];g=((e<<30|e>>>2)^(e<<19|e>>>13)^(e<<10|e>>>22))+(e&f^e&m^f&m);l=k;k=j;j=p;p=h+r|0;h=m;m=f;f=e;e=r+g|0}b[0]=b[0]+e|0;b[1]=b[1]+f|0;b[2]=b[2]+m|0;b[3]=b[3]+h|0;b[4]=b[4]+p|0;b[5]=b[5]+j|0;b[6]=b[6]+k|0;b[7]=b[7]+l|0},_doFinalize:function(){var a=this._data,d=a.words,b=8*this._nDataBytes,e=8*a.sigBytes;\n        d[e>>>5]|=128<<24-e%32;d[(e+64>>>9<<4)+14]=h.floor(b/4294967296);d[(e+64>>>9<<4)+15]=b;a.sigBytes=4*d.length;this._process();return this._hash},clone:function(){var a=g.clone.call(this);a._hash=this._hash.clone();return a}});s.SHA256=g._createHelper(f);s.HmacSHA256=g._createHmacHelper(f)})(Math);\n    (function(h){for(var s=CryptoJS,f=s.lib,g=f.WordArray,q=f.Hasher,f=s.algo,m=[],r=[],l=function(a){return 4294967296*(a-(a|0))|0},k=2,n=0;64>n;){var j;a:{j=k;for(var u=h.sqrt(j),t=2;t<=u;t++)if(!(j%t)){j=!1;break a}j=!0}j&&(8>n&&(m[n]=l(h.pow(k,0.5))),r[n]=l(h.pow(k,1/3)),n++);k++}var a=[],f=f.SHA256=q.extend({_doReset:function(){this._hash=new g.init(m.slice(0))},_doProcessBlock:function(c,d){for(var b=this._hash.words,e=b[0],f=b[1],g=b[2],j=b[3],h=b[4],m=b[5],n=b[6],q=b[7],p=0;64>p;p++){if(16>p)a[p]=\n    c[d+p]|0;else{var k=a[p-15],l=a[p-2];a[p]=((k<<25|k>>>7)^(k<<14|k>>>18)^k>>>3)+a[p-7]+((l<<15|l>>>17)^(l<<13|l>>>19)^l>>>10)+a[p-16]}k=q+((h<<26|h>>>6)^(h<<21|h>>>11)^(h<<7|h>>>25))+(h&m^~h&n)+r[p]+a[p];l=((e<<30|e>>>2)^(e<<19|e>>>13)^(e<<10|e>>>22))+(e&f^e&g^f&g);q=n;n=m;m=h;h=j+k|0;j=g;g=f;f=e;e=k+l|0}b[0]=b[0]+e|0;b[1]=b[1]+f|0;b[2]=b[2]+g|0;b[3]=b[3]+j|0;b[4]=b[4]+h|0;b[5]=b[5]+m|0;b[6]=b[6]+n|0;b[7]=b[7]+q|0},_doFinalize:function(){var a=this._data,d=a.words,b=8*this._nDataBytes,e=8*a.sigBytes;\n    d[e>>>5]|=128<<24-e%32;d[(e+64>>>9<<4)+14]=h.floor(b/4294967296);d[(e+64>>>9<<4)+15]=b;a.sigBytes=4*d.length;this._process();return this._hash},clone:function(){var a=q.clone.call(this);a._hash=this._hash.clone();return a}});s.SHA256=q._createHelper(f);s.HmacSHA256=q._createHmacHelper(f)})(Math);\n    (function(){var h=CryptoJS,s=h.enc.Utf8;h.algo.HMAC=h.lib.Base.extend({init:function(f,g){f=this._hasher=new f.init;\"string\"==typeof g&&(g=s.parse(g));var h=f.blockSize,m=4*h;g.sigBytes>m&&(g=f.finalize(g));g.clamp();for(var r=this._oKey=g.clone(),l=this._iKey=g.clone(),k=r.words,n=l.words,j=0;j<h;j++)k[j]^=1549556828,n[j]^=909522486;r.sigBytes=l.sigBytes=m;this.reset()},reset:function(){var f=this._hasher;f.reset();f.update(this._iKey)},update:function(f){this._hasher.update(f);return this},finalize:function(f){var g=\n    this._hasher;f=g.finalize(f);g.reset();return g.finalize(this._oKey.clone().concat(f))}})})();\n    (function(){if(undefined!==typeof ArrayBuffer){var b=CryptoJS.lib.WordArray,e=b.init;(b.init=function(a){a instanceof ArrayBuffer&&(a=new Uint8Array(a));if(a instanceof Int8Array||a instanceof Uint8ClampedArray||a instanceof Int16Array||a instanceof Uint16Array||a instanceof Int32Array||a instanceof Uint32Array||a instanceof Float32Array||a instanceof Float64Array)a=new Uint8Array(a.buffer,a.byteOffset,a.byteLength);if(a instanceof Uint8Array){for(var b=a.byteLength,d=[],c=0;c<b;c++)d[c>>>2]|=a[c]<<\n    24-8*(c%4);e.call(this,d,b)}else e.apply(this,arguments)}).prototype=b}})();\n\n    // AJAX helper. It takes an object that contains load_callback, error_callback,\n    // url, method, headers, state_change_callback, progress_callback\n    var XHR = function(args) {\n        // the user may or may not pass any headers\n        args.headers = args.headers || {};\n\n        // if no method is given, default to GET\n        args.method = args.method || \"GET\";\n\n        var xhr = new XMLHttpRequest();\n\n        // set the \"load\" callback if given\n        if(args.load_callback && typeof args.load_callback == 'function') {\n            xhr.addEventListener(\"load\", args.load_callback, true);\n        }\n\n        // set the \"error\" callback if given\n        if(args.error_callback && typeof args.error_callback == 'function') {\n            xhr.addEventListener(\"error\", args.error_callback, true);\n        }\n\n        // set the \"readystatechange\" callback if given\n        if(args.state_change_callback && typeof args.state_change_callback == 'function') {\n            xhr.addEventListener(\"readystatechange\", args.state_change_callback);\n        }\n\n        // set the \"progress\" callback if given\n        if(args.progress_callback && typeof args.progress_callback == 'function') {\n            xhr.upload.addEventListener(\"progress\", args.progress_callback);\n        }\n\n        // set the \"timeout\" callback if given\n        if(args.timeout_callback && typeof args.timeout_callback == 'function') {\n            xhr.addEventListener('timeout', args.timeout_callback);\n        }\n\n        // adding extra params as needed\n        var url = args.url;\n        if(args.extra_params) {\n            for(var param_name in args.extra_params) {\n                if(args.extra_params.hasOwnProperty(param_name)) {\n                    if(url.indexOf('?') !== -1) {\n                        url += \"&\";\n                    } else {\n                        url += \"?\";\n                    }\n\n                    url += encodeURIComponent(param_name) + \"=\";\n                    url += encodeURIComponent(args.extra_params[param_name]);\n                }\n            }\n        }\n\n        // open the xhr connection\n        xhr.open(args.method, url);\n\n        // set the headers\n        for(var header in args.headers) {\n            if(args.headers.hasOwnProperty(header)) {\n                xhr.setRequestHeader(header, args.headers[header]);\n            }\n        }\n\n        // send the ajax call\n        if(args.body) {\n            xhr.send(args.body);\n        } else {\n            xhr.send();\n        }\n        return xhr;\n    };\n\n    namespace.mule_upload = function(settings) {\n        var debug = true;\n\n        // custom logging function that prepends a text for easy identification;\n        // it is also toggled by the `debug` flag\n        var log = function() {};\n        if(debug && console && console.log) {\n            log = function() {\n                var args = [\"[MuleUploader]\"];\n                for(var i=0; i<arguments.length; i++) {\n                    args.push(arguments[i]);\n                }\n                return console.log.apply(console, args);\n            };\n        }\n\n        // helper constants for more readable code\n        var KB = 1024;\n        var MB = 1024 * KB;\n        var GB = 1024 * MB;\n\n        // for new webkit browsers, the .slice() method is named .webkitSlice()\n        // similar for mozilla\n        File.prototype.slice = File.prototype.webkitSlice || File.prototype.mozSlice || File.prototype.slice;\n\n        // verify that the browser has the needed HTML5 capabilities\n        if(!(namespace.File && namespace.FileList && namespace.Blob)) {\n            log(\"HTML5 APIs not available.\");\n            return -1;\n        }\n        if(navigator.userAgent.indexOf(\"Firefox\") !== -1) {\n            try {\n                new Blob([\"something\"]);\n            } catch(e) {\n                return -1;\n            }\n        }\n        log(\"OK\");\n\n        function Uploader(settings) {\n            // `u` is often used as an alias for `this` to be used in nested closures\n            var u = this;\n\n            settings = settings || {};\n\n            // make the input element another possible setting\n            // in some cases (e.g. drag & drop) there is no input element\n            u.input = settings.file_input;\n            u.file  = settings.file;\n\n            // NOTE: For Amazon S3, the minimum chunk size is 5MB\n            // we are using 6 for safe measure. Note that the maximum number of chunks\n            // is 10,000, so for example, if the chunk size is 6MB, the maximum\n            // possible file size is 6MB * 10,000 = ~58GB\n            settings.chunk_size = settings.chunk_size || (6 * MB); // default 6MB\n            settings.max_size = settings.max_size || 5 * GB; // 5GB\n\n            // the number of parallel upload xhr's\n            settings.num_workers = settings.num_workers || 4;\n\n            // the S3 object key; I recommend to generate this dynamically (e.g.\n            // a random string) to avoid unwanted overwrites.\n            settings.key = settings.key || \"the_key\";\n\n            // the Amazon S3 bucket where you'll store the uploads\n            settings.bucket = settings.bucket;\n            settings.host = settings.host || location.protocol + \"//\" + settings.bucket + \".s3.amazonaws.com\";\n\n            // the Amazon S3 access key. DO NOT give the AWS Secret code!\n            settings.access_key = settings.access_key;\n\n            // the Mime-Type of the content. You must match this with the backend value\n            // or you'll get an Invalid Signature error. If unsure about the\n            // mime type, use application/octet-stream\n            settings.content_type = settings.content_type || \"application/octet-stream\";\n\n\n            // acl can be set to:\n            // private\n            // public-read (* default)\n            // public-read-write\n            // authenticated-read\n            // bucket-owner-read\n            // bucket-owner-full-control\n            // log-delivery-write\n            settings.acl = settings.acl || 'public-read';\n\n            // various callbacks\n            settings.on_progress = settings.on_progress || function() {};\n            settings.on_chunk_progress = settings.on_chunk_progress || function() {};\n            settings.on_select = settings.on_select || function() {};\n            settings.on_error = settings.on_error || function() {};\n            settings.on_complete = settings.on_complete || function() {};\n            settings.on_init = settings.on_init || function() {};\n            settings.on_start = settings.on_start || function() {};\n            settings.on_chunk_uploaded = settings.on_chunk_uploaded || function() {};\n\n            // extra parameters to give to the backend\n            settings.extra_params = settings.extra_params || {};\n\n            // the location prefix of the uploader's backend\n            settings.ajax_base = settings.ajax_base || \"/upload-backend\";\n\n            //extensions comma delimited without period (jpg,jpeg,png,gif)\n            settings.accepted_extensions = settings.accepted_extensions || \"\";\n\n            // set the values so that they can be used everywhere, as needed\n            u.settings = settings;\n\n            // the \"waiting\" state means the uploader is waiting for the user\n            // to select a file\n            u.set_state(\"waiting\");\n\n            if (u.input) {\n                u.input.onchange = function(e, force) {\n                    // the `onchange` event may be triggered multiple times, so we\n                    // must ensure that the callback is only executed the first time\n                    if(u.get_state() != \"waiting\") {\n                        return false;\n                    }\n\n                    // the uploader doesn't support multiple uploads at this time,\n                    // so we get the first file\n                    var file = e.target.files[0];\n                    u.upload_file(file, force);\n                    return true;\n                };\n            }\n\n            // trigger the init event callback\n            setTimeout(function() {\n                u.settings.on_init.apply(u);\n            }, 100);\n        }\n\n        Uploader.prototype.upload_file = function(file, force) {\n            var u = this;\n            // the `onchange` event may be triggered multiple times, so we\n            // must ensure that the callback is only executed the first time\n            // also make sure the file is not already set.\n            if(u.get_state() != \"waiting\") {\n                return false;\n            }\n\n            if (file) {\n                u.file = file;\n            }\n\n            if (!u.file) {\n                return false;\n            }\n\n            // we use the lastModifiedDate, the file name and size to uniquely\n            // identify a file. There may be false positives and negatives,\n            // but the chance for a false positive is basically zero\n            // some browsers don't report the last modified date, so we default\n            // to a blank date\n            u.file.lastModifiedDate = u.file.lastModifiedDate || new Date(0);\n\n            if(u.file.size > u.settings.max_size) {\n                alert(\n                    [\"The maximum allowed file size is \",\n                    (u.settings.max_size / GB),\n                    \"GB. Please select another file.\"].join('')\n                );\n                return false;\n            }\n\n            // check for accepted extensions, if applicable\n            if(u.settings.accepted_extensions) {\n                // get the file extension\n                var file_extension = file.name.replace(/[^A-Za-z 0-9 \\.,\\?\"\"!@#\\$%\\^&\\*\\(\\)-_=\\+;:<>\\/\\\\\\|\\}\\{\\[\\]`~]*/g, '').split('.').pop();\n\n                // split the given extensions into an array\n                var extensions_array = u.settings.accepted_extensions.split(',');\n\n                // and match the extension against the given extension list\n                var file_accepted = false;\n                for(var i=0; i<extensions_array.length; i++) {\n                    if(file_extension == extensions_array[i]) {\n                        file_accepted = true;\n                        break;\n                    }\n                }\n\n                // if the file is not accepted, notify the user and return\n                if(!file_accepted) {\n                    alert(\n                        [\"This file format is not accepted. \",\n                        \"Please use a file with an extension like \",\n                        u.settings.accepted_extensions].join('')\n                    );\n                    return false;\n                }\n            }\n\n            // initialize the file upload\n            u.settings.on_select.call(u, file);\n            var args = {\n                filename: file.name.replace(/[^A-Za-z 0-9 \\.,\\?\"\"!@#\\$%\\^&\\*\\(\\)-_=\\+;:<>\\/\\\\\\|\\}\\{\\[\\]`~]*/g, ''),\n                filesize: file.size,\n                key: u.settings.key,\n                mime_type: u.settings.content_type,\n                collectionId: u.settings.collectionId,\n                last_modified: file.lastModifiedDate.valueOf()\n            };\n            if(force) {\n                args.force = true;\n            }\n\n            // get the signing key. It will also return\n            // a file key + upload_id pair if the selected file\n            // is already uploading. It also returns a\n            // backup_key in case that file upload already completed.\n            // The signing key is valid for 7 days\n            XHR({\n                url: u.settings.ajax_base + \"/signing_key/\",\n                extra_params: args,\n                load_callback: function(e) {\n                    var json = JSON.parse(e.target.responseText);\n                    json.date = new Date(json.date  + '.000Z');\n                    u.auth = json;\n                    u.upload_id = json.upload_id;\n                    u.chunks = json.chunks;\n                    u.settings.key = json.key || u.settings.key;\n                    u.settings.backup_key = u.settings.key;\n\n                    if(!u.upload_id) {\n                        console.log(json);\n                        AmazonXHR.init(json, u.settings.key, file, function(e) {\n                            var xml = e.target.responseXML;\n                            // get the given upload id\n                            u.upload_id = xml.getElementsByTagName('UploadId')[0].textContent;\n\n                            u.load_file();\n                        });\n                    } else {\n                        // resume a previus upload\n                        if(!force) {\n                            // get the uploaded parts from S3\n                            AmazonXHR.list(u.auth, u.file, u.settings.key, u.upload_id, u.settings.chunk_size, function(parts) {\n                                for(var i=0; i<parts.length; i++) {\n                                    var chunk = parts[i][0] - 1;\n                                    u.set_progress(chunk, u.get_chunk_size(chunk));\n                                    u.set_chunk_finished(chunk);\n                                    u.set_chunk_uploading(chunk, false);\n                                }\n                                u.load_file();\n                            }, function() {\n                                // if it fails, re-initiate the upload, and force\n                                // it to start a new upload\n                                u.upload_id = null;\n                                this._loaded_chunks = null;\n                                u._progress = null;\n                                u._total_progress = null;\n                                u._loaded_chunks = null;\n                                u._uploading_chunks = null;\n                                u._chunks = null;\n                                u.settings.key = u.settings.backup_key;\n                                u.upload_file(file, true); // force reload\n                            });\n                        } else {\n                            // force-start the upload\n                            u.load_file();\n                        }\n                    }\n                }\n            });\n        };\n\n        // this initiates the file upload\n        Uploader.prototype.load_file = function() {\n            var u = this;\n\n            // we can't start the upload if we are waiting for user input\n            if(u.get_state() != \"waiting\") {\n                return;\n            }\n\n            // make sure we only trigger the start event once\n            if(!u._start_fired) {\n                // trigger the start event callback\n                u.settings.on_start.call(u, u.file);\n\n                // and also trigger a progress callback with 0%\n                u.settings.on_progress.call(u, 0, u.file.size);\n                u._start_fired = true;\n            }\n\n            // from now on, we are \"processing\" the file upload\n            u.set_state(\"processing\");\n\n            // at this point we may have some chunks already uploaded,\n            // so we may trigger a progress callback with the reported progress\n            u.settings.on_progress.call(u, u.get_total_progress(), u.file.size);\n\n            // get the next chunk\n            var next_chunk = u.get_next_chunk();\n\n            if(next_chunk != -1) {\n                // and start uploading it\n                u.upload_chunk(next_chunk);\n            } else if(u.upload_finished()) {\n                // if we finished, trigger the upload finish sequence\n                log(\"All done; finish upload\");\n                u.finish_upload();\n            }\n\n            for(var i=0; i < u.settings.num_workers - 1; i++) {\n                next_chunk = u.get_next_chunk();\n                if(next_chunk !== -1) {\n                    u.upload_chunk(next_chunk);\n                } else {\n                    break;\n                }\n            }\n        };\n\n        // this uploads a single chunk to S3\n        Uploader.prototype.upload_chunk = function(chunk) {\n            var u = this;\n            // make sure we're in processing mode\n            if(u.get_state() != \"processing\") {\n                log(\"NOT processing; return\");\n                return;\n            }\n\n            // also make sure we're not already uploading this chunk\n            if(u.get_chunk_uploading(chunk)) {\n                log(\"Already Uploading\");\n                setTimeout(function() {\n                    var next_chunk = u.get_next_chunk();\n                    if(next_chunk !== -1) {\n                        u.upload_chunk(u.get_next_chunk());\n                    }\n                }, 1000);\n                return;\n            } else {\n                // mark this chunk as uploading\n                u.set_chunk_uploading(chunk);\n            }\n            log(\"Uploading Chunk: \" + chunk);\n\n            // if we already uploaded this chunk, get to the next one\n            // if there is no next chunk, finish the upload\n            if(u.is_chunk_loaded(chunk)) {\n                var next_chunk = u.get_next_chunk();\n                if(next_chunk != -1) {\n                    u.upload_chunk(next_chunk);\n                } else {\n                    if(u.upload_finished()) {\n                        log(\"No next chunk; finish upload\");\n                        u.finish_upload();\n                    }\n                }\n            }\n\n            var length = u.settings.chunk_size;\n\n            // get the start and end bytes for the needed chunk\n            var start = chunk * length;\n            var end = Math.min(start + length, u.file.size);\n\n            // we need the last progress time in order to detect hanging\n            // uploads\n            var last_progress_time = new Date();\n            u._intervals = u._intervals || {};\n\n\n            // the \"readystatechange\" handler\n            var handler = function(e) {\n                // we care about the \"done\" event triggered while processing\n                if(e.target.readyState != this.DONE || u.get_state() != \"processing\") {\n                    log(e);\n                    return;\n                }\n\n                // if we don't receive a 2XX response, trigger an error\n                if(e.target.status / 100 != 2) {\n                    return error_handler();\n                }\n\n                // at this point, we know that this chunk finished uploading\n                log(\"Chunk uploaded: \" + chunk);\n\n                // notify the server of the uploaded chunk\n                u.notify_chunk_uploaded(chunk);\n\n                // and also trigger the chunk_uploaded callback\n                u.settings.on_chunk_uploaded.call(u, chunk);\n\n                // cancel the xhr watcher interval\n                clearInterval(u._intervals[chunk]);\n\n                // mark the chunk as finished\n                u.set_progress(chunk, u.get_chunk_size(chunk));\n                u.set_chunk_finished(chunk);\n                u.set_chunk_uploading(chunk, false);\n\n                // get next chunk; if we're out of chunks,\n                // finish the upload\n                var next_chunk = u.get_next_chunk();\n                if(next_chunk != -1) {\n                    u.upload_chunk(next_chunk);\n                } else if(u.upload_finished()) {\n                    log(\"Done\");\n                    u.finish_upload();\n                } else {\n                    var interval = setInterval(function() {\n                        var chunk = u.get_next_chunk();\n                        if(chunk != -1) {\n                            clearInterval(interval);\n                            u.upload_chunk(chunk);\n                        } else if(u.upload_finished()) {\n                            clearInterval(interval);\n                            u.finish_upload();\n                        }\n                    }, 1000);\n                }\n            };\n\n            // the upload progress handler\n            var progress_handler = function(e) {\n                // set the internal chunk's progress value to the reported amount\n                u.set_progress(chunk, e.loaded);\n\n                // trigger the progress event callback\n                u.settings.on_progress.call(u, u.get_total_progress(), u.file.size);\n\n                // update the last_progress_time for the watcher interval\n                last_progress_time = new Date();\n            };\n            var error_handled = false;\n            var error_handler = function() {\n                var error_arguments = arguments;\n                var xhr = this;\n                // the upload may have finished, so check for that\n                u.check_already_uploaded(function() {\n                    // if already uploaded\n                    u.set_state(\"finished\");\n\n                    u.notify_upload_finished();\n\n                    // trigger a final progress event callback, with 100%\n                    u.settings.on_progress.call(u, u.file.size, u.file.size);\n\n                    // also trigger the complete event callback\n                    u.settings.on_complete.call(u);\n                }, function() {\n                    // we have a genuine error\n                    log(\"Error: \");\n                    log(error_arguments);\n\n                    // make sure we don't handle the same error more than once\n                    if(error_handled) {\n                        return;\n                    }\n                    error_handled = true;\n\n                    // abort the chunk upload\n                    u.set_chunk_uploading(chunk, false);\n                    u.set_chunk_finished(chunk, false);\n                    u.set_progress(chunk, 0);\n                    log(\"Abort\");\n                    try {\n                        xhr.abort();\n                    } catch(e) {\n                        log(e);\n                    }\n\n                    log(\"Retry chunk: \" + chunk);\n\n                    // clear the watcher interval\n                    clearInterval(u._intervals[chunk]);\n\n                    // re-try the upload\n                    setTimeout(function() {\n                        if(u.get_state() == \"processing\") {\n                            // and proceed\n                            var next_chunk = u.get_next_chunk(chunk);\n                            if(next_chunk !== -1) {\n                                u.upload_chunk(next_chunk);\n                            }\n                        }\n                    }, 1000);\n                });\n            };\n\n            AmazonXHR.upload_chunk(u.auth, u.settings.key, u.upload_id, chunk, u.file.slice(start, end), {\n                progress_callback: progress_handler,\n                state_change_callback: handler,\n                error_callback: error_handler,\n                timeout_callback: error_handler\n            }, function(xhr) {\n                u._chunk_xhr = u._chunk_xhr || [];\n                u._chunk_xhr.push(xhr);\n\n                // the watcher interval; it cancels the xhr if it times out\n                u._intervals[chunk] = setInterval(function() {\n                    if(last_progress_time && (new Date() - last_progress_time) > 15000) { // 15s\n                        log(\"Chunk Failed; retry\");\n                        clearInterval(u._intervals[chunk]);\n                        if(u.get_state() == \"processing\") {\n                            xhr.abort();\n                            error_handler.call(xhr);\n                            u._chunk_xhr[u._chunk_xhr.indexOf(xhr)] = null;\n                        }\n                    }\n                }, 4000); // every 4s\n            });\n        };\n\n        // initiates the upload finish sequence\n        Uploader.prototype.finish_upload = function() {\n            var u = this;\n\n            // make sure it's not triggered when not processing (e.g. multiple times)\n            if(u.get_state() != \"processing\") {\n                return;\n            }\n\n            // change the upload's state\n            u.set_state(\"finishing\");\n\n            u.settings.on_progress.call(u, u.file.size, u.file.size); // 100% done.\n\n\n            var handler = function(e) {\n                // i.e. if it's a 2XX response\n                if(e.target.status / 100 == 2) {\n                    log(\"Finished file.\");\n                    u.set_state(\"finished\");\n                    u.settings.on_progress.call(u, u.file.size, u.file.size); // it's 100% done\n\n                    // trigger the complete event callback\n                    u.settings.on_complete.call(u);\n                } else if(e.target.status == 400 &&\n                    e.target.responseText.indexOf(\"EntityTooSmall\") !== -1) {\n                    // an \"EntityTooSmall\" error means that we missed a chunk\n                    AmazonXHR.list(u.auth, u.file, u.settings.key, u.upload_id, u.settings.chunk_size, function(parts) {\n                        u.update_chunks(parts);\n                        var next_chunk = u.get_next_chunk();\n                        u.set_state(\"processing\");\n                        u.upload_chunk(next_chunk);\n                    });\n                } else if(e.target.status == 404) {\n                    // 404 = NoSuchUpload = check if already finished\n                    // if so, start a new upload\n                    u.cancel(function() {\n                        u.upload_file(u.file, true);\n                    });\n                } else {\n                    u.check_already_uploaded(function() {\n                        handler({\n                            target: {\n                                status: 200\n                            }\n                        });\n                    }, function() {\n                        handler({\n                            target: {\n                                status: 404\n                            }\n                        });\n                    });\n                }\n            };\n\n            AmazonXHR.list(u.auth, u.file, u.settings.key, u.upload_id, u.settings.chunk_size, function(parts) {\n                var num_chunks = Math.ceil(u.file.size / u.settings.chunk_size);\n\n                // check that we uploaded all the chunks; if we didn't,\n                // start uploading the missing ones\n                if(parts.length != num_chunks) {\n                    u.update_chunks(parts);\n                    var next_chunk = u.get_next_chunk();\n                    u.set_state(\"processing\");\n                    u.upload_chunk(next_chunk);\n                    return;\n                }\n\n                AmazonXHR.finish(u.auth, u.file, u.settings.key, u.upload_id, parts, u.settings.chunk_size, handler, handler);\n            });\n        };\n\n\n        // notify the server that a chunk finished uploading. This is needed for\n        // upload resumes\n        Uploader.prototype.notify_chunk_uploaded = function(chunk) {\n            var u = this;\n            if(u.get_state() != \"processing\") {\n                return;\n            }\n            var key = u.settings.key;\n            var upload_id = u.upload_id;\n            var url = u.settings.ajax_base + '/chunk_loaded/';\n            XHR({\n                url: url,\n                extra_params: {\n                    chunk: chunk,\n                    key: key,\n                    upload_id: upload_id,\n                    filename: u.file.name.replace(/[^A-Za-z 0-9 \\.,\\?\"\"!@#\\$%\\^&\\*\\(\\)-_=\\+;:<>\\/\\\\\\|\\}\\{\\[\\]`~]*/g, ''),\n                    filesize: u.file.size,\n                    mime_type: u.settings.content_type,\n                    collectionId: u.settings.collectionId,\n                    last_modified: u.file.lastModifiedDate.valueOf()\n                }\n            });\n        };\n\n        // check whether the file is already uploaded\n        Uploader.prototype.check_already_uploaded = function(callback, error_callback) {\n            var u = this;\n            var method = \"HEAD\";\n            var path = \"/\" + u.settings.key;\n            var inner_handler = function(e) {\n                // the handler only checks for status code;\n                // if the HEAD returns 404, re-upload,\n                // else, it returns 200 and finish the upload\n                if(e.target.status / 100 == 2) {\n                    log(\"Already Uploaded\");\n                    callback();\n                } else {\n                    log(\"Error!\");\n                    error_callback();\n                }\n            };\n\n            if(!error_callback && typeof(error_callback) !== \"function\") {\n                error_callback = function() {\n                    setTimeout(function() {\n                        return u.check_already_uploaded(callback, error_callback);\n                    }, 2500);\n                };\n            }\n\n            XHR({\n                url: u.settings.host + path,\n                method: method,\n                load_callback: inner_handler,\n                error_callback: error_callback\n            });\n        };\n\n        // cancels an upload\n        Uploader.prototype.cancel = function(callback) {\n            // empty all fields, cancel all intervals, abort all xhr's\n            var u = this;\n            for(var i=0; i < u._chunk_xhr.length; i++) {\n                log(\"Abort chunk: \" + u._chunk_xhr[i]);\n                u._chunk_xhr[i].abort();\n            }\n            u._intervals = u._intervals || {};\n            for(var x in u._intervals) {\n                if(u._intervals.hasOwnProperty(x)) {\n                    clearInterval(u._intervals[x]);\n                }\n            }\n            callback = callback || function() {};\n            u.set_state(\"canceled\");\n            u._chunk_xhr = u._chunk_xhr || [];\n            u.settings.on_progress.call(u, 0, 0);\n            u._chunk_xhr = null;\n            u._chunks = null;\n            u._uploading_chunks = null;\n            u._loaded_chunks = null;\n            u._start_fired = false;\n            u.upload_id = null;\n            u._progress = null;\n            u.set_state(\"waiting\"); // wait for a new upload\n            callback();\n        };\n\n        // updates the chunk history with the given chunks\n        Uploader.prototype.update_chunks = function(parts) {\n            var u = this;\n            var loaded = [];\n            var num_chunks = Math.ceil(u.file.size / u.settings.chunk_size);\n\n            u._init_chunks(true);\n            u._uploading_chunks = [];\n            u._loaded_chunks = [];\n\n            var i;\n            for(i=0; i < parts.length; i++) {\n                var part_number = parseInt(parts[i][0], 10);\n                u.add_loaded_chunk(part_number - 1);\n                u.set_chunk_finished(part_number - 1);\n                loaded.push(part_number - 1);\n            }\n            for(i=0; i < num_chunks; i++) {\n                if(loaded.indexOf(i) === -1) {\n                    log(\"Chunk not uploaded: \", i);\n                    u.set_progress(i, 0);\n                }\n            }\n        };\n\n        // returns true if a file is selected\n        Uploader.prototype.is_selected = function() {\n            return !!this.file;\n        };\n\n        // returns the uploader's state\n        Uploader.prototype.get_state = function() {\n            return this._state;\n        };\n\n        // sets the uploader's state\n        Uploader.prototype.set_state = function(state) {\n            this._state = state;\n            return state;\n        };\n\n        // set a chunk's progress\n        Uploader.prototype.set_progress = function(chunk, loaded) {\n            this.log_status();\n            this._progress = this._progress || {};\n            this._total_progress = (this._total_progress || 0 ) + loaded - (this._progress[chunk] || 0);\n            this._progress[chunk] = loaded;\n            this.settings.on_chunk_progress.call(\n                this, chunk, loaded, this.get_chunk_size(chunk));\n        };\n\n        // gets the total bytes uploaded\n        Uploader.prototype.get_total_progress = function() {\n            return this._total_progress || 0;\n        };\n\n        // returns true if a chunk is already uploaded\n        Uploader.prototype.is_chunk_loaded = function(chunk) {\n            this._loaded_chunks = this._loaded_chunks || [];\n            return this._loaded_chunks.indexOf(chunk) !== -1;\n        };\n\n        // adds a chunk to the uploaded list\n        Uploader.prototype.add_loaded_chunk = function(chunk) {\n            this._loaded_chunks = this._loaded_chunks || [];\n            this._loaded_chunks.push(chunk);\n            this.set_progress(chunk, this.get_chunk_size(chunk));\n        };\n\n        // returns true if the chunk is currently uploading\n        Uploader.prototype.get_chunk_uploading = function(chunk) {\n            this._uploading_chunks = this._uploading_chunks || [];\n            return this._uploading_chunks.indexOf(chunk) !== -1;\n        };\n\n        // sets whether a chunk is currently uploading or not\n        Uploader.prototype.set_chunk_uploading = function(chunk, val) {\n            if(typeof val == \"undefined\") {\n                val = true;\n            }\n            this._uploading_chunks = this._uploading_chunks || [];\n            if(val) {\n                this._uploading_chunks.push(chunk);\n            } else {\n                var list = [];\n                for(var i=0; i < this._uploading_chunks.length; i++) {\n                    if(this._uploading_chunks[i] != chunk) {\n                        list.push(this._uploading_chunks[i]);\n                    }\n                }\n                this._uploading_chunks = list;\n            }\n        };\n\n        // initialize inner representation of chunks\n        Uploader.prototype._init_chunks = function(force) {\n            var u = this;\n            if(!u._chunks || force) {\n                u._chunks = [];\n                var num_chunks = Math.ceil(u.file.size / u.settings.chunk_size);\n                for(var i=0; i < num_chunks; i++) {\n                    u._chunks.push(false);\n                }\n            }\n        };\n\n        // sets whether a chunk finished uploading\n        Uploader.prototype.set_chunk_finished = function(chunk, val) {\n            if(typeof val == \"undefined\") {\n                val = true;\n            }\n            var u = this;\n            u._init_chunks();\n            u._chunks[chunk] = val;\n        };\n\n        // get next chunk to be uploaded; if all chunks are done, return -1\n        Uploader.prototype.get_next_chunk = function(chunk) {\n            var u = this;\n            u._init_chunks();\n            if(chunk && !u._chunks[chunk] && !u.get_chunk_uploading(chunk)) {\n                return chunk;\n            }\n            for(var i=0; i < u._chunks.length; i++) {\n                if(!u._chunks[i] && !u.get_chunk_uploading(i)) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n\n        // returns true if all chunks finished uploaded\n        Uploader.prototype.upload_finished = function() {\n            var u = this;\n            u._init_chunks();\n            for(var i=0; i < u._chunks.length; i++) {\n                if(!u._chunks[i] || u.get_chunk_uploading(i)) {\n                    return false;\n                }\n            }\n            return true;\n        };\n\n        Uploader.prototype.is_last_chunk = function(chunk) {\n            return Math.ceil(this.file.size / this.settings.chunk_size) - 1 == chunk;\n        };\n\n        Uploader.prototype.get_chunk_size = function(chunk) {\n            if(this.is_last_chunk(chunk)) {\n                return this.file.size % this.settings.chunk_size;\n            } else {\n                return this.settings.chunk_size;\n            }\n        };\n\n        Uploader.prototype.log_status = function() {\n            // log(this.get_total_progress() / this.file.size * 100);\n        };\n\n        Uploader.prototype.on_chunk_progress = function(f) { this.settings.on_chunk_progress = f; };\n        Uploader.prototype.on_progress = function(f) { this.settings.on_progress = f; };\n        Uploader.prototype.on_select = function(f) { this.settings.on_select = f; };\n        Uploader.prototype.on_error = function(f) { this.settings.on_error = f; };\n        Uploader.prototype.on_complete = function(f) { this.settings.on_complete = f; };\n        Uploader.prototype.on_init = function(f) { this.settings.on_init = f; };\n        Uploader.prototype.on_start = function(f) { this.settings.on_start = f; };\n        Uploader.prototype.on_chunk_uploaded = function(f) { this.settings.on_chunk_uploaded = f; };\n\n        return new Uploader(settings);\n    };\n\n\n    var AmazonXHR = function(settings) {\n        this.settings = settings;\n    };\n    AmazonXHR.finish = function(auth, file, key, upload_id, parts, chunk_size, callback) {\n        var querystring = {\"uploadId\": upload_id};\n\n        // compose the CompleteMultipartUpload request for putting\n        // the chunks together\n        var data = \"<CompleteMultipartUpload>\";\n        for(var i=0; i<parts.length; i++) {\n            data += \"<Part>\";\n            data += \"<PartNumber>\" + parts[i][0] + \"</PartNumber>\";\n            data += \"<ETag>\" + parts[i][1] + \"</ETag>\";\n            data += \"</Part>\";\n        }\n        data += \"</CompleteMultipartUpload>\";\n\n        // firefox requires a small hack\n        if(navigator.userAgent.indexOf(\"Firefox\") !== -1) {\n            data = new Blob([data]);\n        }\n\n        return new AmazonXHR({\n            auth: auth,\n            key: key,\n            method: \"POST\",\n            querystring: querystring,\n            headers: {},\n            payload: data,\n            load_callback: callback\n        }).send();\n    };\n    AmazonXHR.list = function(auth, file, key, upload_id, chunk_size, callback, error_callback, marker) {\n        var querystring = {\"uploadId\": upload_id};\n        if(marker) {\n            querystring['part-number-marker'] = marker;\n        }\n        return new AmazonXHR({\n            auth: auth,\n            key: key,\n            method: \"GET\",\n            querystring: querystring,\n            headers: {},\n            payload: \"\",\n            error_callback: error_callback,\n            load_callback: function(e) {\n                if(e.target.status === 404) {\n                    // i.e. the file was already uploaded; start fresh\n                    if(error_callback) {\n                        error_callback();\n                    }\n                    return;\n                }\n\n                // process the parts, and return an array of\n                // [part_number, etag, size] through the given callback\n                window.debug = e;\n                var xml = e.target.responseXML;\n                var parts = [];\n                var xml_parts = xml.getElementsByTagName(\"Part\");\n                var num_chunks = Math.ceil(file.size / chunk_size);\n                for(var i=0; i < xml_parts.length; i++) {\n                    var part_number = parseInt(xml_parts[i].getElementsByTagName(\"PartNumber\")[0].textContent, 10);\n                    var etag = xml_parts[i].getElementsByTagName(\"ETag\")[0].textContent;\n                    var size = parseInt(xml_parts[i].getElementsByTagName(\"Size\")[0].textContent, 10);\n\n                    if(part_number != num_chunks && size != chunk_size) {\n                        continue; // chunk corrupted\n                    } else if(part_number == num_chunks &&\n                            size != file.size % chunk_size) {\n                        continue; // final chunk corrupted\n                    }\n\n                    parts.push([\n                        part_number,\n                        etag,\n                        size\n                    ]);\n                }\n                var is_truncated = xml.getElementsByTagName(\"IsTruncated\")[0].textContent;\n                if(is_truncated === \"true\") {\n                    var part_marker = xml.getElementsByTagName(\"NextPartNumberMarker\")[0].textContent;\n                    AmazonXHR.list(auth, file, key, upload_id, chunk_size, function(new_parts) {\n                        callback(parts.concat(new_parts));\n                    }, error_callback, part_marker);\n                } else {\n                    callback(parts);\n                }\n            }\n        }).send();\n    };\n\n    AmazonXHR.upload_chunk = function(auth, key, upload_id, chunk_num, chunk, callbacks, xhr_callback) {\n        var callback, error_callback, progress_callback, readystate_callback;\n        if(callbacks instanceof Object) {\n            callback = callbacks.load_callback;\n            error_callback = callbacks.error_callback;\n            progress_callback = callbacks.progress_callback;\n            readystate_callback = callbacks.state_change_callback;\n        } else {\n            callback = callbacks;\n        }\n        var querystring = {\n            partNumber: chunk_num + 1,\n            uploadId: upload_id\n        };\n        return (new AmazonXHR({\n            auth: auth,\n            key: key,\n            method: \"PUT\",\n            querystring: querystring,\n            headers: {},\n            payload: chunk,\n            load_callback: callback,\n            error_callback: error_callback,\n            progress_callback: progress_callback,\n            state_change_callback: readystate_callback\n        })).send(xhr_callback);\n    };\n    AmazonXHR.init = function(auth, key, file, callback) {\n        return new AmazonXHR({\n            auth: auth,\n            key: key,\n            method: \"POST\",\n            querystring: {\n                \"uploads\": \"\"\n            },\n            headers: {\n                \"x-amz-acl\": \"public-read\",\n                \"Content-Disposition\": \"attachment; filename=\" + file.name.replace(/[^A-Za-z 0-9 \\.,\\?\"\"!@#\\$%\\^&\\*\\(\\)-_=\\+;:<>\\/\\\\\\|\\}\\{\\[\\]`~]*/g, ''),\n                \"Content-Type\": auth.content_type || \"application/octet-stream\"\n            },\n            payload: \"\",\n            load_callback: callback\n        }).send();\n    };\n    AmazonXHR.prototype = {\n        send: function(callback) {\n            var self = this;\n            self.request_date = new Date();\n\n            self.headers = self.settings.headers;\n            self.headers['host'] = self.settings.auth.bucket + \".s3.amazonaws.com\";\n\n            var date_string = [\n                self.settings.auth.date.getUTCFullYear(),\n                utils.zfill(self.settings.auth.date.getUTCMonth() + 1, 2),\n                utils.zfill(self.settings.auth.date.getUTCDate(), 2)\n            ].join('');\n\n            self.settings.querystring['X-Amz-Date'] = utils.uriencode(utils.iso8601(self.request_date));\n            self.settings.querystring[\"X-Amz-Algorithm\"] = \"AWS4-HMAC-SHA256\";\n            self.settings.querystring[\"X-Amz-Expires\"] =  86400;\n            self.settings.querystring[\"X-Amz-Credential\"] = utils.uriencode([\n                self.settings.auth.access_key,\n                \"/\" + date_string + \"/\",\n                self.settings.auth.region + \"/s3/aws4_request\"\n            ].join(''));\n            self.settings.querystring[\"X-Amz-SignedHeaders\"] = \"\";\n\n            var header_keys = []\n            for(var key in self.headers) {\n                header_keys.push(key);\n            }\n            header_keys.sort();\n            self.settings.querystring[\"X-Amz-SignedHeaders\"] = utils.uriencode(header_keys.join(';'));\n\n            self.settings.querystring[\"X-Amz-Signature\"] = self.get_authorization_header();\n\n            delete self.headers['host'];  // keep this header only for hashing\n\n            var url = location.protocol + \"//\" + self.settings.auth.bucket + \".s3.amazonaws.com/\" + self.settings.key;\n            var first = true;\n            for(var key in self.settings.querystring) {\n                if(self.settings.querystring.hasOwnProperty(key)) {\n                    if(first) {\n                        url += \"?\";\n                    }\n                    first = false;\n                    url += key + \"=\" + self.settings.querystring[key] + \"&\";\n                }\n            }\n            url = url.slice(0, -1);  // remove extra ampersand\n\n            var xhr = XHR({\n                url: url,\n                method: self.settings.method,\n                headers: self.headers,\n                body: self.settings.payload,\n\n                load_callback: self.settings.load_callback,\n                progress_callback: self.settings.progress_callback,\n                state_change_callback: self.settings.state_change_callback,\n                error_callback: self.settings.error_callback,\n                timeout_callback: self.settings.timeout_callback\n            });\n            if(callback) {\n                callback(xhr);\n            }\n        },\n        get_authorization_header: function() {\n            if(!this.settings.auth.date) {\n                throw \"Invalid date given.\";\n            }\n\n            var header = \"\";\n\n            var header_keys = utils.get_sorted_keys(this.headers);\n\n            // signed headers\n            var signed_headers = \"\";\n            for(var i=0; i<header_keys.length; i++) {\n                signed_headers += header_keys[i].toLowerCase() + \";\";\n            }\n            signed_headers = signed_headers.slice(0, -1);\n\n            var canonical_request = this.get_canonical_request();\n            var string_to_sign = this.get_string_to_sign(canonical_request, this.request_date);\n            var signature = this.sign_request(string_to_sign);\n\n            return signature;\n        },\n        get_canonical_request: function() {\n            var request = \"\";\n\n            // verb\n            request += this.settings.method.toUpperCase() + \"\\n\";\n\n            // path\n            request += \"/\" + utils.uriencode(this.settings.key).replace(/%2F/g, \"/\") + \"\\n\";\n\n            // querystring\n            var querystring_keys = utils.get_sorted_keys(this.settings.querystring);\n            var key, value, i;\n            for(i=0; i<querystring_keys.length; i++) {\n                key = querystring_keys[i];\n                value = this.settings.querystring[key];\n                request += utils.uriencode(key) + \"=\" + value + \"&amp;\";\n            }\n            request = request.slice(0, -\"&amp;\".length) + \"\\n\";  // remove extra ampersand\n\n            // headers\n            var header_keys = utils.get_sorted_keys(this.headers);\n            for(i=0; i<header_keys.length; i++) {\n                key = header_keys[i];\n                value = this.headers[key];\n                request += key.toLowerCase() + \":\" + value.trim() + \"\\n\";\n            }\n            request += \"\\n\";\n\n            // signed headers\n            for(i=0; i<header_keys.length; i++) {\n                request += header_keys[i].toLowerCase() + \";\";\n            }\n\n            request = request.slice(0, -1) + \"\\n\";\n            request += \"UNSIGNED-PAYLOAD\";\n\n            return request;\n        },\n        get_string_to_sign: function(canonical_request, time) {\n            var to_sign = \"\";\n            to_sign += \"AWS4-HMAC-SHA256\\n\";\n            to_sign += utils.iso8601(time) + \"\\n\";\n            to_sign += [\n                time.getUTCFullYear(),\n                utils.zfill(time.getUTCMonth() + 1, 2),\n                utils.zfill(time.getUTCDate(), 2),\n                \"/\" + this.settings.auth.region + \"/s3/aws4_request\\n\"\n            ].join('');\n\n            to_sign += CryptoJS.SHA256(canonical_request.replace(/&amp;/g, \"&\")).toString();\n\n            return to_sign;\n        },\n        sign_request: function(string_to_sign) {\n            if(!this.settings.auth.signature) {\n                throw \"No signature provided.\";\n            }\n\n            var res = CryptoJS.HmacSHA256(\n                string_to_sign,\n                CryptoJS.enc.Hex.parse(this.settings.auth.signature)\n            ).toString();\n            return res;\n        }\n    };\n\n    var utils = {\n        uriencode: function(string) {\n            var output = encodeURIComponent(string);\n            output = output.replace(/[^A-Za-z0-9_.~\\-%]+/g, escape);\n            output = output.replace(/;/g, \"%3B\");\n\n            // AWS percent-encodes some extra non-standard characters in a URI\n            output = output.replace(/[*]/g, function(ch) {\n              return '%' + ch.charCodeAt(0).toString(16).toUpperCase();\n            });\n\n            return output;\n        },\n        get_sorted_keys: function(obj) {\n            var keys = [];\n            for(var key in obj) {\n                if(obj.hasOwnProperty(key)) {\n                    keys.push(key);\n                }\n            }\n            return keys.sort();\n        },\n        iso8601: function(date) {\n            return [\n                date.getUTCFullYear(),\n                utils.zfill(date.getUTCMonth() + 1, 2),\n                utils.zfill(date.getUTCDate(), 2),\n                \"T\",\n                utils.zfill(date.getUTCHours(), 2),\n                utils.zfill(date.getUTCMinutes(), 2),\n                utils.zfill(date.getUTCSeconds(), 2),\n                \"Z\"\n            ].join(\"\")\n        },\n        zfill: function(str, num) {\n            return (\"00000000000\" + str).substr(-num);\n        }\n    };\n\n})(this);"],"sourceRoot":"/source/"}