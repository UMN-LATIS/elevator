{"version":3,"file":"mule2.min.js","sources":["mule2.js"],"sourcesContent":["/**\n * mule-uploader.js\n *\n * Copyright 2012-2014, Gabriel Purcaru\n * Released under GPL License.\n * License: http://www.gnu.org/copyleft/gpl.html\n */\n\n\n(function(namespace){\n    /*\n    CryptoJS v3.1.2\n    code.google.com/p/crypto-js\n    (c) 2009-2013 by Jeff Mott. All rights reserved.\n    code.google.com/p/crypto-js/wiki/License\n    */\n    var CryptoJS=CryptoJS||function(h,s){var f={},t=f.lib={},g=function(){},j=t.Base={extend:function(a){g.prototype=this;var c=new g;a&&c.mixIn(a);c.hasOwnProperty(\"init\")||(c.init=function(){c.$super.init.apply(this,arguments)});c.init.prototype=c;c.$super=this;return c},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&&(this[c]=a[c]);a.hasOwnProperty(\"toString\")&&(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},\n    q=t.WordArray=j.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=s?c:4*a.length},toString:function(a){return(a||u).stringify(this)},concat:function(a){var c=this.words,d=a.words,b=this.sigBytes;a=a.sigBytes;this.clamp();if(b%4)for(var e=0;e<a;e++)c[b+e>>>2]|=(d[e>>>2]>>>24-8*(e%4)&255)<<24-8*((b+e)%4);else if(65535<d.length)for(e=0;e<a;e+=4)c[b+e>>>2]=d[e>>>2];else c.push.apply(c,d);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<<\n    32-8*(c%4);a.length=h.ceil(c/4)},clone:function(){var a=j.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],d=0;d<a;d+=4)c.push(4294967296*h.random()|0);return new q.init(c,a)}}),v=f.enc={},u=v.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var d=[],b=0;b<a;b++){var e=c[b>>>2]>>>24-8*(b%4)&255;d.push((e>>>4).toString(16));d.push((e&15).toString(16))}return d.join(\"\")},parse:function(a){for(var c=a.length,d=[],b=0;b<c;b+=2)d[b>>>3]|=parseInt(a.substr(b,\n    2),16)<<24-4*(b%8);return new q.init(d,c/2)}},k=v.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var d=[],b=0;b<a;b++)d.push(String.fromCharCode(c[b>>>2]>>>24-8*(b%4)&255));return d.join(\"\")},parse:function(a){for(var c=a.length,d=[],b=0;b<c;b++)d[b>>>2]|=(a.charCodeAt(b)&255)<<24-8*(b%4);return new q.init(d,c)}},l=v.Utf8={stringify:function(a){try{return decodeURIComponent(escape(k.stringify(a)))}catch(c){throw Error(\"Malformed UTF-8 data\");}},parse:function(a){return k.parse(unescape(encodeURIComponent(a)))}},\n    x=t.BufferedBlockAlgorithm=j.extend({reset:function(){this._data=new q.init;this._nDataBytes=0},_append:function(a){\"string\"==typeof a&&(a=l.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var c=this._data,d=c.words,b=c.sigBytes,e=this.blockSize,f=b/(4*e),f=a?h.ceil(f):h.max((f|0)-this._minBufferSize,0);a=f*e;b=h.min(4*a,b);if(a){for(var m=0;m<a;m+=e)this._doProcessBlock(d,m);m=d.splice(0,a);c.sigBytes-=b}return new q.init(m,b)},clone:function(){var a=j.clone.call(this);\n    a._data=this._data.clone();return a},_minBufferSize:0});t.Hasher=x.extend({cfg:j.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){x.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(c,d){return(new a.init(d)).finalize(c)}},_createHmacHelper:function(a){return function(c,d){return(new w.HMAC.init(a,\n    d)).finalize(c)}}});var w=f.algo={};return f}(Math);\n    (function(h){for(var s=CryptoJS,f=s.lib,t=f.WordArray,g=f.Hasher,f=s.algo,j=[],q=[],v=function(a){return 4294967296*(a-(a|0))|0},u=2,k=0;64>k;){var l;a:{l=u;for(var x=h.sqrt(l),w=2;w<=x;w++)if(!(l%w)){l=!1;break a}l=!0}l&&(8>k&&(j[k]=v(h.pow(u,0.5))),q[k]=v(h.pow(u,1/3)),k++);u++}var a=[],f=f.SHA256=g.extend({_doReset:function(){this._hash=new t.init(j.slice(0))},_doProcessBlock:function(c,d){for(var b=this._hash.words,e=b[0],f=b[1],m=b[2],h=b[3],p=b[4],j=b[5],k=b[6],l=b[7],n=0;64>n;n++){if(16>n)a[n]=\n    c[d+n]|0;else{var r=a[n-15],g=a[n-2];a[n]=((r<<25|r>>>7)^(r<<14|r>>>18)^r>>>3)+a[n-7]+((g<<15|g>>>17)^(g<<13|g>>>19)^g>>>10)+a[n-16]}r=l+((p<<26|p>>>6)^(p<<21|p>>>11)^(p<<7|p>>>25))+(p&j^~p&k)+q[n]+a[n];g=((e<<30|e>>>2)^(e<<19|e>>>13)^(e<<10|e>>>22))+(e&f^e&m^f&m);l=k;k=j;j=p;p=h+r|0;h=m;m=f;f=e;e=r+g|0}b[0]=b[0]+e|0;b[1]=b[1]+f|0;b[2]=b[2]+m|0;b[3]=b[3]+h|0;b[4]=b[4]+p|0;b[5]=b[5]+j|0;b[6]=b[6]+k|0;b[7]=b[7]+l|0},_doFinalize:function(){var a=this._data,d=a.words,b=8*this._nDataBytes,e=8*a.sigBytes;\n        d[e>>>5]|=128<<24-e%32;d[(e+64>>>9<<4)+14]=h.floor(b/4294967296);d[(e+64>>>9<<4)+15]=b;a.sigBytes=4*d.length;this._process();return this._hash},clone:function(){var a=g.clone.call(this);a._hash=this._hash.clone();return a}});s.SHA256=g._createHelper(f);s.HmacSHA256=g._createHmacHelper(f)})(Math);\n    (function(h){for(var s=CryptoJS,f=s.lib,g=f.WordArray,q=f.Hasher,f=s.algo,m=[],r=[],l=function(a){return 4294967296*(a-(a|0))|0},k=2,n=0;64>n;){var j;a:{j=k;for(var u=h.sqrt(j),t=2;t<=u;t++)if(!(j%t)){j=!1;break a}j=!0}j&&(8>n&&(m[n]=l(h.pow(k,0.5))),r[n]=l(h.pow(k,1/3)),n++);k++}var a=[],f=f.SHA256=q.extend({_doReset:function(){this._hash=new g.init(m.slice(0))},_doProcessBlock:function(c,d){for(var b=this._hash.words,e=b[0],f=b[1],g=b[2],j=b[3],h=b[4],m=b[5],n=b[6],q=b[7],p=0;64>p;p++){if(16>p)a[p]=\n    c[d+p]|0;else{var k=a[p-15],l=a[p-2];a[p]=((k<<25|k>>>7)^(k<<14|k>>>18)^k>>>3)+a[p-7]+((l<<15|l>>>17)^(l<<13|l>>>19)^l>>>10)+a[p-16]}k=q+((h<<26|h>>>6)^(h<<21|h>>>11)^(h<<7|h>>>25))+(h&m^~h&n)+r[p]+a[p];l=((e<<30|e>>>2)^(e<<19|e>>>13)^(e<<10|e>>>22))+(e&f^e&g^f&g);q=n;n=m;m=h;h=j+k|0;j=g;g=f;f=e;e=k+l|0}b[0]=b[0]+e|0;b[1]=b[1]+f|0;b[2]=b[2]+g|0;b[3]=b[3]+j|0;b[4]=b[4]+h|0;b[5]=b[5]+m|0;b[6]=b[6]+n|0;b[7]=b[7]+q|0},_doFinalize:function(){var a=this._data,d=a.words,b=8*this._nDataBytes,e=8*a.sigBytes;\n    d[e>>>5]|=128<<24-e%32;d[(e+64>>>9<<4)+14]=h.floor(b/4294967296);d[(e+64>>>9<<4)+15]=b;a.sigBytes=4*d.length;this._process();return this._hash},clone:function(){var a=q.clone.call(this);a._hash=this._hash.clone();return a}});s.SHA256=q._createHelper(f);s.HmacSHA256=q._createHmacHelper(f)})(Math);\n    (function(){var h=CryptoJS,s=h.enc.Utf8;h.algo.HMAC=h.lib.Base.extend({init:function(f,g){f=this._hasher=new f.init;\"string\"==typeof g&&(g=s.parse(g));var h=f.blockSize,m=4*h;g.sigBytes>m&&(g=f.finalize(g));g.clamp();for(var r=this._oKey=g.clone(),l=this._iKey=g.clone(),k=r.words,n=l.words,j=0;j<h;j++)k[j]^=1549556828,n[j]^=909522486;r.sigBytes=l.sigBytes=m;this.reset()},reset:function(){var f=this._hasher;f.reset();f.update(this._iKey)},update:function(f){this._hasher.update(f);return this},finalize:function(f){var g=\n    this._hasher;f=g.finalize(f);g.reset();return g.finalize(this._oKey.clone().concat(f))}})})();\n    (function(){if(undefined!==typeof ArrayBuffer){var b=CryptoJS.lib.WordArray,e=b.init;(b.init=function(a){a instanceof ArrayBuffer&&(a=new Uint8Array(a));if(a instanceof Int8Array||a instanceof Uint8ClampedArray||a instanceof Int16Array||a instanceof Uint16Array||a instanceof Int32Array||a instanceof Uint32Array||a instanceof Float32Array||a instanceof Float64Array)a=new Uint8Array(a.buffer,a.byteOffset,a.byteLength);if(a instanceof Uint8Array){for(var b=a.byteLength,d=[],c=0;c<b;c++)d[c>>>2]|=a[c]<<\n    24-8*(c%4);e.call(this,d,b)}else e.apply(this,arguments)}).prototype=b}})();\n\n    // AJAX helper. It takes an object that contains load_callback, error_callback,\n    // url, method, headers, state_change_callback, progress_callback\n    var XHR = function(args) {\n        // the user may or may not pass any headers\n        args.headers = args.headers || {};\n\n        // if no method is given, default to GET\n        args.method = args.method || \"GET\";\n\n        var xhr = new XMLHttpRequest();\n\n        // set the \"load\" callback if given\n        if(args.load_callback && typeof args.load_callback == 'function') {\n            xhr.addEventListener(\"load\", args.load_callback, true);\n        }\n\n        // set the \"error\" callback if given\n        if(args.error_callback && typeof args.error_callback == 'function') {\n            xhr.addEventListener(\"error\", args.error_callback, true);\n        }\n\n        // set the \"readystatechange\" callback if given\n        if(args.state_change_callback && typeof args.state_change_callback == 'function') {\n            xhr.addEventListener(\"readystatechange\", args.state_change_callback);\n        }\n\n        // set the \"progress\" callback if given\n        if(args.progress_callback && typeof args.progress_callback == 'function') {\n            xhr.upload.addEventListener(\"progress\", args.progress_callback);\n        }\n\n        // set the \"timeout\" callback if given\n        if(args.timeout_callback && typeof args.timeout_callback == 'function') {\n            xhr.addEventListener('timeout', args.timeout_callback);\n        }\n\n        // adding extra params as needed\n        var url = args.url;\n        if(args.extra_params) {\n            for(var param_name in args.extra_params) {\n                if(args.extra_params.hasOwnProperty(param_name)) {\n                    if(url.indexOf('?') !== -1) {\n                        url += \"&\";\n                    } else {\n                        url += \"?\";\n                    }\n\n                    url += encodeURIComponent(param_name) + \"=\";\n                    url += encodeURIComponent(args.extra_params[param_name]);\n                }\n            }\n        }\n\n        // open the xhr connection\n        xhr.open(args.method, url);\n\n        // set the headers\n        for(var header in args.headers) {\n            if(args.headers.hasOwnProperty(header)) {\n                xhr.setRequestHeader(header, args.headers[header]);\n            }\n        }\n\n        // send the ajax call\n        if(args.body) {\n            xhr.send(args.body);\n        } else {\n            xhr.send();\n        }\n        return xhr;\n    };\n\n    namespace.mule_upload = function(settings) {\n        var debug = true;\n\n        // custom logging function that prepends a text for easy identification;\n        // it is also toggled by the `debug` flag\n        var log = function() {};\n        if(debug && console && console.log) {\n            log = function() {\n                var args = [\"[MuleUploader]\"];\n                for(var i=0; i<arguments.length; i++) {\n                    args.push(arguments[i]);\n                }\n                return console.log.apply(console, args);\n            };\n        }\n\n        // helper constants for more readable code\n        var KB = 1024;\n        var MB = 1024 * KB;\n        var GB = 1024 * MB;\n\n        // for new webkit browsers, the .slice() method is named .webkitSlice()\n        // similar for mozilla\n        File.prototype.slice = File.prototype.webkitSlice || File.prototype.mozSlice || File.prototype.slice;\n\n        // verify that the browser has the needed HTML5 capabilities\n        if(!(namespace.File && namespace.FileList && namespace.Blob)) {\n            log(\"HTML5 APIs not available.\");\n            return -1;\n        }\n        if(navigator.userAgent.indexOf(\"Firefox\") !== -1) {\n            try {\n                new Blob([\"something\"]);\n            } catch(e) {\n                return -1;\n            }\n        }\n        log(\"OK\");\n\n        function Uploader(settings) {\n            // `u` is often used as an alias for `this` to be used in nested closures\n            var u = this;\n\n            settings = settings || {};\n\n            // make the input element another possible setting\n            // in some cases (e.g. drag & drop) there is no input element\n            u.input = settings.file_input;\n            u.file  = settings.file;\n\n            // NOTE: For Amazon S3, the minimum chunk size is 5MB\n            // we are using 6 for safe measure. Note that the maximum number of chunks\n            // is 10,000, so for example, if the chunk size is 6MB, the maximum\n            // possible file size is 6MB * 10,000 = ~58GB\n            settings.chunk_size = settings.chunk_size || (6 * MB); // default 6MB\n            settings.max_size = settings.max_size || 5 * GB; // 5GB\n\n            // the number of parallel upload xhr's\n            settings.num_workers = settings.num_workers || 4;\n\n            // the S3 object key; I recommend to generate this dynamically (e.g.\n            // a random string) to avoid unwanted overwrites.\n            settings.key = settings.key || \"the_key\";\n\n            // the Amazon S3 bucket where you'll store the uploads\n            settings.bucket = settings.bucket;\n            settings.host = settings.host || location.protocol + \"//\" + settings.bucket + \".s3.amazonaws.com\";\n\n            // the Amazon S3 access key. DO NOT give the AWS Secret code!\n            settings.access_key = settings.access_key;\n\n            // the Mime-Type of the content. You must match this with the backend value\n            // or you'll get an Invalid Signature error. If unsure about the\n            // mime type, use application/octet-stream\n            settings.content_type = settings.content_type || \"application/octet-stream\";\n\n\n            // acl can be set to:\n            // private\n            // public-read (* default)\n            // public-read-write\n            // authenticated-read\n            // bucket-owner-read\n            // bucket-owner-full-control\n            // log-delivery-write\n            settings.acl = settings.acl || 'public-read';\n\n            // various callbacks\n            settings.on_progress = settings.on_progress || function() {};\n            settings.on_chunk_progress = settings.on_chunk_progress || function() {};\n            settings.on_select = settings.on_select || function() {};\n            settings.on_error = settings.on_error || function() {};\n            settings.on_complete = settings.on_complete || function() {};\n            settings.on_init = settings.on_init || function() {};\n            settings.on_start = settings.on_start || function() {};\n            settings.on_chunk_uploaded = settings.on_chunk_uploaded || function() {};\n\n            // extra parameters to give to the backend\n            settings.extra_params = settings.extra_params || {};\n\n            // the location prefix of the uploader's backend\n            settings.ajax_base = settings.ajax_base || \"/upload-backend\";\n\n            //extensions comma delimited without period (jpg,jpeg,png,gif)\n            settings.accepted_extensions = settings.accepted_extensions || \"\";\n\n            // set the values so that they can be used everywhere, as needed\n            u.settings = settings;\n\n            // the \"waiting\" state means the uploader is waiting for the user\n            // to select a file\n            u.set_state(\"waiting\");\n\n            if (u.input) {\n                u.input.onchange = function(e, force) {\n                    // the `onchange` event may be triggered multiple times, so we\n                    // must ensure that the callback is only executed the first time\n                    if(u.get_state() != \"waiting\") {\n                        return false;\n                    }\n\n                    // the uploader doesn't support multiple uploads at this time,\n                    // so we get the first file\n                    var file = e.target.files[0];\n                    u.upload_file(file, force);\n                    return true;\n                };\n            }\n\n            // trigger the init event callback\n            setTimeout(function() {\n                u.settings.on_init.apply(u);\n            }, 100);\n        }\n\n        Uploader.prototype.upload_file = function(file, force) {\n            var u = this;\n            // the `onchange` event may be triggered multiple times, so we\n            // must ensure that the callback is only executed the first time\n            // also make sure the file is not already set.\n            if(u.get_state() != \"waiting\") {\n                return false;\n            }\n\n            if (file) {\n                u.file = file;\n            }\n\n            if (!u.file) {\n                return false;\n            }\n\n            // we use the lastModifiedDate, the file name and size to uniquely\n            // identify a file. There may be false positives and negatives,\n            // but the chance for a false positive is basically zero\n            // some browsers don't report the last modified date, so we default\n            // to a blank date\n            u.file.lastModifiedDate = u.file.lastModified || Math.round(Date.now() / 1000);\n\n            if(u.file.size > u.settings.max_size) {\n                alert(\n                    [\"The maximum allowed file size is \",\n                    (u.settings.max_size / GB),\n                    \"GB. Please select another file.\"].join('')\n                );\n                return false;\n            }\n\n            // check for accepted extensions, if applicable\n            if(u.settings.accepted_extensions) {\n                // get the file extension\n                var file_extension = file.name.replace(/[^A-Za-z 0-9 \\.,\\?\"\"!@#\\$%\\^&\\*\\(\\)-_=\\+;:<>\\/\\\\\\|\\}\\{\\[\\]`~]*/g, '').split('.').pop();\n\n                // split the given extensions into an array\n                var extensions_array = u.settings.accepted_extensions.split(',');\n\n                // and match the extension against the given extension list\n                var file_accepted = false;\n                for(var i=0; i<extensions_array.length; i++) {\n                    if(file_extension == extensions_array[i]) {\n                        file_accepted = true;\n                        break;\n                    }\n                }\n\n                // if the file is not accepted, notify the user and return\n                if(!file_accepted) {\n                    alert(\n                        [\"This file format is not accepted. \",\n                        \"Please use a file with an extension like \",\n                        u.settings.accepted_extensions].join('')\n                    );\n                    return false;\n                }\n            }\n\n            // initialize the file upload\n            u.settings.on_select.call(u, file);\n            var args = {\n                filename: file.name.replace(/[^A-Za-z 0-9 \\.,\\?\"\"!@#\\$%\\^&\\*\\(\\)-_=\\+;:<>\\/\\\\\\|\\}\\{\\[\\]`~]*/g, '').replace(/\\s\\s+/g, ' '),\n                filesize: file.size,\n                key: u.settings.key,\n                mime_type: u.settings.content_type,\n                collectionId: u.settings.collectionId,\n                last_modified: file.lastModifiedDate\n            };\n            if(force) {\n                args.force = true;\n            }\n\n            // get the signing key. It will also return\n            // a file key + upload_id pair if the selected file\n            // is already uploading. It also returns a\n            // backup_key in case that file upload already completed.\n            // The signing key is valid for 7 days\n            XHR({\n                url: u.settings.ajax_base + \"/signing_key/\",\n                extra_params: args,\n                load_callback: function(e) {\n                    var json = JSON.parse(e.target.responseText);\n                    json.date = new Date(json.date  + '.000Z');\n                    u.auth = json;\n                    u.upload_id = json.upload_id;\n                    u.chunks = json.chunks;\n                    u.settings.key = json.key || u.settings.key;\n                    u.settings.backup_key = u.settings.key;\n                    if(!u.upload_id) {\n                        console.log(json);\n                        AmazonXHR.init(json, u.settings.key, file, function(e) {\n                            var xml = e.target.responseXML;\n                            // get the given upload id\n                            u.upload_id = xml.getElementsByTagName('UploadId')[0].textContent;\n\n                            u.load_file();\n                        });\n                    } else {\n                        // resume a previus upload\n                        if(!force) {\n                            // get the uploaded parts from S3\n                            AmazonXHR.list(u.auth, u.file, u.settings.key, u.upload_id, u.settings.chunk_size, function(parts) {\n                                for(var i=0; i<parts.length; i++) {\n                                    var chunk = parts[i][0] - 1;\n                                    u.set_progress(chunk, u.get_chunk_size(chunk));\n                                    u.set_chunk_finished(chunk);\n                                    u.set_chunk_uploading(chunk, false);\n                                }\n                                u.load_file();\n                            }, function() {\n                                // if it fails, re-initiate the upload, and force\n                                // it to start a new upload\n                                u.upload_id = null;\n                                this._loaded_chunks = null;\n                                u._progress = null;\n                                u._total_progress = null;\n                                u._loaded_chunks = null;\n                                u._uploading_chunks = null;\n                                u._chunks = null;\n                                u.settings.key = u.settings.backup_key;\n                                u.upload_file(file, true); // force reload\n                            });\n                        } else {\n                            // force-start the upload\n                            u.load_file();\n                        }\n                    }\n                }\n            });\n        };\n\n        // this initiates the file upload\n        Uploader.prototype.load_file = function() {\n            var u = this;\n\n            // we can't start the upload if we are waiting for user input\n            if(u.get_state() != \"waiting\") {\n                return;\n            }\n\n            // make sure we only trigger the start event once\n            if(!u._start_fired) {\n                // trigger the start event callback\n                u.settings.on_start.call(u, u.file);\n\n                // and also trigger a progress callback with 0%\n                u.settings.on_progress.call(u, 0, u.file.size);\n                u._start_fired = true;\n            }\n\n            // from now on, we are \"processing\" the file upload\n            u.set_state(\"processing\");\n\n            // at this point we may have some chunks already uploaded,\n            // so we may trigger a progress callback with the reported progress\n            u.settings.on_progress.call(u, u.get_total_progress(), u.file.size);\n\n            // get the next chunk\n            var next_chunk = u.get_next_chunk();\n\n            if(next_chunk != -1) {\n                // and start uploading it\n                u.upload_chunk(next_chunk);\n            } else if(u.upload_finished()) {\n                // if we finished, trigger the upload finish sequence\n                log(\"All done; finish upload\");\n                u.finish_upload();\n            }\n\n            for(var i=0; i < u.settings.num_workers - 1; i++) {\n                next_chunk = u.get_next_chunk();\n                if(next_chunk !== -1) {\n                    u.upload_chunk(next_chunk);\n                } else {\n                    break;\n                }\n            }\n        };\n\n        // this uploads a single chunk to S3\n        Uploader.prototype.upload_chunk = function(chunk) {\n            var u = this;\n            // make sure we're in processing mode\n            if(u.get_state() != \"processing\") {\n                log(\"NOT processing; return\");\n                return;\n            }\n\n            // also make sure we're not already uploading this chunk\n            if(u.get_chunk_uploading(chunk)) {\n                log(\"Already Uploading\");\n                setTimeout(function() {\n                    var next_chunk = u.get_next_chunk();\n                    if(next_chunk !== -1) {\n                        u.upload_chunk(u.get_next_chunk());\n                    }\n                }, 1000);\n                return;\n            } else {\n                // mark this chunk as uploading\n                u.set_chunk_uploading(chunk);\n            }\n            log(\"Uploading Chunk: \" + chunk);\n\n            // if we already uploaded this chunk, get to the next one\n            // if there is no next chunk, finish the upload\n            if(u.is_chunk_loaded(chunk)) {\n                var next_chunk = u.get_next_chunk();\n                if(next_chunk != -1) {\n                    u.upload_chunk(next_chunk);\n                } else {\n                    if(u.upload_finished()) {\n                        log(\"No next chunk; finish upload\");\n                        u.finish_upload();\n                    }\n                }\n            }\n\n            var length = u.settings.chunk_size;\n\n            // get the start and end bytes for the needed chunk\n            var start = chunk * length;\n            var end = Math.min(start + length, u.file.size);\n\n            // we need the last progress time in order to detect hanging\n            // uploads\n            var last_progress_time = new Date();\n            u._intervals = u._intervals || {};\n\n\n            // the \"readystatechange\" handler\n            var handler = function(e) {\n                // we care about the \"done\" event triggered while processing\n                if(e.target.readyState != this.DONE || u.get_state() != \"processing\") {\n                    log(e);\n                    return;\n                }\n\n                // if we don't receive a 2XX response, trigger an error\n                if(e.target.status / 100 != 2) {\n                    return error_handler();\n                }\n\n                // at this point, we know that this chunk finished uploading\n                log(\"Chunk uploaded: \" + chunk);\n\n                // notify the server of the uploaded chunk\n                u.notify_chunk_uploaded(chunk);\n\n                // and also trigger the chunk_uploaded callback\n                u.settings.on_chunk_uploaded.call(u, chunk);\n\n                // cancel the xhr watcher interval\n                clearInterval(u._intervals[chunk]);\n\n                // mark the chunk as finished\n                u.set_progress(chunk, u.get_chunk_size(chunk));\n                u.set_chunk_finished(chunk);\n                u.set_chunk_uploading(chunk, false);\n\n                // get next chunk; if we're out of chunks,\n                // finish the upload\n                var next_chunk = u.get_next_chunk();\n                if(next_chunk != -1) {\n                    u.upload_chunk(next_chunk);\n                } else if(u.upload_finished()) {\n                    log(\"Done\");\n                    u.finish_upload();\n                } else {\n                    var interval = setInterval(function() {\n                        var chunk = u.get_next_chunk();\n                        if(chunk != -1) {\n                            clearInterval(interval);\n                            u.upload_chunk(chunk);\n                        } else if(u.upload_finished()) {\n                            clearInterval(interval);\n                            u.finish_upload();\n                        }\n                    }, 1000);\n                }\n            };\n\n            // the upload progress handler\n            var progress_handler = function(e) {\n                // set the internal chunk's progress value to the reported amount\n                u.set_progress(chunk, e.loaded);\n\n                // trigger the progress event callback\n                u.settings.on_progress.call(u, u.get_total_progress(), u.file.size);\n\n                // update the last_progress_time for the watcher interval\n                last_progress_time = new Date();\n            };\n            var error_handled = false;\n            var error_handler = function() {\n                var error_arguments = arguments;\n                var xhr = this;\n                // the upload may have finished, so check for that\n                u.check_already_uploaded(function() {\n                    // if already uploaded\n                    u.set_state(\"finished\");\n\n                    u.notify_upload_finished();\n\n                    // trigger a final progress event callback, with 100%\n                    u.settings.on_progress.call(u, u.file.size, u.file.size);\n\n                    // also trigger the complete event callback\n                    u.settings.on_complete.call(u);\n                }, function() {\n                    // we have a genuine error\n                    log(\"Error: \");\n                    log(error_arguments);\n\n                    // make sure we don't handle the same error more than once\n                    if(error_handled) {\n                        return;\n                    }\n                    error_handled = true;\n\n                    // abort the chunk upload\n                    u.set_chunk_uploading(chunk, false);\n                    u.set_chunk_finished(chunk, false);\n                    u.set_progress(chunk, 0);\n                    log(\"Abort\");\n                    try {\n                        xhr.abort();\n                    } catch(e) {\n                        log(e);\n                    }\n\n                    log(\"Retry chunk: \" + chunk);\n\n                    // clear the watcher interval\n                    clearInterval(u._intervals[chunk]);\n\n                    // re-try the upload\n                    setTimeout(function() {\n                        if(u.get_state() == \"processing\") {\n                            // and proceed\n                            var next_chunk = u.get_next_chunk(chunk);\n                            if(next_chunk !== -1) {\n                                u.upload_chunk(next_chunk);\n                            }\n                        }\n                    }, 1000);\n                });\n            };\n\n            AmazonXHR.upload_chunk(u.auth, u.settings.key, u.upload_id, chunk, u.file.slice(start, end), {\n                progress_callback: progress_handler,\n                state_change_callback: handler,\n                error_callback: error_handler,\n                timeout_callback: error_handler\n            }, function(xhr) {\n                u._chunk_xhr = u._chunk_xhr || [];\n                u._chunk_xhr.push(xhr);\n\n                // the watcher interval; it cancels the xhr if it times out\n                u._intervals[chunk] = setInterval(function() {\n                    if(last_progress_time && (new Date() - last_progress_time) > 120000) { // 15s\n                        log(\"Chunk Failed; retry\");\n                        clearInterval(u._intervals[chunk]);\n                        if(u.get_state() == \"processing\") {\n                            xhr.abort();\n                            error_handler.call(xhr);\n                            u._chunk_xhr[u._chunk_xhr.indexOf(xhr)] = null;\n                        }\n                    }\n                }, 4000); // every 4s\n            });\n        };\n\n        // initiates the upload finish sequence\n        Uploader.prototype.finish_upload = function() {\n            var u = this;\n\n            // make sure it's not triggered when not processing (e.g. multiple times)\n            if(u.get_state() != \"processing\") {\n                return;\n            }\n\n            // change the upload's state\n            u.set_state(\"finishing\");\n\n            u.settings.on_progress.call(u, u.file.size, u.file.size); // 100% done.\n\n\n            var handler = function(e) {\n                // i.e. if it's a 2XX response\n                if(e.target.status / 100 == 2) {\n                    log(\"Finished file.\");\n                    u.set_state(\"finished\");\n                    u.settings.on_progress.call(u, u.file.size, u.file.size); // it's 100% done\n\n                    // trigger the complete event callback\n                    u.settings.on_complete.call(u);\n                } else if(e.target.status == 400 &&\n                    e.target.responseText.indexOf(\"EntityTooSmall\") !== -1) {\n                    // an \"EntityTooSmall\" error means that we missed a chunk\n                    AmazonXHR.list(u.auth, u.file, u.settings.key, u.upload_id, u.settings.chunk_size, function(parts) {\n                        u.update_chunks(parts);\n                        var next_chunk = u.get_next_chunk();\n                        u.set_state(\"processing\");\n                        u.upload_chunk(next_chunk);\n                    });\n                } else if(e.target.status == 404) {\n                    // 404 = NoSuchUpload = check if already finished\n                    // if so, start a new upload\n                    u.cancel(function() {\n                        u.upload_file(u.file, true);\n                    });\n                } else {\n                    u.check_already_uploaded(function() {\n                        handler({\n                            target: {\n                                status: 200\n                            }\n                        });\n                    }, function() {\n                        handler({\n                            target: {\n                                status: 404\n                            }\n                        });\n                    });\n                }\n            };\n\n            AmazonXHR.list(u.auth, u.file, u.settings.key, u.upload_id, u.settings.chunk_size, function(parts) {\n                var num_chunks = Math.ceil(u.file.size / u.settings.chunk_size);\n\n                // check that we uploaded all the chunks; if we didn't,\n                // start uploading the missing ones\n                if(parts.length != num_chunks) {\n                    u.update_chunks(parts);\n                    var next_chunk = u.get_next_chunk();\n                    u.set_state(\"processing\");\n                    u.upload_chunk(next_chunk);\n                    return;\n                }\n\n                AmazonXHR.finish(u.auth, u.file, u.settings.key, u.upload_id, parts, u.settings.chunk_size, handler, handler);\n            });\n        };\n\n\n        // notify the server that a chunk finished uploading. This is needed for\n        // upload resumes\n        Uploader.prototype.notify_chunk_uploaded = function(chunk) {\n            var u = this;\n            if(u.get_state() != \"processing\") {\n                return;\n            }\n            var key = u.settings.key;\n            var upload_id = u.upload_id;\n            var url = u.settings.ajax_base + '/chunk_loaded/';\n            XHR({\n                url: url,\n                extra_params: {\n                    chunk: chunk,\n                    key: key,\n                    upload_id: upload_id,\n                    filename: u.file.name.replace(/[^A-Za-z 0-9 \\.,\\?\"\"!@#\\$%\\^&\\*\\(\\)-_=\\+;:<>\\/\\\\\\|\\}\\{\\[\\]`~]*/g, '').replace(/\\s\\s+/g, ' '),\n                    filesize: u.file.size,\n                    mime_type: u.settings.content_type,\n                    collectionId: u.settings.collectionId,\n                    last_modified: u.file.lastModifiedDate\n                }\n            });\n        };\n\n        // check whether the file is already uploaded\n        Uploader.prototype.check_already_uploaded = function(callback, error_callback) {\n            var u = this;\n            var method = \"HEAD\";\n            var path = \"/\" + u.settings.key;\n            var inner_handler = function(e) {\n                // the handler only checks for status code;\n                // if the HEAD returns 404, re-upload,\n                // else, it returns 200 and finish the upload\n                if(e.target.status / 100 == 2) {\n                    log(\"Already Uploaded\");\n                    callback();\n                } else {\n                    log(\"Error!\");\n                    error_callback();\n                }\n            };\n\n            if(!error_callback && typeof(error_callback) !== \"function\") {\n                error_callback = function() {\n                    setTimeout(function() {\n                        return u.check_already_uploaded(callback, error_callback);\n                    }, 2500);\n                };\n            }\n\n            XHR({\n                url: u.settings.host + path,\n                method: method,\n                load_callback: inner_handler,\n                error_callback: error_callback\n            });\n        };\n\n        // cancels an upload\n        Uploader.prototype.cancel = function(callback) {\n            // empty all fields, cancel all intervals, abort all xhr's\n            var u = this;\n            for(var i=0; i < u._chunk_xhr.length; i++) {\n                log(\"Abort chunk: \" + u._chunk_xhr[i]);\n                u._chunk_xhr[i].abort();\n            }\n            u._intervals = u._intervals || {};\n            for(var x in u._intervals) {\n                if(u._intervals.hasOwnProperty(x)) {\n                    clearInterval(u._intervals[x]);\n                }\n            }\n            callback = callback || function() {};\n            u.set_state(\"canceled\");\n            u._chunk_xhr = u._chunk_xhr || [];\n            u.settings.on_progress.call(u, 0, 0);\n            u._chunk_xhr = null;\n            u._chunks = null;\n            u._uploading_chunks = null;\n            u._loaded_chunks = null;\n            u._start_fired = false;\n            u.upload_id = null;\n            u._progress = null;\n            u.set_state(\"waiting\"); // wait for a new upload\n            callback();\n        };\n\n        // updates the chunk history with the given chunks\n        Uploader.prototype.update_chunks = function(parts) {\n            var u = this;\n            var loaded = [];\n            var num_chunks = Math.ceil(u.file.size / u.settings.chunk_size);\n\n            u._init_chunks(true);\n            u._uploading_chunks = [];\n            u._loaded_chunks = [];\n\n            var i;\n            for(i=0; i < parts.length; i++) {\n                var part_number = parseInt(parts[i][0], 10);\n                u.add_loaded_chunk(part_number - 1);\n                u.set_chunk_finished(part_number - 1);\n                loaded.push(part_number - 1);\n            }\n            for(i=0; i < num_chunks; i++) {\n                if(loaded.indexOf(i) === -1) {\n                    log(\"Chunk not uploaded: \", i);\n                    u.set_progress(i, 0);\n                }\n            }\n        };\n\n        // returns true if a file is selected\n        Uploader.prototype.is_selected = function() {\n            return !!this.file;\n        };\n\n        // returns the uploader's state\n        Uploader.prototype.get_state = function() {\n            return this._state;\n        };\n\n        // sets the uploader's state\n        Uploader.prototype.set_state = function(state) {\n            this._state = state;\n            return state;\n        };\n\n        // set a chunk's progress\n        Uploader.prototype.set_progress = function(chunk, loaded) {\n            this.log_status();\n            this._progress = this._progress || {};\n            this._total_progress = (this._total_progress || 0 ) + loaded - (this._progress[chunk] || 0);\n            this._progress[chunk] = loaded;\n            this.settings.on_chunk_progress.call(\n                this, chunk, loaded, this.get_chunk_size(chunk));\n        };\n\n        // gets the total bytes uploaded\n        Uploader.prototype.get_total_progress = function() {\n            return this._total_progress || 0;\n        };\n\n        // returns true if a chunk is already uploaded\n        Uploader.prototype.is_chunk_loaded = function(chunk) {\n            this._loaded_chunks = this._loaded_chunks || [];\n            return this._loaded_chunks.indexOf(chunk) !== -1;\n        };\n\n        // adds a chunk to the uploaded list\n        Uploader.prototype.add_loaded_chunk = function(chunk) {\n            this._loaded_chunks = this._loaded_chunks || [];\n            this._loaded_chunks.push(chunk);\n            this.set_progress(chunk, this.get_chunk_size(chunk));\n        };\n\n        // returns true if the chunk is currently uploading\n        Uploader.prototype.get_chunk_uploading = function(chunk) {\n            this._uploading_chunks = this._uploading_chunks || [];\n            return this._uploading_chunks.indexOf(chunk) !== -1;\n        };\n\n        // sets whether a chunk is currently uploading or not\n        Uploader.prototype.set_chunk_uploading = function(chunk, val) {\n            if(typeof val == \"undefined\") {\n                val = true;\n            }\n            this._uploading_chunks = this._uploading_chunks || [];\n            if(val) {\n                this._uploading_chunks.push(chunk);\n            } else {\n                var list = [];\n                for(var i=0; i < this._uploading_chunks.length; i++) {\n                    if(this._uploading_chunks[i] != chunk) {\n                        list.push(this._uploading_chunks[i]);\n                    }\n                }\n                this._uploading_chunks = list;\n            }\n        };\n\n        // initialize inner representation of chunks\n        Uploader.prototype._init_chunks = function(force) {\n            var u = this;\n            if(!u._chunks || force) {\n                u._chunks = [];\n                var num_chunks = Math.ceil(u.file.size / u.settings.chunk_size);\n                for(var i=0; i < num_chunks; i++) {\n                    u._chunks.push(false);\n                }\n            }\n        };\n\n        // sets whether a chunk finished uploading\n        Uploader.prototype.set_chunk_finished = function(chunk, val) {\n            if(typeof val == \"undefined\") {\n                val = true;\n            }\n            var u = this;\n            u._init_chunks();\n            u._chunks[chunk] = val;\n        };\n\n        // get next chunk to be uploaded; if all chunks are done, return -1\n        Uploader.prototype.get_next_chunk = function(chunk) {\n            var u = this;\n            u._init_chunks();\n            if(chunk && !u._chunks[chunk] && !u.get_chunk_uploading(chunk)) {\n                return chunk;\n            }\n            for(var i=0; i < u._chunks.length; i++) {\n                if(!u._chunks[i] && !u.get_chunk_uploading(i)) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n\n        // returns true if all chunks finished uploaded\n        Uploader.prototype.upload_finished = function() {\n            var u = this;\n            u._init_chunks();\n            for(var i=0; i < u._chunks.length; i++) {\n                if(!u._chunks[i] || u.get_chunk_uploading(i)) {\n                    return false;\n                }\n            }\n            return true;\n        };\n\n        Uploader.prototype.is_last_chunk = function(chunk) {\n            return Math.ceil(this.file.size / this.settings.chunk_size) - 1 == chunk;\n        };\n\n        Uploader.prototype.get_chunk_size = function(chunk) {\n            if(this.is_last_chunk(chunk)) {\n                return this.file.size % this.settings.chunk_size;\n            } else {\n                return this.settings.chunk_size;\n            }\n        };\n\n        Uploader.prototype.log_status = function() {\n            // log(this.get_total_progress() / this.file.size * 100);\n        };\n\n        Uploader.prototype.on_chunk_progress = function(f) { this.settings.on_chunk_progress = f; };\n        Uploader.prototype.on_progress = function(f) { this.settings.on_progress = f; };\n        Uploader.prototype.on_select = function(f) { this.settings.on_select = f; };\n        Uploader.prototype.on_error = function(f) { this.settings.on_error = f; };\n        Uploader.prototype.on_complete = function(f) { this.settings.on_complete = f; };\n        Uploader.prototype.on_init = function(f) { this.settings.on_init = f; };\n        Uploader.prototype.on_start = function(f) { this.settings.on_start = f; };\n        Uploader.prototype.on_chunk_uploaded = function(f) { this.settings.on_chunk_uploaded = f; };\n\n        return new Uploader(settings);\n    };\n\n\n    var AmazonXHR = function(settings) {\n        this.settings = settings;\n    };\n    AmazonXHR.finish = function(auth, file, key, upload_id, parts, chunk_size, callback) {\n        var querystring = {\"uploadId\": upload_id};\n\n        // compose the CompleteMultipartUpload request for putting\n        // the chunks together\n        var data = \"<CompleteMultipartUpload>\";\n        for(var i=0; i<parts.length; i++) {\n            data += \"<Part>\";\n            data += \"<PartNumber>\" + parts[i][0] + \"</PartNumber>\";\n            data += \"<ETag>\" + parts[i][1] + \"</ETag>\";\n            data += \"</Part>\";\n        }\n        data += \"</CompleteMultipartUpload>\";\n\n        // firefox requires a small hack\n        if(navigator.userAgent.indexOf(\"Firefox\") !== -1) {\n            data = new Blob([data]);\n        }\n\n        return new AmazonXHR({\n            auth: auth,\n            key: key,\n            method: \"POST\",\n            querystring: querystring,\n            headers: {},\n            payload: data,\n            load_callback: callback\n        }).send();\n    };\n    AmazonXHR.list = function(auth, file, key, upload_id, chunk_size, callback, error_callback, marker) {\n        var querystring = {\"uploadId\": upload_id};\n        if(marker) {\n            querystring['part-number-marker'] = marker;\n        }\n        return new AmazonXHR({\n            auth: auth,\n            key: key,\n            method: \"GET\",\n            querystring: querystring,\n            headers: {},\n            payload: \"\",\n            error_callback: error_callback,\n            load_callback: function(e) {\n                if(e.target.status === 404) {\n                    // i.e. the file was already uploaded; start fresh\n                    if(error_callback) {\n                        error_callback();\n                    }\n                    return;\n                }\n\n                // process the parts, and return an array of\n                // [part_number, etag, size] through the given callback\n                window.debug = e;\n                var xml = e.target.responseXML;\n                var parts = [];\n                var xml_parts = xml.getElementsByTagName(\"Part\");\n                var num_chunks = Math.ceil(file.size / chunk_size);\n                for(var i=0; i < xml_parts.length; i++) {\n                    var part_number = parseInt(xml_parts[i].getElementsByTagName(\"PartNumber\")[0].textContent, 10);\n                    var etag = xml_parts[i].getElementsByTagName(\"ETag\")[0].textContent;\n                    var size = parseInt(xml_parts[i].getElementsByTagName(\"Size\")[0].textContent, 10);\n\n                    if(part_number != num_chunks && size != chunk_size) {\n                        continue; // chunk corrupted\n                    } else if(part_number == num_chunks &&\n                            size != file.size % chunk_size) {\n                        continue; // final chunk corrupted\n                    }\n\n                    parts.push([\n                        part_number,\n                        etag,\n                        size\n                    ]);\n                }\n                var is_truncated = xml.getElementsByTagName(\"IsTruncated\")[0].textContent;\n                if(is_truncated === \"true\") {\n                    var part_marker = xml.getElementsByTagName(\"NextPartNumberMarker\")[0].textContent;\n                    AmazonXHR.list(auth, file, key, upload_id, chunk_size, function(new_parts) {\n                        callback(parts.concat(new_parts));\n                    }, error_callback, part_marker);\n                } else {\n                    callback(parts);\n                }\n            }\n        }).send();\n    };\n\n    AmazonXHR.upload_chunk = function(auth, key, upload_id, chunk_num, chunk, callbacks, xhr_callback) {\n        var callback, error_callback, progress_callback, readystate_callback;\n        if(callbacks instanceof Object) {\n            callback = callbacks.load_callback;\n            error_callback = callbacks.error_callback;\n            progress_callback = callbacks.progress_callback;\n            readystate_callback = callbacks.state_change_callback;\n        } else {\n            callback = callbacks;\n        }\n        var querystring = {\n            partNumber: chunk_num + 1,\n            uploadId: upload_id\n        };\n        return (new AmazonXHR({\n            auth: auth,\n            key: key,\n            method: \"PUT\",\n            querystring: querystring,\n            headers: {},\n            payload: chunk,\n            load_callback: callback,\n            error_callback: error_callback,\n            progress_callback: progress_callback,\n            state_change_callback: readystate_callback\n        })).send(xhr_callback);\n    };\n    AmazonXHR.init = function(auth, key, file, callback) {\n        return new AmazonXHR({\n            auth: auth,\n            key: key,\n            method: \"POST\",\n            querystring: {\n                \"uploads\": \"\"\n            },\n            headers: {\n                \"x-amz-acl\": \"private\",\n                \"Content-Disposition\": \"attachment; filename=\" + file.name.replace(/[^A-Za-z 0-9 \\.,\\?\"\"!@#\\$%\\^&\\*\\(\\)-_=\\+;:<>\\/\\\\\\|\\}\\{\\[\\]`~]*/g, '').replace(/\\s\\s+/g, ' '),\n                \"Content-Type\": auth.content_type || \"application/octet-stream\"\n            },\n            payload: \"\",\n            load_callback: callback\n        }).send();\n    };\n    AmazonXHR.prototype = {\n        send: function(callback) {\n            var self = this;\n            self.request_date = new Date();\n\n            self.headers = self.settings.headers;\n            self.headers['host'] = self.settings.auth.bucket + \".s3.amazonaws.com\";\n\n            var date_string = [\n                self.settings.auth.date.getUTCFullYear(),\n                utils.zfill(self.settings.auth.date.getUTCMonth() + 1, 2),\n                utils.zfill(self.settings.auth.date.getUTCDate(), 2)\n            ].join('');\n\n            self.settings.querystring['X-Amz-Date'] = utils.uriencode(utils.iso8601(self.request_date));\n            self.settings.querystring[\"X-Amz-Algorithm\"] = \"AWS4-HMAC-SHA256\";\n            self.settings.querystring[\"X-Amz-Expires\"] =  86400;\n            self.settings.querystring[\"X-Amz-Credential\"] = utils.uriencode([\n                self.settings.auth.access_key,\n                \"/\" + date_string + \"/\",\n                self.settings.auth.region + \"/s3/aws4_request\"\n            ].join(''));\n            self.settings.querystring[\"X-Amz-SignedHeaders\"] = \"\";\n\n            var header_keys = []\n            for(var key in self.headers) {\n                header_keys.push(key);\n            }\n            header_keys.sort();\n            self.settings.querystring[\"X-Amz-SignedHeaders\"] = utils.uriencode(header_keys.join(';'));\n\n            self.settings.querystring[\"X-Amz-Signature\"] = self.get_authorization_header();\n\n            delete self.headers['host'];  // keep this header only for hashing\n\n            var url = location.protocol + \"//\" + self.settings.auth.bucket + \".s3.amazonaws.com/\" + self.settings.key;\n            var first = true;\n            for(var key in self.settings.querystring) {\n                if(self.settings.querystring.hasOwnProperty(key)) {\n                    if(first) {\n                        url += \"?\";\n                    }\n                    first = false;\n                    url += key + \"=\" + self.settings.querystring[key] + \"&\";\n                }\n            }\n            url = url.slice(0, -1);  // remove extra ampersand\n\n            var xhr = XHR({\n                url: url,\n                method: self.settings.method,\n                headers: self.headers,\n                body: self.settings.payload,\n\n                load_callback: self.settings.load_callback,\n                progress_callback: self.settings.progress_callback,\n                state_change_callback: self.settings.state_change_callback,\n                error_callback: self.settings.error_callback,\n                timeout_callback: self.settings.timeout_callback\n            });\n            if(callback) {\n                callback(xhr);\n            }\n        },\n        get_authorization_header: function() {\n            if(!this.settings.auth.date) {\n                throw \"Invalid date given.\";\n            }\n\n            var header = \"\";\n\n            var header_keys = utils.get_sorted_keys(this.headers);\n\n            // signed headers\n            var signed_headers = \"\";\n            for(var i=0; i<header_keys.length; i++) {\n                signed_headers += header_keys[i].toLowerCase() + \";\";\n            }\n            signed_headers = signed_headers.slice(0, -1);\n\n            var canonical_request = this.get_canonical_request();\n            var string_to_sign = this.get_string_to_sign(canonical_request, this.request_date);\n            var signature = this.sign_request(string_to_sign);\n\n            return signature;\n        },\n        get_canonical_request: function() {\n            var request = \"\";\n\n            // verb\n            request += this.settings.method.toUpperCase() + \"\\n\";\n\n            // path\n            request += \"/\" + utils.uriencode(this.settings.key).replace(/%2F/g, \"/\") + \"\\n\";\n\n            // querystring\n            var querystring_keys = utils.get_sorted_keys(this.settings.querystring);\n            var key, value, i;\n            for(i=0; i<querystring_keys.length; i++) {\n                key = querystring_keys[i];\n                value = this.settings.querystring[key];\n                request += utils.uriencode(key) + \"=\" + value + \"&amp;\";\n            }\n            request = request.slice(0, -\"&amp;\".length) + \"\\n\";  // remove extra ampersand\n\n            // headers\n            var header_keys = utils.get_sorted_keys(this.headers);\n            for(i=0; i<header_keys.length; i++) {\n                key = header_keys[i];\n                value = this.headers[key];\n                request += key.toLowerCase() + \":\" + value.trim() + \"\\n\";\n            }\n            request += \"\\n\";\n\n            // signed headers\n            for(i=0; i<header_keys.length; i++) {\n                request += header_keys[i].toLowerCase() + \";\";\n            }\n\n            request = request.slice(0, -1) + \"\\n\";\n            request += \"UNSIGNED-PAYLOAD\";\n\n            return request;\n        },\n        get_string_to_sign: function(canonical_request, time) {\n            var to_sign = \"\";\n            to_sign += \"AWS4-HMAC-SHA256\\n\";\n            to_sign += utils.iso8601(time) + \"\\n\";\n            to_sign += [\n                time.getUTCFullYear(),\n                utils.zfill(time.getUTCMonth() + 1, 2),\n                utils.zfill(time.getUTCDate(), 2),\n                \"/\" + this.settings.auth.region + \"/s3/aws4_request\\n\"\n            ].join('');\n\n            to_sign += CryptoJS.SHA256(canonical_request.replace(/&amp;/g, \"&\")).toString();\n\n            return to_sign;\n        },\n        sign_request: function(string_to_sign) {\n            if(!this.settings.auth.signature) {\n                throw \"No signature provided.\";\n            }\n\n            var res = CryptoJS.HmacSHA256(\n                string_to_sign,\n                CryptoJS.enc.Hex.parse(this.settings.auth.signature)\n            ).toString();\n            return res;\n        }\n    };\n\n    var utils = {\n        uriencode: function(string) {\n            var output = encodeURIComponent(string);\n            output = output.replace(/[^A-Za-z0-9_.~\\-%]+/g, escape);\n            output = output.replace(/;/g, \"%3B\");\n\n            // AWS percent-encodes some extra non-standard characters in a URI\n            output = output.replace(/[*]/g, function(ch) {\n              return '%' + ch.charCodeAt(0).toString(16).toUpperCase();\n            });\n\n            return output;\n        },\n        get_sorted_keys: function(obj) {\n            var keys = [];\n            for(var key in obj) {\n                if(obj.hasOwnProperty(key)) {\n                    keys.push(key);\n                }\n            }\n            return keys.sort();\n        },\n        iso8601: function(date) {\n            return [\n                date.getUTCFullYear(),\n                utils.zfill(date.getUTCMonth() + 1, 2),\n                utils.zfill(date.getUTCDate(), 2),\n                \"T\",\n                utils.zfill(date.getUTCHours(), 2),\n                utils.zfill(date.getUTCMinutes(), 2),\n                utils.zfill(date.getUTCSeconds(), 2),\n                \"Z\"\n            ].join(\"\")\n        },\n        zfill: function(str, num) {\n            return (\"00000000000\" + str).substr(-num);\n        }\n    };\n\n})(this);"],"names":["namespace","h","Math","t","f","lib","j","Base","extend","a","g","prototype","this","c","mixIn","hasOwnProperty","init","$super","apply","arguments","create","toString","clone","q","WordArray","words","sigBytes","length","u","stringify","concat","d","b","clamp","e","push","ceil","call","slice","random","v","enc","Hex","join","parse","parseInt","substr","k","Latin1","String","fromCharCode","charCodeAt","l","Utf8","decodeURIComponent","escape","Error","unescape","encodeURIComponent","x","BufferedBlockAlgorithm","reset","_data","_nDataBytes","_append","_process","blockSize","max","_minBufferSize","min","m","_doProcessBlock","splice","Hasher","cfg","_doReset","update","finalize","_doFinalize","_createHelper","_createHmacHelper","w","HMAC","algo","s","CryptoJS","sqrt","pow","SHA256","_hash","r","p","n","floor","HmacSHA256","XHR","args","headers","method","header","xhr","XMLHttpRequest","url","load_callback","addEventListener","error_callback","state_change_callback","progress_callback","upload","timeout_callback","extra_params","param_name","indexOf","open","setRequestHeader","body","send","AmazonXHR","_hasher","_oKey","_iKey","ArrayBuffer","Uint8Array","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","buffer","byteOffset","byteLength","mule_upload","settings","log","GB","console","i","File","webkitSlice","mozSlice","FileList","Blob","navigator","userAgent","Uploader","input","file_input","file","chunk_size","max_size","num_workers","key","bucket","host","location","protocol","access_key","content_type","acl","on_progress","on_chunk_progress","on_select","on_error","on_complete","on_init","on_start","on_chunk_uploaded","ajax_base","accepted_extensions","set_state","onchange","force","get_state","target","files","upload_file","setTimeout","lastModifiedDate","lastModified","round","Date","now","size","alert","file_extension","name","replace","split","pop","extensions_array","file_accepted","filename","filesize","mime_type","collectionId","last_modified","json","JSON","responseText","date","auth","upload_id","chunks","backup_key","load_file","list","parts","chunk","set_progress","get_chunk_size","set_chunk_finished","set_chunk_uploading","_loaded_chunks","_progress","_total_progress","_uploading_chunks","_chunks","xml","responseXML","getElementsByTagName","textContent","_start_fired","get_total_progress","next_chunk","get_next_chunk","upload_chunk","upload_finished","finish_upload","start","end","last_progress_time","error_handled","error_handler","get_chunk_uploading","is_chunk_loaded","_intervals","readyState","DONE","status","notify_chunk_uploaded","clearInterval","interval","setInterval","error_arguments","check_already_uploaded","notify_upload_finished","abort","loaded","_chunk_xhr","handler","update_chunks","cancel","num_chunks","finish","callback","path","_init_chunks","part_number","add_loaded_chunk","is_selected","_state","state","log_status","val","is_last_chunk","utils","querystring","uploadId","data","payload","marker","window","debug","xml_parts","etag","part_marker","new_parts","chunk_num","callbacks","xhr_callback","readystate_callback","Object","partNumber","uploads","x-amz-acl","Content-Disposition","Content-Type","self","date_string","request_date","getUTCFullYear","zfill","getUTCMonth","getUTCDate","header_keys","uriencode","iso8601","region","sort","get_authorization_header","first","get_sorted_keys","signed_headers","toLowerCase","canonical_request","get_canonical_request","string_to_sign","get_string_to_sign","sign_request","value","request","querystring_keys","toUpperCase","trim","time","to_sign","signature","string","output","ch","obj","keys","getUTCHours","getUTCMinutes","getUTCSeconds","str","num"],"mappings":"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"}