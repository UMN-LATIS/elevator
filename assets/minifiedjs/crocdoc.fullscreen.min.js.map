{"version":3,"sources":["crocdoc.fullscreen.js"],"names":["Crocodoc","addPlugin","scope","isFullscreen","document","fullScreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","isFakeFullscreen","fullscreenchangeHandler","viewerAPI","fire","$el","addClass","removeClass","handleKeydown","event","keyCode","exitFullscreen","fakeRequestFullscreen","useFakeFullscreen","$","window","on","fakeCancelFullscreen","off","enterFullscreen","requestFullscreen","call","el","cancelFullscreen","isNativeFullscreenSupported","FULLSCREENCHANGE_EVENT","join","util","getUtility","viewerConfig","getConfig","api","init","config","useWindowAsViewport","documentElement","element","requestFullScreen","mozRequestFullScreen","webkitRequestFullScreen","msRequestFullscreen","cancelFullScreen","mozCancelFullScreen","webkitCancelFullScreen","msExitFullscreen","extend","isFullscreenSupported","destroy"],"mappings":"AAKAA,SAASC,UAAU,aAAc,SAAUC,GACvC,YAuBA,SAASC,KACL,MAAOC,UAASC,mBACZD,SAASE,yBACTF,SAASG,sBACTH,SAASI,qBACTC,EAQR,QAASC,KACLC,EAAUC,KAAK,oBACXT,KACAU,EAAIC,SAAS,uBACbH,EAAUC,KAAK,qBAEfC,EAAIE,YAAY,uBAChBJ,EAAUC,KAAK,mBAUvB,QAASI,GAAcC,GACG,KAAlBA,EAAMC,SACNC,IASR,QAASC,KACDC,IACAZ,GAAmB,EACnBa,EAAEC,QAAQC,GAAG,UAAWR,GACxBH,EAAIC,SAAS,2BACbJ,KASR,QAASe,KACLhB,GAAmB,EACnBa,EAAEC,QAAQG,IAAI,UAAWV,GACzBH,EAAIE,YAAY,2BAChBL,IAQJ,QAASiB,KACLC,EAAkBC,KAAKC,GAQ3B,QAASX,KACLY,EAAiBF,KAAKzB,UAQ1B,QAAS4B,KACL,MAAOJ,KAAsBR,EAzGjC,GAKIP,GAAKiB,EAILF,EACAG,EAVAE,GAA0B,GAAI,UAAW,OAAQ,KAChDC,KAAK,oBAEN,qBAGAC,EAAOjC,EAAMkC,WAAW,UACxBC,EAAenC,EAAMoC,YACrB3B,EAAY0B,EAAaE,IAGzBlB,GAAoB,EACpBZ,GAAmB,CAoGvB,QASI+B,KAAM,SAAUC,GACZA,EAASA,MAC+B,mBAA7BA,GAAOpB,oBACdA,EAAoBoB,EAAOpB,mBAG3BgB,EAAaK,qBAGbrB,GAAoB,EACpBS,EAAK1B,SAASuC,gBACd9B,EAAMS,EAAEQ,KAGJjB,EADA4B,EAAOG,QACDtB,EAAEmB,EAAOG,SAETP,EAAaxB,IAEvBiB,EAAKjB,EAAI,IAIbe,EAAoBE,EAAGe,mBACHf,EAAGF,mBACHE,EAAGgB,sBACHhB,EAAGiB,yBACHjB,EAAGkB,qBACH5B,EAGpBW,EAAoB3B,SAAS6C,kBACT7C,SAASe,gBACTf,SAAS8C,qBACT9C,SAAS+C,wBACT/C,SAASgD,kBACT3B,EAGpBU,EAAKkB,OAAO1C,GACRgB,gBAAiBA,EACjBR,eAAgBA,EAChBhB,aAAcA,EACdmD,sBAAuBtB,IAG3BV,EAAElB,UAAUoB,GAAGS,EAAwBvB,IAO3C6C,QAAS,WACL5C,EAAUQ,iBACVG,EAAElB,UAAUsB,IAAIO,EAAwBvB","file":"crocdoc.fullscreen.min.js","sourcesContent":["/**\n * @fileOverview The fullscreen plugin\n * @author lakenen\n */\n\nCrocodoc.addPlugin('fullscreen', function (scope) {\n    'use strict';\n\n    // shorter way of defining\n    // 'fullscreenchange webkitfullscreenchange mozfullscreenchange MSFullscreenChange'\n    var FULLSCREENCHANGE_EVENT = ['', ' webkit', ' moz', ' ']\n        .join('fullscreenchange') +\n        // @NOTE: IE 11 uses upper-camel-case for this, which is apparently necessary\n        'MSFullscreenChange';\n\n    var $el, el,\n        util = scope.getUtility('common'),\n        viewerConfig = scope.getConfig(),\n        viewerAPI = viewerConfig.api,\n        requestFullscreen,\n        cancelFullscreen,\n        useFakeFullscreen = true,\n        isFakeFullscreen = false;\n\n    /**\n     * Return true if full screen is active\n     * @returns {boolean}\n     * @private\n     */\n    function isFullscreen() {\n        return document.fullScreenElement ||\n            document.webkitFullscreenElement ||\n            document.mozFullScreenElement ||\n            document.msFullscreenElement ||\n            isFakeFullscreen;\n    }\n\n    /**\n     * Handle fullscreenchange events\n     * @returns {void}\n     * @private\n     */\n    function fullscreenchangeHandler() {\n        viewerAPI.fire('fullscreenchange');\n        if (isFullscreen()) {\n            $el.addClass('crocodoc-fullscreen');\n            viewerAPI.fire('fullscreenenter');\n        } else {\n            $el.removeClass('crocodoc-fullscreen');\n            viewerAPI.fire('fullscreenexit');\n        }\n    }\n\n    /**\n     * Handle keydown events\n     * @param   {Event} event The keydown event\n     * @returns {void}\n     * @private\n     */\n    function handleKeydown(event) {\n        if (event.keyCode === 27) { // ESC\n            exitFullscreen();\n        }\n    }\n\n    /**\n     * Enter fake fullscreen mode\n     * @returns {void}\n     * @private\n     */\n    function fakeRequestFullscreen() {\n        if (useFakeFullscreen) {\n            isFakeFullscreen = true;\n            $(window).on('keydown', handleKeydown);\n            $el.addClass('crocodoc-fakefullscreen');\n            fullscreenchangeHandler();\n        }\n    }\n\n    /**\n     * Exit fake fullscreen mode\n     * @returns {void}\n     * @private\n     */\n    function fakeCancelFullscreen() {\n        isFakeFullscreen = false;\n        $(window).off('keydown', handleKeydown);\n        $el.removeClass('crocodoc-fakefullscreen');\n        fullscreenchangeHandler();\n    }\n\n    /**\n     * @param {Element} element The element to make full screen\n     * @returns {void}\n     * @private\n     */\n    function enterFullscreen() {\n        requestFullscreen.call(el);\n    }\n\n    /**\n     * Exit full screen\n     * @returns {void}\n     * @private\n     */\n    function exitFullscreen() {\n        cancelFullscreen.call(document);\n    }\n\n    /**\n     * Return true if native fullscreen mode is supported\n     * @returns {Boolean} Whether fullscreen mode is supported\n     * @private\n     */\n    function isNativeFullscreenSupported() {\n        return requestFullscreen !== fakeRequestFullscreen;\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n\n        /**\n         * Initialize the fullscreen plugin\n         * @param {Object} config Config options for the fullscreen plugin\n         * @param {Element} config.element The element to use for fullscreen\n         * @param {boolen} config.useFakeFullscreen Whether to use fake fullscreen mode\n         * @returns {void}\n         */\n        init: function (config) {\n            config = config || {};\n            if (typeof config.useFakeFullscreen !== 'undefined') {\n                useFakeFullscreen = config.useFakeFullscreen;\n            }\n\n            if (viewerConfig.useWindowAsViewport) {\n                // fake fullscreen mode is redundant if the window is used as\n                // the viewport, so turn it off\n                useFakeFullscreen = false;\n                el = document.documentElement;\n                $el = $(el);\n            } else {\n                if (config.element) {\n                    $el = $(config.element);\n                } else {\n                    $el = viewerConfig.$el;\n                }\n                el = $el[0];\n            }\n\n            // init browser-specific request/cancel fullscreen methods\n            requestFullscreen = el.requestFullScreen ||\n                                el.requestFullscreen ||\n                                el.mozRequestFullScreen ||\n                                el.webkitRequestFullScreen ||\n                                el.msRequestFullscreen ||\n                                fakeRequestFullscreen;\n\n            // fullscreen APIs are completely insane\n            cancelFullscreen =  document.cancelFullScreen ||\n                                document.exitFullscreen ||\n                                document.mozCancelFullScreen ||\n                                document.webkitCancelFullScreen ||\n                                document.msExitFullscreen ||\n                                fakeCancelFullscreen;\n\n            // add enter/exit fullscreen methods to the viewer API\n            util.extend(viewerAPI, {\n                enterFullscreen: enterFullscreen,\n                exitFullscreen: exitFullscreen,\n                isFullscreen: isFullscreen,\n                isFullscreenSupported: isNativeFullscreenSupported\n            });\n\n            $(document).on(FULLSCREENCHANGE_EVENT, fullscreenchangeHandler);\n        },\n\n        /**\n         * Destroy the fullscreen plugin\n         * @returns {void}\n         */\n        destroy: function () {\n            viewerAPI.exitFullscreen();\n            $(document).off(FULLSCREENCHANGE_EVENT, fullscreenchangeHandler);\n        }\n    };\n});\n"],"sourceRoot":"/source/"}