{"version":3,"sources":["bootbox.js"],"names":["window","bootbox","init","$","undefined","_t","key","locale","locales","defaults","en","processCallback","e","dialog","callback","preventDefault","preserveDialog","isFunction","modal","getKeyLength","obj","k","t","each","collection","iterator","index","value","sanitize","options","buttons","total","Error","message","extend","backdrop","button","type","label","className","mapArguments","args","properties","argn","length","mergeArguments","mergeDialogOptions","labels","baseOptions","createLabels","apply","validateButtons","i","j","arguments","argument","toLowerCase","toUpperCase","allowedButtons","join","templates","header","footer","closeButton","form","inputs","text","email","select","checkbox","appendTo","animate","show","exports","alert","ok","onEscape","confirm","cancel","prompt","input","shouldShow","inputOptions","inputType","val","checkedItems","find","_","item","push","title","groups","option","elem","group","attr","append","values","isArray","prop","placeholder","on","click","off","focus","body","buttonStr","callbacks","html","addClass","before","prepend","css","prependTo","after","target","this","remove","callbackKey","data","which","trigger","keyboard","setDefaults","hideAll","br","OK","CANCEL","CONFIRM","da","de","es","fi","fr","it","nl","no","pl","ru","zh_CN","zh_TW","_$","jQuery"],"mappings":"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","file":"bootbox.js","sourcesContent":["/**\n * bootbox.js [v4.1.0]\n *\n * http://bootboxjs.com/license.txt\n */\n// @see https://github.com/makeusabrew/bootbox/issues/71\nwindow.bootbox = window.bootbox || (function init($, undefined) {\n  \"use strict\";\n\n  // the base DOM structure needed to create a modal\n  var templates = {\n    dialog:\n      \"<div class='bootbox modal' tabindex='-1' role='dialog'>\" +\n        \"<div class='modal-dialog'>\" +\n          \"<div class='modal-content'>\" +\n            \"<div class='modal-body'><div class='bootbox-body'></div></div>\" +\n          \"</div>\" +\n        \"</div>\" +\n      \"</div>\",\n    header:\n      \"<div class='modal-header'>\" +\n        \"<h4 class='modal-title'></h4>\" +\n      \"</div>\",\n    footer:\n      \"<div class='modal-footer'></div>\",\n    closeButton:\n      \"<button type='button' class='bootbox-close-button close'>&times;</button>\",\n    form:\n      \"<form class='bootbox-form'></form>\",\n    inputs: {\n      text:\n        \"<input class='bootbox-input bootbox-input-text form-control' autocomplete=off type=text />\",\n      email:\n        \"<input class='bootbox-input bootbox-input-email form-control' autocomplete='off' type='email' />\",\n      select:\n        \"<select class='bootbox-input bootbox-input-select form-control'></select>\",\n      checkbox:\n        \"<div class='checkbox'><label><input class='bootbox-input bootbox-input-checkbox' type='checkbox' /></label></div>\"\n    }\n  };\n\n  // cache a reference to the jQueryfied body element\n  var appendTo = $(\"body\");\n\n  var defaults = {\n    // default language\n    locale: \"en\",\n    // show backdrop or not\n    backdrop: true,\n    // animate the modal in/out\n    animate: true,\n    // additional class string applied to the top level dialog\n    className: null,\n    // whether or not to include a close button\n    closeButton: true,\n    // show the dialog immediately by default\n    show: true\n  };\n\n  // our public object; augmented after our private API\n  var exports = {};\n\n  /**\n   * @private\n   */\n  function _t(key) {\n    var locale = locales[defaults.locale];\n    return locale ? locale[key] : locales.en[key];\n  }\n\n  function processCallback(e, dialog, callback) {\n    e.preventDefault();\n\n    // by default we assume a callback will get rid of the dialog,\n    // although it is given the opportunity to override this\n\n    // so, if the callback can be invoked and it *explicitly returns false*\n    // then we'll set a flag to keep the dialog active...\n    var preserveDialog = $.isFunction(callback) && callback(e) === false;\n\n    // ... otherwise we'll bin it\n    if (!preserveDialog) {\n      dialog.modal(\"hide\");\n    }\n  }\n\n  function getKeyLength(obj) {\n    // @TODO defer to Object.keys(x).length if available?\n    var k, t = 0;\n    for (k in obj) {\n      t ++;\n    }\n    return t;\n  }\n\n  function each(collection, iterator) {\n    var index = 0;\n    $.each(collection, function(key, value) {\n      iterator(key, value, index++);\n    });\n  }\n\n  function sanitize(options) {\n    var buttons;\n    var total;\n\n    if (typeof options !== \"object\") {\n      throw new Error(\"Please supply an object of options\");\n    }\n\n    if (!options.message) {\n      throw new Error(\"Please specify a message\");\n    }\n\n    // make sure any supplied options take precedence over defaults\n    options = $.extend({}, defaults, options);\n\n    if (!options.buttons) {\n      options.buttons = {};\n    }\n\n    // we only support Bootstrap's \"static\" and false backdrop args\n    // supporting true would mean you could dismiss the dialog without\n    // explicitly interacting with it\n    options.backdrop = options.backdrop ? \"static\" : false;\n\n    buttons = options.buttons;\n\n    total = getKeyLength(buttons);\n\n    each(buttons, function(key, button, index) {\n\n      if ($.isFunction(button)) {\n        // short form, assume value is our callback. Since button\n        // isn't an object it isn't a reference either so re-assign it\n        button = buttons[key] = {\n          callback: button\n        };\n      }\n\n      // before any further checks make sure by now button is the correct type\n      if ($.type(button) !== \"object\") {\n        throw new Error(\"button with key \" + key + \" must be an object\");\n      }\n\n      if (!button.label) {\n        // the lack of an explicit label means we'll assume the key is good enough\n        button.label = key;\n      }\n\n      if (!button.className) {\n        if (total <= 2 && index === total-1) {\n          // always add a primary to the main option in a two-button dialog\n          button.className = \"btn-primary\";\n        } else {\n          button.className = \"btn-default\";\n        }\n      }\n    });\n\n    return options;\n  }\n\n  /**\n   * map a flexible set of arguments into a single returned object\n   * if args.length is already one just return it, otherwise\n   * use the properties argument to map the unnamed args to\n   * object properties\n   * so in the latter case:\n   * mapArguments([\"foo\", $.noop], [\"message\", \"callback\"])\n   * -> { message: \"foo\", callback: $.noop }\n   */\n  function mapArguments(args, properties) {\n    var argn = args.length;\n    var options = {};\n\n    if (argn < 1 || argn > 2) {\n      throw new Error(\"Invalid argument length\");\n    }\n\n    if (argn === 2 || typeof args[0] === \"string\") {\n      options[properties[0]] = args[0];\n      options[properties[1]] = args[1];\n    } else {\n      options = args[0];\n    }\n\n    return options;\n  }\n\n  /**\n   * merge a set of default dialog options with user supplied arguments\n   */\n  function mergeArguments(defaults, args, properties) {\n    return $.extend(\n      // deep merge\n      true,\n      // ensure the target is an empty, unreferenced object\n      {},\n      // the base options object for this type of dialog (often just buttons)\n      defaults,\n      // args could be an object or array; if it's an array properties will\n      // map it to a proper options object\n      mapArguments(\n        args,\n        properties\n      )\n    );\n  }\n\n  /**\n   * this entry-level method makes heavy use of composition to take a simple\n   * range of inputs and return valid options suitable for passing to bootbox.dialog\n   */\n  function mergeDialogOptions(className, labels, properties, args) {\n    //  build up a base set of dialog properties\n    var baseOptions = {\n      className: \"bootbox-\" + className,\n      buttons: createLabels.apply(null, labels)\n    };\n\n    // ensure the buttons properties generated, *after* merging\n    // with user args are still valid against the supplied labels\n    return validateButtons(\n      // merge the generated base properties with user supplied arguments\n      mergeArguments(\n        baseOptions,\n        args,\n        // if args.length > 1, properties specify how each arg maps to an object key\n        properties\n      ),\n      labels\n    );\n  }\n\n  /**\n   * from a given list of arguments return a suitable object of button labels\n   * all this does is normalise the given labels and translate them where possible\n   * e.g. \"ok\", \"confirm\" -> { ok: \"OK, cancel: \"Annuleren\" }\n   */\n  function createLabels() {\n    var buttons = {};\n\n    for (var i = 0, j = arguments.length; i < j; i++) {\n      var argument = arguments[i];\n      var key = argument.toLowerCase();\n      var value = argument.toUpperCase();\n\n      buttons[key] = {\n        label: _t(value)\n      };\n    }\n\n    return buttons;\n  }\n\n  function validateButtons(options, buttons) {\n    var allowedButtons = {};\n    each(buttons, function(key, value) {\n      allowedButtons[value] = true;\n    });\n\n    each(options.buttons, function(key) {\n      if (allowedButtons[key] === undefined) {\n        throw new Error(\"button key \" + key + \" is not allowed (options are \" + buttons.join(\"\\n\") + \")\");\n      }\n    });\n\n    return options;\n  }\n\n  exports.alert = function() {\n    var options;\n\n    options = mergeDialogOptions(\"alert\", [\"ok\"], [\"message\", \"callback\"], arguments);\n\n    if (options.callback && !$.isFunction(options.callback)) {\n      throw new Error(\"alert requires callback property to be a function when provided\");\n    }\n\n    /**\n     * overrides\n     */\n    options.buttons.ok.callback = options.onEscape = function() {\n      if ($.isFunction(options.callback)) {\n        return options.callback();\n      }\n      return true;\n    };\n\n    return exports.dialog(options);\n  };\n\n  exports.confirm = function() {\n    var options;\n\n    options = mergeDialogOptions(\"confirm\", [\"cancel\", \"confirm\"], [\"message\", \"callback\"], arguments);\n\n    /**\n     * overrides; undo anything the user tried to set they shouldn't have\n     */\n    options.buttons.cancel.callback = options.onEscape = function() {\n      return options.callback(false);\n    };\n\n    options.buttons.confirm.callback = function() {\n      return options.callback(true);\n    };\n\n    // confirm specific validation\n    if (!$.isFunction(options.callback)) {\n      throw new Error(\"confirm requires a callback\");\n    }\n\n    return exports.dialog(options);\n  };\n\n  exports.prompt = function() {\n    var options;\n    var defaults;\n    var dialog;\n    var form;\n    var input;\n    var shouldShow;\n    var inputOptions;\n\n    // we have to create our form first otherwise\n    // its value is undefined when gearing up our options\n    // @TODO this could be solved by allowing message to\n    // be a function instead...\n    form = $(templates.form);\n\n    // prompt defaults are more complex than others in that\n    // users can override more defaults\n    // @TODO I don't like that prompt has to do a lot of heavy\n    // lifting which mergeDialogOptions can *almost* support already\n    // just because of 'value' and 'inputType' - can we refactor?\n    defaults = {\n      className: \"bootbox-prompt\",\n      buttons: createLabels(\"cancel\", \"confirm\"),\n      value: \"\",\n      inputType: \"text\"\n    };\n\n    options = validateButtons(\n      mergeArguments(defaults, arguments, [\"title\", \"callback\"]),\n      [\"cancel\", \"confirm\"]\n    );\n\n    // capture the user's show value; we always set this to false before\n    // spawning the dialog to give us a chance to attach some handlers to\n    // it, but we need to make sure we respect a preference not to show it\n    shouldShow = (options.show === undefined) ? true : options.show;\n\n    /**\n     * overrides; undo anything the user tried to set they shouldn't have\n     */\n    options.message = form;\n\n    options.buttons.cancel.callback = options.onEscape = function() {\n      return options.callback(null);\n    };\n\n    options.buttons.confirm.callback = function() {\n      var value;\n\n      switch (options.inputType) {\n        case \"text\":\n        case \"email\":\n        case \"select\":\n          value = input.val();\n          break;\n\n        case \"checkbox\":\n          var checkedItems = input.find(\"input:checked\");\n\n          // we assume that checkboxes are always multiple,\n          // hence we default to an empty array\n          value = [];\n\n          each(checkedItems, function(_, item) {\n            value.push($(item).val());\n          });\n          break;\n      }\n\n      return options.callback(value);\n    };\n\n    options.show = false;\n\n    // prompt specific validation\n    if (!options.title) {\n      throw new Error(\"prompt requires a title\");\n    }\n\n    if (!$.isFunction(options.callback)) {\n      throw new Error(\"prompt requires a callback\");\n    }\n\n    if (!templates.inputs[options.inputType]) {\n      throw new Error(\"invalid prompt type\");\n    }\n\n    // create the input based on the supplied type\n    input = $(templates.inputs[options.inputType]);\n\n    switch (options.inputType) {\n      case \"text\":\n      case \"email\":\n        input.val(options.value);\n        break;\n\n      case \"select\":\n        var groups = {};\n        inputOptions = options.inputOptions || [];\n\n        if (!inputOptions.length) {\n          throw new Error(\"prompt with select requires options\");\n        }\n\n        each(inputOptions, function(_, option) {\n\n          // assume the element to attach to is the input...\n          var elem = input;\n\n          if (option.value === undefined || option.text === undefined) {\n            throw new Error(\"given options in wrong format\");\n          }\n\n\n          // ... but override that element if this option sits in a group\n\n          if (option.group) {\n            // initialise group if necessary\n            if (!groups[option.group]) {\n              groups[option.group] = $(\"<optgroup/>\").attr(\"label\", option.group);\n            }\n\n            elem = groups[option.group];\n          }\n\n          elem.append(\"<option value='\" + option.value + \"'>\" + option.text + \"</option>\");\n        });\n\n        each(groups, function(_, group) {\n          input.append(group);\n        });\n\n        // safe to set a select's value as per a normal input\n        input.val(options.value);\n        break;\n\n      case \"checkbox\":\n        var values   = $.isArray(options.value) ? options.value : [options.value];\n        inputOptions = options.inputOptions || [];\n\n        if (!inputOptions.length) {\n          throw new Error(\"prompt with checkbox requires options\");\n        }\n\n        if (!inputOptions[0].value || !inputOptions[0].text) {\n          throw new Error(\"given options in wrong format\");\n        }\n\n        // checkboxes have to nest within a containing element, so\n        // they break the rules a bit and we end up re-assigning\n        // our 'input' element to this container instead\n        input = $(\"<div/>\");\n\n        each(inputOptions, function(_, option) {\n          var checkbox = $(templates.inputs[options.inputType]);\n\n          checkbox.find(\"input\").attr(\"value\", option.value);\n          checkbox.find(\"label\").append(option.text);\n\n          // we've ensured values is an array so we can always iterate over it\n          each(values, function(_, value) {\n            if (value === option.value) {\n              checkbox.find(\"input\").prop(\"checked\", true);\n            }\n          });\n\n          input.append(checkbox);\n        });\n        break;\n    }\n\n    if (options.placeholder) {\n      input.attr(\"placeholder\", options.placeholder);\n    }\n\n    // now place it in our form\n    form.append(input);\n\n    form.on(\"submit\", function(e) {\n      e.preventDefault();\n      // @TODO can we actually click *the* button object instead?\n      // e.g. buttons.confirm.click() or similar\n      dialog.find(\".btn-primary\").click();\n    });\n\n    dialog = exports.dialog(options);\n\n    // clear the existing handler focusing the submit button...\n    dialog.off(\"shown.bs.modal\");\n\n    // ...and replace it with one focusing our input, if possible\n    dialog.on(\"shown.bs.modal\", function() {\n      input.focus();\n    });\n\n    if (shouldShow === true) {\n      dialog.modal(\"show\");\n    }\n\n    return dialog;\n  };\n\n  exports.dialog = function(options) {\n    options = sanitize(options);\n\n    var dialog = $(templates.dialog);\n    var body = dialog.find(\".modal-body\");\n    var buttons = options.buttons;\n    var buttonStr = \"\";\n    var callbacks = {\n      onEscape: options.onEscape\n    };\n\n    each(buttons, function(key, button) {\n\n      // @TODO I don't like this string appending to itself; bit dirty. Needs reworking\n      // can we just build up button elements instead? slower but neater. Then button\n      // can just become a template too\n      buttonStr += \"<button data-bb-handler='\" + key + \"' type='button' class='btn \" + button.className + \"'>\" + button.label + \"</button>\";\n      callbacks[key] = button.callback;\n    });\n\n    body.find(\".bootbox-body\").html(options.message);\n\n    if (options.animate === true) {\n      dialog.addClass(\"fade\");\n    }\n\n    if (options.className) {\n      dialog.addClass(options.className);\n    }\n\n    if (options.title) {\n      body.before(templates.header);\n    }\n\n    if (options.closeButton) {\n      var closeButton = $(templates.closeButton);\n\n      if (options.title) {\n        dialog.find(\".modal-header\").prepend(closeButton);\n      } else {\n        closeButton.css(\"margin-top\", \"-10px\").prependTo(body);\n      }\n    }\n\n    if (options.title) {\n      dialog.find(\".modal-title\").html(options.title);\n    }\n\n    if (buttonStr.length) {\n      body.after(templates.footer);\n      dialog.find(\".modal-footer\").html(buttonStr);\n    }\n\n\n    /**\n     * Bootstrap event listeners; used handle extra\n     * setup & teardown required after the underlying\n     * modal has performed certain actions\n     */\n\n    dialog.on(\"hidden.bs.modal\", function(e) {\n      // ensure we don't accidentally intercept hidden events triggered\n      // by children of the current dialog. We shouldn't anymore now BS\n      // namespaces its events; but still worth doing\n      if (e.target === this) {\n        dialog.remove();\n      }\n    });\n\n    /*\n    dialog.on(\"show.bs.modal\", function() {\n      // sadly this doesn't work; show is called *just* before\n      // the backdrop is added so we'd need a setTimeout hack or\n      // otherwise... leaving in as would be nice\n      if (options.backdrop) {\n        dialog.next(\".modal-backdrop\").addClass(\"bootbox-backdrop\");\n      }\n    });\n    */\n\n    dialog.on(\"shown.bs.modal\", function() {\n      dialog.find(\".btn-primary:first\").focus();\n    });\n\n    /**\n     * Bootbox event listeners; experimental and may not last\n     * just an attempt to decouple some behaviours from their\n     * respective triggers\n     */\n\n    dialog.on(\"escape.close.bb\", function(e) {\n      if (callbacks.onEscape) {\n        processCallback(e, dialog, callbacks.onEscape);\n      }\n    });\n\n    /**\n     * Standard jQuery event listeners; used to handle user\n     * interaction with our dialog\n     */\n\n    dialog.on(\"click\", \".modal-footer button\", function(e) {\n      var callbackKey = $(this).data(\"bb-handler\");\n\n      processCallback(e, dialog, callbacks[callbackKey]);\n\n    });\n\n    dialog.on(\"click\", \".bootbox-close-button\", function(e) {\n      // onEscape might be falsy but that's fine; the fact is\n      // if the user has managed to click the close button we\n      // have to close the dialog, callback or not\n      processCallback(e, dialog, callbacks.onEscape);\n    });\n\n    dialog.on(\"keyup\", function(e) {\n      if (e.which === 27) {\n        dialog.trigger(\"escape.close.bb\");\n      }\n    });\n\n    // the remainder of this method simply deals with adding our\n    // dialogent to the DOM, augmenting it with Bootstrap's modal\n    // functionality and then giving the resulting object back\n    // to our caller\n\n    appendTo.append(dialog);\n\n    dialog.modal({\n      backdrop: options.backdrop,\n      keyboard: false,\n      show: false\n    });\n\n    if (options.show) {\n      dialog.modal(\"show\");\n    }\n\n    // @TODO should we return the raw element here or should\n    // we wrap it in an object on which we can expose some neater\n    // methods, e.g. var d = bootbox.alert(); d.hide(); instead\n    // of d.modal(\"hide\");\n\n   /*\n    function BBDialog(elem) {\n      this.elem = elem;\n    }\n\n    BBDialog.prototype = {\n      hide: function() {\n        return this.elem.modal(\"hide\");\n      },\n      show: function() {\n        return this.elem.modal(\"show\");\n      }\n    };\n    */\n\n    return dialog;\n\n  };\n\n  exports.setDefaults = function() {\n    var values = {};\n\n    if (arguments.length === 2) {\n      // allow passing of single key/value...\n      values[arguments[0]] = arguments[1];\n    } else {\n      // ... and as an object too\n      values = arguments[0];\n    }\n\n    $.extend(defaults, values);\n  };\n\n  exports.hideAll = function() {\n    $(\".bootbox\").modal(\"hide\");\n  };\n\n\n  /**\n   * standard locales. Please add more according to ISO 639-1 standard. Multiple language variants are\n   * unlikely to be required. If this gets too large it can be split out into separate JS files.\n   */\n  var locales = {\n    br : {\n      OK      : \"OK\",\n      CANCEL  : \"Cancelar\",\n      CONFIRM : \"Sim\"\n    },\n    da : {\n      OK      : \"OK\",\n      CANCEL  : \"Annuller\",\n      CONFIRM : \"Accepter\"\n    },\n    de : {\n      OK      : \"OK\",\n      CANCEL  : \"Abbrechen\",\n      CONFIRM : \"Akzeptieren\"\n    },\n    en : {\n      OK      : \"OK\",\n      CANCEL  : \"Cancel\",\n      CONFIRM : \"OK\"\n    },\n    es : {\n      OK      : \"OK\",\n      CANCEL  : \"Cancelar\",\n      CONFIRM : \"Aceptar\"\n    },\n    fi : {\n      OK      : \"OK\",\n      CANCEL  : \"Peruuta\",\n      CONFIRM : \"OK\"\n    },\n    fr : {\n      OK      : \"OK\",\n      CANCEL  : \"Annuler\",\n      CONFIRM : \"D'accord\"\n    },\n    it : {\n      OK      : \"OK\",\n      CANCEL  : \"Annulla\",\n      CONFIRM : \"Conferma\"\n    },\n    nl : {\n      OK      : \"OK\",\n      CANCEL  : \"Annuleren\",\n      CONFIRM : \"Accepteren\"\n    },\n    no : {\n      OK      : \"OK\",\n      CANCEL  : \"Avbryt\",\n      CONFIRM : \"OK\"\n    },\n    pl : {\n      OK      : \"OK\",\n      CANCEL  : \"Anuluj\",\n      CONFIRM : \"Potwierdź\"\n    },\n    ru : {\n      OK      : \"OK\",\n      CANCEL  : \"Отмена\",\n      CONFIRM : \"Применить\"\n    },\n    zh_CN : {\n      OK      : \"OK\",\n      CANCEL  : \"取消\",\n      CONFIRM : \"确认\"\n    },\n    zh_TW : {\n      OK      : \"OK\",\n      CANCEL  : \"取消\",\n      CONFIRM : \"確認\"\n    }\n  };\n\n  exports.init = function(_$) {\n    window.bootbox = init(_$ || $);\n  };\n\n  return exports;\n\n}(window.jQuery));\n"],"sourceRoot":"/source/"}