{"version":3,"file":"sugar.min.js","sources":["sugar.js"],"sourcesContent":["/*\n *  Sugar v2.0.4\n *\n *  Freely distributable and licensed under the MIT-style license.\n *  Copyright (c) Andrew Plummer\n *  https://sugarjs.com/\n *\n * ---------------------------- */\n(function() {\n    'use strict';\n  \n    /***\n     * @module Core\n     * @description Core functionality including the ability to define methods and\n     *              extend onto natives.\n     *\n     ***/\n  \n    // The global to export.\n    var Sugar;\n  \n    // The name of Sugar in the global namespace.\n    var SUGAR_GLOBAL = 'Sugar';\n  \n    // Natives available on initialization. Letting Object go first to ensure its\n    // global is set by the time the rest are checking for chainable Object methods.\n    var NATIVE_NAMES = 'Object Number String Array Date RegExp Function';\n  \n    // Static method flag\n    var STATIC   = 0x1;\n  \n    // Instance method flag\n    var INSTANCE = 0x2;\n  \n    // IE8 has a broken defineProperty but no defineProperties so this saves a try/catch.\n    var PROPERTY_DESCRIPTOR_SUPPORT = !!(Object.defineProperty && Object.defineProperties);\n  \n    // The global context. Rhino uses a different \"global\" keyword so\n    // do an extra check to be sure that it's actually the global context.\n    var globalContext = typeof global !== 'undefined' && global.Object === Object ? global : this;\n  \n    // Is the environment node?\n    var hasExports = typeof module !== 'undefined' && module.exports;\n  \n    // Whether object instance methods can be mapped to the prototype.\n    var allowObjectPrototype = false;\n  \n    // A map from Array to SugarArray.\n    var namespacesByName = {};\n  \n    // A map from [object Object] to namespace.\n    var namespacesByClassString = {};\n  \n    // Defining properties.\n    var defineProperty = PROPERTY_DESCRIPTOR_SUPPORT ?  Object.defineProperty : definePropertyShim;\n  \n    // A default chainable class for unknown types.\n    var DefaultChainable = getNewChainableClass('Chainable');\n  \n  \n    // Global methods\n  \n    function setupGlobal() {\n      Sugar = globalContext[SUGAR_GLOBAL];\n      if (Sugar) {\n        // Reuse already defined Sugar global object.\n        return;\n      }\n      Sugar = function(arg) {\n        forEachProperty(Sugar, function(sugarNamespace, name) {\n          // Although only the only enumerable properties on the global\n          // object are Sugar namespaces, environments that can't set\n          // non-enumerable properties will step through the utility methods\n          // as well here, so use this check to only allow true namespaces.\n          if (hasOwn(namespacesByName, name)) {\n            sugarNamespace.extend(arg);\n          }\n        });\n        return Sugar;\n      };\n      if (hasExports) {\n        module.exports = Sugar;\n      } else {\n        try {\n          globalContext[SUGAR_GLOBAL] = Sugar;\n        } catch (e) {\n          // Contexts such as QML have a read-only global context.\n        }\n      }\n      forEachProperty(NATIVE_NAMES.split(' '), function(name) {\n        createNamespace(name);\n      });\n      setGlobalProperties();\n    }\n  \n    /***\n     * @method createNamespace(name)\n     * @returns SugarNamespace\n     * @namespace Sugar\n     * @short Creates a new Sugar namespace.\n     * @extra This method is for plugin developers who want to define methods to be\n     *        used with natives that Sugar does not handle by default. The new\n     *        namespace will appear on the `Sugar` global with all the methods of\n     *        normal namespaces, including the ability to define new methods. When\n     *        extended, any defined methods will be mapped to `name` in the global\n     *        context.\n     *\n     * @example\n     *\n     *   Sugar.createNamespace('Boolean');\n     *\n     * @param {string} name - The namespace name.\n     *\n     ***/\n    function createNamespace(name) {\n  \n      // Is the current namespace Object?\n      var isObject = name === 'Object';\n  \n      // A Sugar namespace is also a chainable class: Sugar.Array, etc.\n      var sugarNamespace = getNewChainableClass(name, true);\n  \n      /***\n       * @method extend([opts])\n       * @returns Sugar\n       * @namespace Sugar\n       * @short Extends Sugar defined methods onto natives.\n       * @extra This method can be called on individual namespaces like\n       *        `Sugar.Array` or on the `Sugar` global itself, in which case\n       *        [opts] will be forwarded to each `extend` call. For more,\n       *        see `extending`.\n       *\n       * @options\n       *\n       *   methods           An array of method names to explicitly extend.\n       *\n       *   except            An array of method names or global namespaces (`Array`,\n       *                     `String`) to explicitly exclude. Namespaces should be the\n       *                     actual global objects, not strings.\n       *\n       *   namespaces        An array of global namespaces (`Array`, `String`) to\n       *                     explicitly extend. Namespaces should be the actual\n       *                     global objects, not strings.\n       *\n       *   enhance           A shortcut to disallow all \"enhance\" flags at once\n       *                     (flags listed below). For more, see `enhanced methods`.\n       *                     Default is `true`.\n       *\n       *   enhanceString     A boolean allowing String enhancements. Default is `true`.\n       *\n       *   enhanceArray      A boolean allowing Array enhancements. Default is `true`.\n       *\n       *   objectPrototype   A boolean allowing Sugar to extend Object.prototype\n       *                     with instance methods. This option is off by default\n       *                     and should generally not be used except with caution.\n       *                     For more, see `object methods`.\n       *\n       * @example\n       *\n       *   Sugar.Array.extend();\n       *   Sugar.extend();\n       *\n       * @option {Array<string>} [methods]\n       * @option {Array<string|NativeConstructor>} [except]\n       * @option {Array<NativeConstructor>} [namespaces]\n       * @option {boolean} [enhance]\n       * @option {boolean} [enhanceString]\n       * @option {boolean} [enhanceArray]\n       * @option {boolean} [objectPrototype]\n       * @param {ExtendOptions} [opts]\n       *\n       ***\n       * @method extend([opts])\n       * @returns SugarNamespace\n       * @namespace SugarNamespace\n       * @short Extends Sugar defined methods for a specific namespace onto natives.\n       * @param {ExtendOptions} [opts]\n       *\n       ***/\n      var extend = function (opts) {\n  \n        var nativeClass = globalContext[name], nativeProto = nativeClass.prototype;\n        var staticMethods = {}, instanceMethods = {}, methodsByName;\n  \n        function objectRestricted(name, target) {\n          return isObject && target === nativeProto &&\n                 (!allowObjectPrototype || name === 'get' || name === 'set');\n        }\n  \n        function arrayOptionExists(field, val) {\n          var arr = opts[field];\n          if (arr) {\n            for (var i = 0, el; el = arr[i]; i++) {\n              if (el === val) {\n                return true;\n              }\n            }\n          }\n          return false;\n        }\n  \n        function arrayOptionExcludes(field, val) {\n          return opts[field] && !arrayOptionExists(field, val);\n        }\n  \n        function disallowedByFlags(methodName, target, flags) {\n          // Disallowing methods by flag currently only applies if methods already\n          // exist to avoid enhancing native methods, as aliases should still be\n          // extended (i.e. Array#all should still be extended even if Array#every\n          // is being disallowed by a flag).\n          if (!target[methodName] || !flags) {\n            return false;\n          }\n          for (var i = 0; i < flags.length; i++) {\n            if (opts[flags[i]] === false) {\n              return true;\n            }\n          }\n        }\n  \n        function namespaceIsExcepted() {\n          return arrayOptionExists('except', nativeClass) ||\n                 arrayOptionExcludes('namespaces', nativeClass);\n        }\n  \n        function methodIsExcepted(methodName) {\n          return arrayOptionExists('except', methodName);\n        }\n  \n        function canExtend(methodName, method, target) {\n          return !objectRestricted(methodName, target) &&\n                 !disallowedByFlags(methodName, target, method.flags) &&\n                 !methodIsExcepted(methodName);\n        }\n  \n        opts = opts || {};\n        methodsByName = opts.methods;\n  \n        if (namespaceIsExcepted()) {\n          return;\n        } else if (isObject && typeof opts.objectPrototype === 'boolean') {\n          // Store \"objectPrototype\" flag for future reference.\n          allowObjectPrototype = opts.objectPrototype;\n        }\n  \n        forEachProperty(methodsByName || sugarNamespace, function(method, methodName) {\n          if (methodsByName) {\n            // If we have method names passed in an array,\n            // then we need to flip the key and value here\n            // and find the method in the Sugar namespace.\n            methodName = method;\n            method = sugarNamespace[methodName];\n          }\n          if (hasOwn(method, 'instance') && canExtend(methodName, method, nativeProto)) {\n            instanceMethods[methodName] = method.instance;\n          }\n          if(hasOwn(method, 'static') && canExtend(methodName, method, nativeClass)) {\n            staticMethods[methodName] = method;\n          }\n        });\n  \n        // Accessing the extend target each time instead of holding a reference as\n        // it may have been overwritten (for example Date by Sinon). Also need to\n        // access through the global to allow extension of user-defined namespaces.\n        extendNative(nativeClass, staticMethods);\n        extendNative(nativeProto, instanceMethods);\n  \n        if (!methodsByName) {\n          // If there are no method names passed, then\n          // all methods in the namespace will be extended\n          // to the native. This includes all future defined\n          // methods, so add a flag here to check later.\n          setProperty(sugarNamespace, 'active', true);\n        }\n        return sugarNamespace;\n      };\n  \n      function defineWithOptionCollect(methodName, instance, args) {\n        setProperty(sugarNamespace, methodName, function(arg1, arg2, arg3) {\n          var opts = collectDefineOptions(arg1, arg2, arg3);\n          defineMethods(sugarNamespace, opts.methods, instance, args, opts.last);\n          return sugarNamespace;\n        });\n      }\n  \n      /***\n       * @method defineStatic(methods)\n       * @returns SugarNamespace\n       * @namespace SugarNamespace\n       * @short Defines static methods on the namespace that can later be extended\n       *        onto the native globals.\n       * @extra Accepts either a single object mapping names to functions, or name\n       *        and function as two arguments. If `extend` was previously called\n       *        with no arguments, the method will be immediately mapped to its\n       *        native when defined.\n       *\n       * @example\n       *\n       *   Sugar.Number.defineStatic({\n       *     isOdd: function (num) {\n       *       return num % 2 === 1;\n       *     }\n       *   });\n       *\n       * @signature defineStatic(methodName, methodFn)\n       * @param {Object} methods - Methods to be defined.\n       * @param {string} methodName - Name of a single method to be defined.\n       * @param {Function} methodFn - Function body of a single method to be defined.\n       ***/\n      defineWithOptionCollect('defineStatic', STATIC);\n  \n      /***\n       * @method defineInstance(methods)\n       * @returns SugarNamespace\n       * @namespace SugarNamespace\n       * @short Defines methods on the namespace that can later be extended as\n       *        instance methods onto the native prototype.\n       * @extra Accepts either a single object mapping names to functions, or name\n       *        and function as two arguments. All functions should accept the\n       *        native for which they are mapped as their first argument, and should\n       *        never refer to `this`. If `extend` was previously called with no\n       *        arguments, the method will be immediately mapped to its native when\n       *        defined.\n       *\n       *        Methods cannot accept more than 4 arguments in addition to the\n       *        native (5 arguments total). Any additional arguments will not be\n       *        mapped. If the method needs to accept unlimited arguments, use\n       *        `defineInstanceWithArguments`. Otherwise if more options are\n       *        required, use an options object instead.\n       *\n       * @example\n       *\n       *   Sugar.Number.defineInstance({\n       *     square: function (num) {\n       *       return num * num;\n       *     }\n       *   });\n       *\n       * @signature defineInstance(methodName, methodFn)\n       * @param {Object} methods - Methods to be defined.\n       * @param {string} methodName - Name of a single method to be defined.\n       * @param {Function} methodFn - Function body of a single method to be defined.\n       ***/\n      defineWithOptionCollect('defineInstance', INSTANCE);\n  \n      /***\n       * @method defineInstanceAndStatic(methods)\n       * @returns SugarNamespace\n       * @namespace SugarNamespace\n       * @short A shortcut to define both static and instance methods on the namespace.\n       * @extra This method is intended for use with `Object` instance methods. Sugar\n       *        will not map any methods to `Object.prototype` by default, so defining\n       *        instance methods as static helps facilitate their proper use.\n       *\n       * @example\n       *\n       *   Sugar.Object.defineInstanceAndStatic({\n       *     isAwesome: function (obj) {\n       *       // check if obj is awesome!\n       *     }\n       *   });\n       *\n       * @signature defineInstanceAndStatic(methodName, methodFn)\n       * @param {Object} methods - Methods to be defined.\n       * @param {string} methodName - Name of a single method to be defined.\n       * @param {Function} methodFn - Function body of a single method to be defined.\n       ***/\n      defineWithOptionCollect('defineInstanceAndStatic', INSTANCE | STATIC);\n  \n  \n      /***\n       * @method defineStaticWithArguments(methods)\n       * @returns SugarNamespace\n       * @namespace SugarNamespace\n       * @short Defines static methods that collect arguments.\n       * @extra This method is identical to `defineStatic`, except that when defined\n       *        methods are called, they will collect any arguments past `n - 1`,\n       *        where `n` is the number of arguments that the method accepts.\n       *        Collected arguments will be passed to the method in an array\n       *        as the last argument defined on the function.\n       *\n       * @example\n       *\n       *   Sugar.Number.defineStaticWithArguments({\n       *     addAll: function (num, args) {\n       *       for (var i = 0; i < args.length; i++) {\n       *         num += args[i];\n       *       }\n       *       return num;\n       *     }\n       *   });\n       *\n       * @signature defineStaticWithArguments(methodName, methodFn)\n       * @param {Object} methods - Methods to be defined.\n       * @param {string} methodName - Name of a single method to be defined.\n       * @param {Function} methodFn - Function body of a single method to be defined.\n       ***/\n      defineWithOptionCollect('defineStaticWithArguments', STATIC, true);\n  \n      /***\n       * @method defineInstanceWithArguments(methods)\n       * @returns SugarNamespace\n       * @namespace SugarNamespace\n       * @short Defines instance methods that collect arguments.\n       * @extra This method is identical to `defineInstance`, except that when\n       *        defined methods are called, they will collect any arguments past\n       *        `n - 1`, where `n` is the number of arguments that the method\n       *        accepts. Collected arguments will be passed to the method as the\n       *        last argument defined on the function.\n       *\n       * @example\n       *\n       *   Sugar.Number.defineInstanceWithArguments({\n       *     addAll: function (num, args) {\n       *       for (var i = 0; i < args.length; i++) {\n       *         num += args[i];\n       *       }\n       *       return num;\n       *     }\n       *   });\n       *\n       * @signature defineInstanceWithArguments(methodName, methodFn)\n       * @param {Object} methods - Methods to be defined.\n       * @param {string} methodName - Name of a single method to be defined.\n       * @param {Function} methodFn - Function body of a single method to be defined.\n       ***/\n      defineWithOptionCollect('defineInstanceWithArguments', INSTANCE, true);\n  \n      /***\n       * @method defineStaticPolyfill(methods)\n       * @returns SugarNamespace\n       * @namespace SugarNamespace\n       * @short Defines static methods that are mapped onto the native if they do\n       *        not already exist.\n       * @extra Intended only for use creating polyfills that follow the ECMAScript\n       *        spec. Accepts either a single object mapping names to functions, or\n       *        name and function as two arguments.\n       *\n       * @example\n       *\n       *   Sugar.Object.defineStaticPolyfill({\n       *     keys: function (obj) {\n       *       // get keys!\n       *     }\n       *   });\n       *\n       * @signature defineStaticPolyfill(methodName, methodFn)\n       * @param {Object} methods - Methods to be defined.\n       * @param {string} methodName - Name of a single method to be defined.\n       * @param {Function} methodFn - Function body of a single method to be defined.\n       ***/\n      setProperty(sugarNamespace, 'defineStaticPolyfill', function(arg1, arg2, arg3) {\n        var opts = collectDefineOptions(arg1, arg2, arg3);\n        extendNative(globalContext[name], opts.methods, true, opts.last);\n        return sugarNamespace;\n      });\n  \n      /***\n       * @method defineInstancePolyfill(methods)\n       * @returns SugarNamespace\n       * @namespace SugarNamespace\n       * @short Defines instance methods that are mapped onto the native prototype\n       *        if they do not already exist.\n       * @extra Intended only for use creating polyfills that follow the ECMAScript\n       *        spec. Accepts either a single object mapping names to functions, or\n       *        name and function as two arguments. This method differs from\n       *        `defineInstance` as there is no static signature (as the method\n       *        is mapped as-is to the native), so it should refer to its `this`\n       *        object.\n       *\n       * @example\n       *\n       *   Sugar.Array.defineInstancePolyfill({\n       *     indexOf: function (arr, el) {\n       *       // index finding code here!\n       *     }\n       *   });\n       *\n       * @signature defineInstancePolyfill(methodName, methodFn)\n       * @param {Object} methods - Methods to be defined.\n       * @param {string} methodName - Name of a single method to be defined.\n       * @param {Function} methodFn - Function body of a single method to be defined.\n       ***/\n      setProperty(sugarNamespace, 'defineInstancePolyfill', function(arg1, arg2, arg3) {\n        var opts = collectDefineOptions(arg1, arg2, arg3);\n        extendNative(globalContext[name].prototype, opts.methods, true, opts.last);\n        // Map instance polyfills to chainable as well.\n        forEachProperty(opts.methods, function(fn, methodName) {\n          defineChainableMethod(sugarNamespace, methodName, fn);\n        });\n        return sugarNamespace;\n      });\n  \n      /***\n       * @method alias(toName, from)\n       * @returns SugarNamespace\n       * @namespace SugarNamespace\n       * @short Aliases one Sugar method to another.\n       *\n       * @example\n       *\n       *   Sugar.Array.alias('all', 'every');\n       *\n       * @signature alias(toName, fn)\n       * @param {string} toName - Name for new method.\n       * @param {string|Function} from - Method to alias, or string shortcut.\n       ***/\n      setProperty(sugarNamespace, 'alias', function(name, source) {\n        var method = typeof source === 'string' ? sugarNamespace[source] : source;\n        setMethod(sugarNamespace, name, method);\n        return sugarNamespace;\n      });\n  \n      // Each namespace can extend only itself through its .extend method.\n      setProperty(sugarNamespace, 'extend', extend);\n  \n      // Cache the class to namespace relationship for later use.\n      namespacesByName[name] = sugarNamespace;\n      namespacesByClassString['[object ' + name + ']'] = sugarNamespace;\n  \n      mapNativeToChainable(name);\n      mapObjectChainablesToNamespace(sugarNamespace);\n  \n  \n      // Export\n      return Sugar[name] = sugarNamespace;\n    }\n  \n    function setGlobalProperties() {\n      setProperty(Sugar, 'extend', Sugar);\n      setProperty(Sugar, 'toString', toString);\n      setProperty(Sugar, 'createNamespace', createNamespace);\n  \n      setProperty(Sugar, 'util', {\n        'hasOwn': hasOwn,\n        'getOwn': getOwn,\n        'setProperty': setProperty,\n        'classToString': classToString,\n        'defineProperty': defineProperty,\n        'forEachProperty': forEachProperty,\n        'mapNativeToChainable': mapNativeToChainable\n      });\n    }\n  \n    function toString() {\n      return SUGAR_GLOBAL;\n    }\n  \n  \n    // Defining Methods\n  \n    function defineMethods(sugarNamespace, methods, type, args, flags) {\n      forEachProperty(methods, function(method, methodName) {\n        var instanceMethod, staticMethod = method;\n        if (args) {\n          staticMethod = wrapMethodWithArguments(method);\n        }\n        if (flags) {\n          staticMethod.flags = flags;\n        }\n  \n        // A method may define its own custom implementation, so\n        // make sure that's not the case before creating one.\n        if (type & INSTANCE && !method.instance) {\n          instanceMethod = wrapInstanceMethod(method, args);\n          setProperty(staticMethod, 'instance', instanceMethod);\n        }\n  \n        if (type & STATIC) {\n          setProperty(staticMethod, 'static', true);\n        }\n  \n        setMethod(sugarNamespace, methodName, staticMethod);\n  \n        if (sugarNamespace.active) {\n          // If the namespace has been activated (.extend has been called),\n          // then map this method as well.\n          sugarNamespace.extend(methodName);\n        }\n      });\n    }\n  \n    function collectDefineOptions(arg1, arg2, arg3) {\n      var methods, last;\n      if (typeof arg1 === 'string') {\n        methods = {};\n        methods[arg1] = arg2;\n        last = arg3;\n      } else {\n        methods = arg1;\n        last = arg2;\n      }\n      return {\n        last: last,\n        methods: methods\n      };\n    }\n  \n    function wrapInstanceMethod(fn, args) {\n      return args ? wrapMethodWithArguments(fn, true) : wrapInstanceMethodFixed(fn);\n    }\n  \n    function wrapMethodWithArguments(fn, instance) {\n      // Functions accepting enumerated arguments will always have \"args\" as the\n      // last argument, so subtract one from the function length to get the point\n      // at which to start collecting arguments. If this is an instance method on\n      // a prototype, then \"this\" will be pushed into the arguments array so start\n      // collecting 1 argument earlier.\n      var startCollect = fn.length - 1 - (instance ? 1 : 0);\n      return function() {\n        var args = [], collectedArgs = [], len;\n        if (instance) {\n          args.push(this);\n        }\n        len = Math.max(arguments.length, startCollect);\n        // Optimized: no leaking arguments\n        for (var i = 0; i < len; i++) {\n          if (i < startCollect) {\n            args.push(arguments[i]);\n          } else {\n            collectedArgs.push(arguments[i]);\n          }\n        }\n        args.push(collectedArgs);\n        return fn.apply(this, args);\n      };\n    }\n  \n    function wrapInstanceMethodFixed(fn) {\n      switch(fn.length) {\n        // Wrapped instance methods will always be passed the instance\n        // as the first argument, but requiring the argument to be defined\n        // may cause confusion here, so return the same wrapped function regardless.\n        case 0:\n        case 1:\n          return function() {\n            return fn(this);\n          };\n        case 2:\n          return function(a) {\n            return fn(this, a);\n          };\n        case 3:\n          return function(a, b) {\n            return fn(this, a, b);\n          };\n        case 4:\n          return function(a, b, c) {\n            return fn(this, a, b, c);\n          };\n        case 5:\n          return function(a, b, c, d) {\n            return fn(this, a, b, c, d);\n          };\n      }\n    }\n  \n    // Method helpers\n  \n    function extendNative(target, source, polyfill, override) {\n      forEachProperty(source, function(method, name) {\n        if (polyfill && !override && target[name]) {\n          // Method exists, so bail.\n          return;\n        }\n        setProperty(target, name, method);\n      });\n    }\n  \n    function setMethod(sugarNamespace, methodName, method) {\n      sugarNamespace[methodName] = method;\n      if (method.instance) {\n        defineChainableMethod(sugarNamespace, methodName, method.instance, true);\n      }\n    }\n  \n  \n    // Chainables\n  \n    function getNewChainableClass(name) {\n      var fn = function SugarChainable(obj, arg) {\n        if (!(this instanceof fn)) {\n          return new fn(obj, arg);\n        }\n        if (this.constructor !== fn) {\n          // Allow modules to define their own constructors.\n          obj = this.constructor.apply(obj, arguments);\n        }\n        this.raw = obj;\n      };\n      setProperty(fn, 'toString', function() {\n        return SUGAR_GLOBAL + name;\n      });\n      setProperty(fn.prototype, 'valueOf', function() {\n        return this.raw;\n      });\n      return fn;\n    }\n  \n    function defineChainableMethod(sugarNamespace, methodName, fn) {\n      var wrapped = wrapWithChainableResult(fn), existing, collision, dcp;\n      dcp = DefaultChainable.prototype;\n      existing = dcp[methodName];\n  \n      // If the method was previously defined on the default chainable, then a\n      // collision exists, so set the method to a disambiguation function that will\n      // lazily evaluate the object and find it's associated chainable. An extra\n      // check is required to avoid false positives from Object inherited methods.\n      collision = existing && existing !== Object.prototype[methodName];\n  \n      // The disambiguation function is only required once.\n      if (!existing || !existing.disambiguate) {\n        dcp[methodName] = collision ? disambiguateMethod(methodName) : wrapped;\n      }\n  \n      // The target chainable always receives the wrapped method. Additionally,\n      // if the target chainable is Sugar.Object, then map the wrapped method\n      // to all other namespaces as well if they do not define their own method\n      // of the same name. This way, a Sugar.Number will have methods like\n      // isEqual that can be called on any object without having to traverse up\n      // the prototype chain and perform disambiguation, which costs cycles.\n      // Note that the \"if\" block below actually does nothing on init as Object\n      // goes first and no other namespaces exist yet. However it needs to be\n      // here as Object instance methods defined later also need to be mapped\n      // back onto existing namespaces.\n      sugarNamespace.prototype[methodName] = wrapped;\n      if (sugarNamespace === Sugar.Object) {\n        mapObjectChainableToAllNamespaces(methodName, wrapped);\n      }\n    }\n  \n    function mapObjectChainablesToNamespace(sugarNamespace) {\n      forEachProperty(Sugar.Object && Sugar.Object.prototype, function(val, methodName) {\n        if (typeof val === 'function') {\n          setObjectChainableOnNamespace(sugarNamespace, methodName, val);\n        }\n      });\n    }\n  \n    function mapObjectChainableToAllNamespaces(methodName, fn) {\n      forEachProperty(namespacesByName, function(sugarNamespace) {\n        setObjectChainableOnNamespace(sugarNamespace, methodName, fn);\n      });\n    }\n  \n    function setObjectChainableOnNamespace(sugarNamespace, methodName, fn) {\n      var proto = sugarNamespace.prototype;\n      if (!hasOwn(proto, methodName)) {\n        proto[methodName] = fn;\n      }\n    }\n  \n    function wrapWithChainableResult(fn) {\n      return function() {\n        return new DefaultChainable(fn.apply(this.raw, arguments));\n      };\n    }\n  \n    function disambiguateMethod(methodName) {\n      var fn = function() {\n        var raw = this.raw, sugarNamespace, fn;\n        if (raw != null) {\n          // Find the Sugar namespace for this unknown.\n          sugarNamespace = namespacesByClassString[classToString(raw)];\n        }\n        if (!sugarNamespace) {\n          // If no sugarNamespace can be resolved, then default\n          // back to Sugar.Object so that undefined and other\n          // non-supported types can still have basic object\n          // methods called on them, such as type checks.\n          sugarNamespace = Sugar.Object;\n        }\n  \n        fn = new sugarNamespace(raw)[methodName];\n  \n        if (fn.disambiguate) {\n          // If the method about to be called on this chainable is\n          // itself a disambiguation method, then throw an error to\n          // prevent infinite recursion.\n          throw new TypeError('Cannot resolve namespace for ' + raw);\n        }\n  \n        return fn.apply(this, arguments);\n      };\n      fn.disambiguate = true;\n      return fn;\n    }\n  \n    function mapNativeToChainable(name, methodNames) {\n      var sugarNamespace = namespacesByName[name],\n          nativeProto = globalContext[name].prototype;\n  \n      if (!methodNames && ownPropertyNames) {\n        methodNames = ownPropertyNames(nativeProto);\n      }\n  \n      forEachProperty(methodNames, function(methodName) {\n        if (nativeMethodProhibited(methodName)) {\n          // Sugar chainables have their own constructors as well as \"valueOf\"\n          // methods, so exclude them here. The __proto__ argument should be trapped\n          // by the function check below, however simply accessing this property on\n          // Object.prototype causes QML to segfault, so pre-emptively excluding it.\n          return;\n        }\n        try {\n          var fn = nativeProto[methodName];\n          if (typeof fn !== 'function') {\n            // Bail on anything not a function.\n            return;\n          }\n        } catch (e) {\n          // Function.prototype has properties that\n          // will throw errors when accessed.\n          return;\n        }\n        defineChainableMethod(sugarNamespace, methodName, fn);\n      });\n    }\n  \n    function nativeMethodProhibited(methodName) {\n      return methodName === 'constructor' ||\n             methodName === 'valueOf' ||\n             methodName === '__proto__';\n    }\n  \n  \n    // Util\n  \n    // Internal references\n    var ownPropertyNames = Object.getOwnPropertyNames,\n        internalToString = Object.prototype.toString,\n        internalHasOwnProperty = Object.prototype.hasOwnProperty;\n  \n    // Defining this as a variable here as the ES5 module\n    // overwrites it to patch DONTENUM.\n    var forEachProperty = function (obj, fn) {\n      for(var key in obj) {\n        if (!hasOwn(obj, key)) continue;\n        if (fn.call(obj, obj[key], key, obj) === false) break;\n      }\n    };\n  \n    function definePropertyShim(obj, prop, descriptor) {\n      obj[prop] = descriptor.value;\n    }\n  \n    function setProperty(target, name, value, enumerable) {\n      defineProperty(target, name, {\n        value: value,\n        enumerable: !!enumerable,\n        configurable: true,\n        writable: true\n      });\n    }\n  \n    // PERF: Attempts to speed this method up get very Heisenbergy. Quickly\n    // returning based on typeof works for primitives, but slows down object\n    // types. Even === checks on null and undefined (no typeof) will end up\n    // basically breaking even. This seems to be as fast as it can go.\n    function classToString(obj) {\n      return internalToString.call(obj);\n    }\n  \n    function hasOwn(obj, prop) {\n      return !!obj && internalHasOwnProperty.call(obj, prop);\n    }\n  \n    function getOwn(obj, prop) {\n      if (hasOwn(obj, prop)) {\n        return obj[prop];\n      }\n    }\n  \n    setupGlobal();\n  \n    /***\n     * @module Common\n     * @description Internal utility and common methods.\n     ***/\n  \n    // Flag allowing native methods to be enhanced\n    var ENHANCEMENTS_FLAG = 'enhance';\n  \n    // For type checking, etc. Excludes object as this is more nuanced.\n    var NATIVE_TYPES = 'Boolean Number String Date RegExp Function Array Error Set Map';\n  \n    // Do strings have no keys?\n    var NO_KEYS_IN_STRING_OBJECTS = !('0' in Object('a'));\n  \n    // Prefix for private properties\n    var PRIVATE_PROP_PREFIX = '_sugar_';\n  \n    // Matches 1..2 style ranges in properties\n    var PROPERTY_RANGE_REG = /^(.*?)\\[([-\\d]*)\\.\\.([-\\d]*)\\](.*)$/;\n  \n    // WhiteSpace/LineTerminator as defined in ES5.1 plus Unicode characters in the Space, Separator category.\n    var TRIM_CHARS = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u2028\\u2029\\u3000\\uFEFF';\n  \n    // Regex for matching a formatted string\n    var STRING_FORMAT_REG = /([{}])\\1|\\{([^}]*)\\}|(%)%|(%(\\w*))/g;\n  \n    // Common chars\n    var HALF_WIDTH_ZERO = 0x30,\n        FULL_WIDTH_ZERO = 0xff10,\n        HALF_WIDTH_PERIOD   = '.',\n        FULL_WIDTH_PERIOD   = '．',\n        HALF_WIDTH_COMMA    = ',',\n        OPEN_BRACE  = '{',\n        CLOSE_BRACE = '}';\n  \n    // Namespace aliases\n    var sugarObject   = Sugar.Object,\n        sugarArray    = Sugar.Array,\n        sugarDate     = Sugar.Date,\n        sugarString   = Sugar.String,\n        sugarNumber   = Sugar.Number,\n        sugarFunction = Sugar.Function,\n        sugarRegExp   = Sugar.RegExp;\n  \n    // Class checks\n    var isSerializable,\n        isBoolean, isNumber, isString,\n        isDate, isRegExp, isFunction,\n        isArray, isSet, isMap, isError;\n  \n    function buildClassChecks() {\n  \n      var knownTypes = {};\n  \n      function addCoreTypes() {\n  \n        var names = spaceSplit(NATIVE_TYPES);\n  \n        isBoolean = buildPrimitiveClassCheck(names[0]);\n        isNumber  = buildPrimitiveClassCheck(names[1]);\n        isString  = buildPrimitiveClassCheck(names[2]);\n  \n        isDate   = buildClassCheck(names[3]);\n        isRegExp = buildClassCheck(names[4]);\n  \n        // Wanted to enhance performance here by using simply \"typeof\"\n        // but Firefox has two major issues that make this impossible,\n        // one fixed, the other not, so perform a full class check here.\n        //\n        // 1. Regexes can be typeof \"function\" in FF < 3\n        //    https://bugzilla.mozilla.org/show_bug.cgi?id=61911 (fixed)\n        //\n        // 2. HTMLEmbedElement and HTMLObjectElement are be typeof \"function\"\n        //    https://bugzilla.mozilla.org/show_bug.cgi?id=268945 (won't fix)\n        isFunction = buildClassCheck(names[5]);\n  \n  \n        isArray = Array.isArray || buildClassCheck(names[6]);\n        isError = buildClassCheck(names[7]);\n  \n        isSet = buildClassCheck(names[8], typeof Set !== 'undefined' && Set);\n        isMap = buildClassCheck(names[9], typeof Map !== 'undefined' && Map);\n  \n        // Add core types as known so that they can be checked by value below,\n        // notably excluding Functions and adding Arguments and Error.\n        addKnownType('Arguments');\n        addKnownType(names[0]);\n        addKnownType(names[1]);\n        addKnownType(names[2]);\n        addKnownType(names[3]);\n        addKnownType(names[4]);\n        addKnownType(names[6]);\n  \n      }\n  \n      function addArrayTypes() {\n        var types = 'Int8 Uint8 Uint8Clamped Int16 Uint16 Int32 Uint32 Float32 Float64';\n        forEach(spaceSplit(types), function(str) {\n          addKnownType(str + 'Array');\n        });\n      }\n  \n      function addKnownType(className) {\n        var str = '[object '+ className +']';\n        knownTypes[str] = true;\n      }\n  \n      function isKnownType(className) {\n        return knownTypes[className];\n      }\n  \n      function buildClassCheck(className, globalObject) {\n        if (globalObject && isClass(new globalObject, 'Object')) {\n          return getConstructorClassCheck(globalObject);\n        } else {\n          return getToStringClassCheck(className);\n        }\n      }\n  \n      function getConstructorClassCheck(obj) {\n        var ctorStr = String(obj);\n        return function(obj) {\n          return String(obj.constructor) === ctorStr;\n        };\n      }\n  \n      function getToStringClassCheck(className) {\n        return function(obj, str) {\n          // perf: Returning up front on instanceof appears to be slower.\n          return isClass(obj, className, str);\n        };\n      }\n  \n      function buildPrimitiveClassCheck(className) {\n        var type = className.toLowerCase();\n        return function(obj) {\n          var t = typeof obj;\n          return t === type || t === 'object' && isClass(obj, className);\n        };\n      }\n  \n      addCoreTypes();\n      addArrayTypes();\n  \n      isSerializable = function(obj, className) {\n        // Only known objects can be serialized. This notably excludes functions,\n        // host objects, Symbols (which are matched by reference), and instances\n        // of classes. The latter can arguably be matched by value, but\n        // distinguishing between these and host objects -- which should never be\n        // compared by value -- is very tricky so not dealing with it here.\n        className = className || classToString(obj);\n        return isKnownType(className) || isPlainObject(obj, className);\n      };\n  \n    }\n  \n    function isClass(obj, className, str) {\n      if (!str) {\n        str = classToString(obj);\n      }\n      return str === '[object '+ className +']';\n    }\n  \n    // Wrapping the core's \"define\" methods to\n    // save a few bytes in the minified script.\n    function wrapNamespace(method) {\n      return function(sugarNamespace, arg1, arg2) {\n        sugarNamespace[method](arg1, arg2);\n      };\n    }\n  \n    // Method define aliases\n    var alias                       = wrapNamespace('alias'),\n        defineStatic                = wrapNamespace('defineStatic'),\n        defineInstance              = wrapNamespace('defineInstance'),\n        defineStaticPolyfill        = wrapNamespace('defineStaticPolyfill'),\n        defineInstancePolyfill      = wrapNamespace('defineInstancePolyfill'),\n        defineInstanceAndStatic     = wrapNamespace('defineInstanceAndStatic'),\n        defineInstanceWithArguments = wrapNamespace('defineInstanceWithArguments');\n  \n    function defineInstanceSimilar(sugarNamespace, set, fn, flags) {\n      defineInstance(sugarNamespace, collectSimilarMethods(set, fn), flags);\n    }\n  \n    function defineInstanceAndStaticSimilar(sugarNamespace, set, fn, flags) {\n      defineInstanceAndStatic(sugarNamespace, collectSimilarMethods(set, fn), flags);\n    }\n  \n    function collectSimilarMethods(set, fn) {\n      var methods = {};\n      if (isString(set)) {\n        set = spaceSplit(set);\n      }\n      forEach(set, function(el, i) {\n        fn(methods, el, i);\n      });\n      return methods;\n    }\n  \n    // This song and dance is to fix methods to a different length\n    // from what they actually accept in order to stay in line with\n    // spec. Additionally passing argument length, as some methods\n    // throw assertion errors based on this (undefined check is not\n    // enough). Fortunately for now spec is such that passing 3\n    // actual arguments covers all requirements. Note that passing\n    // the argument length also forces the compiler to not rewrite\n    // length of the compiled function.\n    function fixArgumentLength(fn) {\n      var staticFn = function(a) {\n        var args = arguments;\n        return fn(a, args[1], args[2], args.length - 1);\n      };\n      staticFn.instance = function(b) {\n        var args = arguments;\n        return fn(this, b, args[1], args.length);\n      };\n      return staticFn;\n    }\n  \n    function defineAccessor(namespace, name, fn) {\n      setProperty(namespace, name, fn);\n    }\n  \n    function defineOptionsAccessor(namespace, defaults) {\n      var obj = simpleClone(defaults);\n  \n      function getOption(name) {\n        return obj[name];\n      }\n  \n      function setOption(arg1, arg2) {\n        var options;\n        if (arguments.length === 1) {\n          options = arg1;\n        } else {\n          options = {};\n          options[arg1] = arg2;\n        }\n        forEachProperty(options, function(val, name) {\n          if (val === null) {\n            val = defaults[name];\n          }\n          obj[name] = val;\n        });\n      }\n  \n      defineAccessor(namespace, 'getOption', getOption);\n      defineAccessor(namespace, 'setOption', setOption);\n      return getOption;\n    }\n  \n    // For methods defined directly on the prototype like Range\n    function defineOnPrototype(ctor, methods) {\n      var proto = ctor.prototype;\n      forEachProperty(methods, function(val, key) {\n        proto[key] = val;\n      });\n    }\n  \n    // Argument helpers\n  \n    function assertArgument(exists) {\n      if (!exists) {\n        throw new TypeError('Argument required');\n      }\n    }\n  \n    function assertCallable(obj) {\n      if (!isFunction(obj)) {\n        throw new TypeError('Function is not callable');\n      }\n    }\n  \n    function assertArray(obj) {\n      if (!isArray(obj)) {\n        throw new TypeError('Array required');\n      }\n    }\n  \n    function assertWritable(obj) {\n      if (isPrimitive(obj)) {\n        // If strict mode is active then primitives will throw an\n        // error when attempting to write properties. We can't be\n        // sure if strict mode is available, so pre-emptively\n        // throw an error here to ensure consistent behavior.\n        throw new TypeError('Property cannot be written');\n      }\n    }\n  \n    // Coerces an object to a positive integer.\n    // Does not allow Infinity.\n    function coercePositiveInteger(n) {\n      n = +n || 0;\n      if (n < 0 || !isNumber(n) || !isFinite(n)) {\n        throw new RangeError('Invalid number');\n      }\n      return trunc(n);\n    }\n  \n  \n    // General helpers\n  \n    function isDefined(o) {\n      return o !== undefined;\n    }\n  \n    function isUndefined(o) {\n      return o === undefined;\n    }\n  \n    function privatePropertyAccessor(key) {\n      var privateKey = PRIVATE_PROP_PREFIX + key;\n      return function(obj, val) {\n        if (arguments.length > 1) {\n          setProperty(obj, privateKey, val);\n          return obj;\n        }\n        return obj[privateKey];\n      };\n    }\n  \n    function setChainableConstructor(sugarNamespace, createFn) {\n      sugarNamespace.prototype.constructor = function() {\n        return createFn.apply(this, arguments);\n      };\n    }\n  \n    // Fuzzy matching helpers\n  \n    function getMatcher(f) {\n      if (!isPrimitive(f)) {\n        var className = classToString(f);\n        if (isRegExp(f, className)) {\n          return regexMatcher(f);\n        } else if (isDate(f, className)) {\n          return dateMatcher(f);\n        } else if (isFunction(f, className)) {\n          return functionMatcher(f);\n        } else if (isPlainObject(f, className)) {\n          return fuzzyMatcher(f);\n        }\n      }\n      // Default is standard isEqual\n      return defaultMatcher(f);\n    }\n  \n    function fuzzyMatcher(obj) {\n      var matchers = {};\n      return function(el, i, arr) {\n        var matched = true;\n        if (!isObjectType(el)) {\n          return false;\n        }\n        forEachProperty(obj, function(val, key) {\n          matchers[key] = getOwn(matchers, key) || getMatcher(val);\n          if (matchers[key].call(arr, el[key], i, arr) === false) {\n            matched = false;\n          }\n          return matched;\n        });\n        return matched;\n      };\n    }\n  \n    function defaultMatcher(f) {\n      return function(el) {\n        return isEqual(el, f);\n      };\n    }\n  \n    function regexMatcher(reg) {\n      reg = RegExp(reg);\n      return function(el) {\n        return reg.test(el);\n      };\n    }\n  \n    function dateMatcher(d) {\n      var ms = d.getTime();\n      return function(el) {\n        return !!(el && el.getTime) && el.getTime() === ms;\n      };\n    }\n  \n    function functionMatcher(fn) {\n      return function(el, i, arr) {\n        // Return true up front if match by reference\n        return el === fn || fn.call(arr, el, i, arr);\n      };\n    }\n  \n    // Object helpers\n  \n    function getKeys(obj) {\n      return Object.keys(obj);\n    }\n  \n    function deepHasProperty(obj, key, any) {\n      return handleDeepProperty(obj, key, any, true);\n    }\n  \n    function deepGetProperty(obj, key, any) {\n      return handleDeepProperty(obj, key, any, false);\n    }\n  \n    function deepSetProperty(obj, key, val) {\n      handleDeepProperty(obj, key, false, false, true, false, val);\n      return obj;\n    }\n  \n    function handleDeepProperty(obj, key, any, has, fill, fillLast, val) {\n      var ns, bs, ps, cbi, set, isLast, isPush, isIndex, nextIsIndex, exists;\n      ns = obj || undefined;\n      if (key == null) return;\n  \n      if (isObjectType(key)) {\n        // Allow array and array-like accessors\n        bs = [key];\n      } else {\n        key = String(key);\n        if (key.indexOf('..') !== -1) {\n          return handleArrayIndexRange(obj, key, any, val);\n        }\n        bs = key.split('[');\n      }\n  \n      set = isDefined(val);\n  \n      for (var i = 0, blen = bs.length; i < blen; i++) {\n        ps = bs[i];\n  \n        if (isString(ps)) {\n          ps = periodSplit(ps);\n        }\n  \n        for (var j = 0, plen = ps.length; j < plen; j++) {\n          key = ps[j];\n  \n          // Is this the last key?\n          isLast = i === blen - 1 && j === plen - 1;\n  \n          // Index of the closing ]\n          cbi = key.indexOf(']');\n  \n          // Is the key an array index?\n          isIndex = cbi !== -1;\n  \n          // Is this array push syntax \"[]\"?\n          isPush = set && cbi === 0;\n  \n          // If the bracket split was successful and this is the last element\n          // in the dot split, then we know the next key will be an array index.\n          nextIsIndex = blen > 1 && j === plen - 1;\n  \n          if (isPush) {\n            // Set the index to the end of the array\n            key = ns.length;\n          } else if (isIndex) {\n            // Remove the closing ]\n            key = key.slice(0, -1);\n          }\n  \n          // If the array index is less than 0, then\n          // add its length to allow negative indexes.\n          if (isIndex && key < 0) {\n            key = +key + ns.length;\n          }\n  \n          // Bracket keys may look like users[5] or just [5], so the leading\n          // characters are optional. We can enter the namespace if this is the\n          // 2nd part, if there is only 1 part, or if there is an explicit key.\n          if (i || key || blen === 1) {\n  \n            exists = any ? key in ns : hasOwn(ns, key);\n  \n            // Non-existent namespaces are only filled if they are intermediate\n            // (not at the end) or explicitly filling the last.\n            if (fill && (!isLast || fillLast) && !exists) {\n              // For our purposes, last only needs to be an array.\n              ns = ns[key] = nextIsIndex || (fillLast && isLast) ? [] : {};\n              continue;\n            }\n  \n            if (has) {\n              if (isLast || !exists) {\n                return exists;\n              }\n            } else if (set && isLast) {\n              assertWritable(ns);\n              ns[key] = val;\n            }\n  \n            ns = exists ? ns[key] : undefined;\n          }\n  \n        }\n      }\n      return ns;\n    }\n  \n    // Get object property with support for 0..1 style range notation.\n    function handleArrayIndexRange(obj, key, any, val) {\n      var match, start, end, leading, trailing, arr, set;\n      match = key.match(PROPERTY_RANGE_REG);\n      if (!match) {\n        return;\n      }\n  \n      set = isDefined(val);\n      leading = match[1];\n  \n      if (leading) {\n        arr = handleDeepProperty(obj, leading, any, false, set ? true : false, true);\n      } else {\n        arr = obj;\n      }\n  \n      assertArray(arr);\n  \n      trailing = match[4];\n      start    = match[2] ? +match[2] : 0;\n      end      = match[3] ? +match[3] : arr.length;\n  \n      // A range of 0..1 is inclusive, so we need to add 1 to the end. If this\n      // pushes the index from -1 to 0, then set it to the full length of the\n      // array, otherwise it will return nothing.\n      end = end === -1 ? arr.length : end + 1;\n  \n      if (set) {\n        for (var i = start; i < end; i++) {\n          handleDeepProperty(arr, i + trailing, any, false, true, false, val);\n        }\n      } else {\n        arr = arr.slice(start, end);\n  \n        // If there are trailing properties, then they need to be mapped for each\n        // element in the array.\n        if (trailing) {\n          if (trailing.charAt(0) === HALF_WIDTH_PERIOD) {\n            // Need to chomp the period if one is trailing after the range. We\n            // can't do this at the regex level because it will be required if\n            // we're setting the value as it needs to be concatentated together\n            // with the array index to be set.\n            trailing = trailing.slice(1);\n          }\n          return arr.map(function(el) {\n            return handleDeepProperty(el, trailing);\n          });\n        }\n      }\n      return arr;\n    }\n  \n    function getOwnKey(obj, key) {\n      if (hasOwn(obj, key)) {\n        return key;\n      }\n    }\n  \n    function hasProperty(obj, prop) {\n      return !isPrimitive(obj) && prop in obj;\n    }\n  \n    function isObjectType(obj, type) {\n      return !!obj && (type || typeof obj) === 'object';\n    }\n  \n    function isPrimitive(obj, type) {\n      type = type || typeof obj;\n      return obj == null || type === 'string' || type === 'number' || type === 'boolean';\n    }\n  \n    function isPlainObject(obj, className) {\n      return isObjectType(obj) &&\n             isClass(obj, 'Object', className) &&\n             hasValidPlainObjectPrototype(obj) &&\n             hasOwnEnumeratedProperties(obj);\n    }\n  \n    function hasValidPlainObjectPrototype(obj) {\n      var hasToString = 'toString' in obj;\n      var hasConstructor = 'constructor' in obj;\n      // An object created with Object.create(null) has no methods in the\n      // prototype chain, so check if any are missing. The additional hasToString\n      // check is for false positives on some host objects in old IE which have\n      // toString but no constructor. If the object has an inherited constructor,\n      // then check if it is Object (the \"isPrototypeOf\" tapdance here is a more\n      // robust way of ensuring this if the global has been hijacked). Note that\n      // accessing the constructor directly (without \"in\" or \"hasOwnProperty\")\n      // will throw a permissions error in IE8 on cross-domain windows.\n      return (!hasConstructor && !hasToString) ||\n              (hasConstructor && !hasOwn(obj, 'constructor') &&\n               hasOwn(obj.constructor.prototype, 'isPrototypeOf'));\n    }\n  \n    function hasOwnEnumeratedProperties(obj) {\n      // Plain objects are generally defined as having enumerated properties\n      // all their own, however in early IE environments without defineProperty,\n      // there may also be enumerated methods in the prototype chain, so check\n      // for both of these cases.\n      var objectProto = Object.prototype;\n      for (var key in obj) {\n        var val = obj[key];\n        if (!hasOwn(obj, key) && val !== objectProto[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  \n    function simpleRepeat(n, fn) {\n      for (var i = 0; i < n; i++) {\n        fn(i);\n      }\n    }\n  \n    function simpleClone(obj) {\n      return simpleMerge({}, obj);\n    }\n  \n    function simpleMerge(target, source) {\n      forEachProperty(source, function(val, key) {\n        target[key] = val;\n      });\n      return target;\n    }\n  \n    // Make primtives types like strings into objects.\n    function coercePrimitiveToObject(obj) {\n      if (isPrimitive(obj)) {\n        obj = Object(obj);\n      }\n      if (NO_KEYS_IN_STRING_OBJECTS && isString(obj)) {\n        forceStringCoercion(obj);\n      }\n      return obj;\n    }\n  \n    // Force strings to have their indexes set in\n    // environments that don't do this automatically.\n    function forceStringCoercion(obj) {\n      var i = 0, chr;\n      while (chr = obj.charAt(i)) {\n        obj[i++] = chr;\n      }\n    }\n  \n    // Equality helpers\n  \n    function isEqual(a, b, stack) {\n      var aClass, bClass;\n      if (a === b) {\n        // Return quickly up front when matched by reference,\n        // but be careful about 0 !== -0.\n        return a !== 0 || 1 / a === 1 / b;\n      }\n      aClass = classToString(a);\n      bClass = classToString(b);\n      if (aClass !== bClass) {\n        return false;\n      }\n  \n      if (isSerializable(a, aClass) && isSerializable(b, bClass)) {\n        return objectIsEqual(a, b, aClass, stack);\n      } else if (isSet(a, aClass) && isSet(b, bClass)) {\n        return a.size === b.size && isEqual(setToArray(a), setToArray(b), stack);\n      } else if (isMap(a, aClass) && isMap(b, bClass)) {\n        return a.size === b.size && isEqual(mapToArray(a), mapToArray(b), stack);\n      } else if (isError(a, aClass) && isError(b, bClass)) {\n        return a.toString() === b.toString();\n      }\n  \n      return false;\n    }\n  \n    function objectIsEqual(a, b, aClass, stack) {\n      var aType = typeof a, bType = typeof b, propsEqual, count;\n      if (aType !== bType) {\n        return false;\n      }\n      if (isObjectType(a.valueOf())) {\n        if (a.length !== b.length) {\n          // perf: Quickly returning up front for arrays.\n          return false;\n        }\n        count = 0;\n        propsEqual = true;\n        iterateWithCyclicCheck(a, false, stack, function(key, val, cyc, stack) {\n          if (!cyc && (!(key in b) || !isEqual(val, b[key], stack))) {\n            propsEqual = false;\n          }\n          count++;\n          return propsEqual;\n        });\n        if (!propsEqual || count !== getKeys(b).length) {\n          return false;\n        }\n      }\n      // Stringifying the value handles NaN, wrapped primitives, dates, and errors in one go.\n      return a.valueOf().toString() === b.valueOf().toString();\n    }\n  \n    // Serializes an object in a way that will provide a token unique\n    // to the type, class, and value of an object. Host objects, class\n    // instances etc, are not serializable, and are held in an array\n    // of references that will return the index as a unique identifier\n    // for the object. This array is passed from outside so that the\n    // calling function can decide when to dispose of this array.\n    function serializeInternal(obj, refs, stack) {\n      var type = typeof obj, className, value, ref;\n  \n      // Return quickly for primitives to save cycles\n      if (isPrimitive(obj, type) && !isRealNaN(obj)) {\n        return type + obj;\n      }\n  \n      className = classToString(obj);\n  \n      if (!isSerializable(obj, className)) {\n        ref = indexOf(refs, obj);\n        if (ref === -1) {\n          ref = refs.length;\n          refs.push(obj);\n        }\n        return ref;\n      } else if (isObjectType(obj)) {\n        value = serializeDeep(obj, refs, stack) + obj.toString();\n      } else if (1 / obj === -Infinity) {\n        value = '-0';\n      } else if (obj.valueOf) {\n        value = obj.valueOf();\n      }\n      return type + className + value;\n    }\n  \n    function serializeDeep(obj, refs, stack) {\n      var result = '';\n      iterateWithCyclicCheck(obj, true, stack, function(key, val, cyc, stack) {\n        result += cyc ? 'CYC' : key + serializeInternal(val, refs, stack);\n      });\n      return result;\n    }\n  \n    function iterateWithCyclicCheck(obj, sortedKeys, stack, fn) {\n  \n      function next(val, key) {\n        var cyc = false;\n  \n        // Allowing a step into the structure before triggering this check to save\n        // cycles on standard JSON structures and also to try as hard as possible to\n        // catch basic properties that may have been modified.\n        if (stack.length > 1) {\n          var i = stack.length;\n          while (i--) {\n            if (stack[i] === val) {\n              cyc = true;\n            }\n          }\n        }\n  \n        stack.push(val);\n        fn(key, val, cyc, stack);\n        stack.pop();\n      }\n  \n      function iterateWithSortedKeys() {\n        // Sorted keys is required for serialization, where object order\n        // does not matter but stringified order does.\n        var arr = getKeys(obj).sort(), key;\n        for (var i = 0; i < arr.length; i++) {\n          key = arr[i];\n          next(obj[key], arr[i]);\n        }\n      }\n  \n      // This method for checking for cyclic structures was egregiously stolen from\n      // the ingenious method by @kitcambridge from the Underscore script:\n      // https://github.com/documentcloud/underscore/issues/240\n      if (!stack) {\n        stack = [];\n      }\n  \n      if (sortedKeys) {\n        iterateWithSortedKeys();\n      } else {\n        forEachProperty(obj, next);\n      }\n    }\n  \n  \n    // Array helpers\n  \n    function isArrayIndex(n) {\n      return n >>> 0 == n && n != 0xFFFFFFFF;\n    }\n  \n    function iterateOverSparseArray(arr, fn, fromIndex, loop) {\n      var indexes = getSparseArrayIndexes(arr, fromIndex, loop), index;\n      for (var i = 0, len = indexes.length; i < len; i++) {\n        index = indexes[i];\n        fn.call(arr, arr[index], index, arr);\n      }\n      return arr;\n    }\n  \n    // It's unclear whether or not sparse arrays qualify as \"simple enumerables\".\n    // If they are not, however, the wrapping function will be deoptimized, so\n    // isolate here (also to share between es5 and array modules).\n    function getSparseArrayIndexes(arr, fromIndex, loop, fromRight) {\n      var indexes = [], i;\n      for (i in arr) {\n        if (isArrayIndex(i) && (loop || (fromRight ? i <= fromIndex : i >= fromIndex))) {\n          indexes.push(+i);\n        }\n      }\n      indexes.sort(function(a, b) {\n        var aLoop = a > fromIndex;\n        var bLoop = b > fromIndex;\n        if (aLoop !== bLoop) {\n          return aLoop ? -1 : 1;\n        }\n        return a - b;\n      });\n      return indexes;\n    }\n  \n    function getEntriesForIndexes(obj, find, loop, isString) {\n      var result, length = obj.length;\n      if (!isArray(find)) {\n        return entryAtIndex(obj, find, length, loop, isString);\n      }\n      result = new Array(find.length);\n      forEach(find, function(index, i) {\n        result[i] = entryAtIndex(obj, index, length, loop, isString);\n      });\n      return result;\n    }\n  \n    function getNormalizedIndex(index, length, loop) {\n      if (index && loop) {\n        index = index % length;\n      }\n      if (index < 0) index = length + index;\n      return index;\n    }\n  \n    function entryAtIndex(obj, index, length, loop, isString) {\n      index = getNormalizedIndex(index, length, loop);\n      return isString ? obj.charAt(index) : obj[index];\n    }\n  \n    function mapWithShortcuts(el, f, context, mapArgs) {\n      if (!f) {\n        return el;\n      } else if (f.apply) {\n        return f.apply(context, mapArgs || []);\n      } else if (isArray(f)) {\n        return f.map(function(m) {\n          return mapWithShortcuts(el, m, context, mapArgs);\n        });\n      } else if (isFunction(el[f])) {\n        return el[f].call(el);\n      } else {\n        return deepGetProperty(el, f);\n      }\n    }\n  \n    function spaceSplit(str) {\n      return str.split(' ');\n    }\n  \n    function commaSplit(str) {\n      return str.split(HALF_WIDTH_COMMA);\n    }\n  \n    function periodSplit(str) {\n      return str.split(HALF_WIDTH_PERIOD);\n    }\n  \n    function forEach(arr, fn) {\n      for (var i = 0, len = arr.length; i < len; i++) {\n        if (!(i in arr)) {\n          return iterateOverSparseArray(arr, fn, i);\n        }\n        fn(arr[i], i);\n      }\n    }\n  \n    function filter(arr, fn) {\n      var result = [];\n      for (var i = 0, len = arr.length; i < len; i++) {\n        var el = arr[i];\n        if (i in arr && fn(el, i)) {\n          result.push(el);\n        }\n      }\n      return result;\n    }\n  \n    function map(arr, fn) {\n      // perf: Not using fixed array len here as it may be sparse.\n      var result = [];\n      for (var i = 0, len = arr.length; i < len; i++) {\n        if (i in arr) {\n          result.push(fn(arr[i], i));\n        }\n      }\n      return result;\n    }\n  \n    function indexOf(arr, el) {\n      for (var i = 0, len = arr.length; i < len; i++) {\n        if (i in arr && arr[i] === el) return i;\n      }\n      return -1;\n    }\n  \n    // Number helpers\n  \n    var trunc = Math.trunc || function(n) {\n      if (n === 0 || !isFinite(n)) return n;\n      return n < 0 ? ceil(n) : floor(n);\n    };\n  \n    function isRealNaN(obj) {\n      // This is only true of NaN\n      return obj != null && obj !== obj;\n    }\n  \n    function withPrecision(val, precision, fn) {\n      var multiplier = pow(10, abs(precision || 0));\n      fn = fn || round;\n      if (precision < 0) multiplier = 1 / multiplier;\n      return fn(val * multiplier) / multiplier;\n    }\n  \n    function padNumber(num, place, sign, base, replacement) {\n      var str = abs(num).toString(base || 10);\n      str = repeatString(replacement || '0', place - str.replace(/\\.\\d+/, '').length) + str;\n      if (sign || num < 0) {\n        str = (num < 0 ? '-' : '+') + str;\n      }\n      return str;\n    }\n  \n    function getOrdinalSuffix(num) {\n      if (num >= 11 && num <= 13) {\n        return 'th';\n      } else {\n        switch(num % 10) {\n          case 1:  return 'st';\n          case 2:  return 'nd';\n          case 3:  return 'rd';\n          default: return 'th';\n        }\n      }\n    }\n  \n    // Fullwidth number helpers\n    var fullWidthNumberReg, fullWidthNumberMap, fullWidthNumbers;\n  \n    function buildFullWidthNumber() {\n      var fwp = FULL_WIDTH_PERIOD, hwp = HALF_WIDTH_PERIOD, hwc = HALF_WIDTH_COMMA, fwn = '';\n      fullWidthNumberMap = {};\n      for (var i = 0, digit; i <= 9; i++) {\n        digit = chr(i + FULL_WIDTH_ZERO);\n        fwn += digit;\n        fullWidthNumberMap[digit] = chr(i + HALF_WIDTH_ZERO);\n      }\n      fullWidthNumberMap[hwc] = '';\n      fullWidthNumberMap[fwp] = hwp;\n      // Mapping this to itself to capture it easily\n      // in stringToNumber to detect decimals later.\n      fullWidthNumberMap[hwp] = hwp;\n      fullWidthNumberReg = allCharsReg(fwn + fwp + hwc + hwp);\n      fullWidthNumbers = fwn;\n    }\n  \n    // Takes into account full-width characters, commas, and decimals.\n    function stringToNumber(str, base) {\n      var sanitized, isDecimal;\n      sanitized = str.replace(fullWidthNumberReg, function(chr) {\n        var replacement = getOwn(fullWidthNumberMap, chr);\n        if (replacement === HALF_WIDTH_PERIOD) {\n          isDecimal = true;\n        }\n        return replacement;\n      });\n      return isDecimal ? parseFloat(sanitized) : parseInt(sanitized, base || 10);\n    }\n  \n    // Math aliases\n    var abs   = Math.abs,\n        pow   = Math.pow,\n        min   = Math.min,\n        max   = Math.max,\n        ceil  = Math.ceil,\n        floor = Math.floor,\n        round = Math.round;\n  \n  \n    // String helpers\n  \n    var chr = String.fromCharCode;\n  \n    function trim(str) {\n      return str.trim();\n    }\n  \n    function repeatString(str, num) {\n      var result = '';\n      str = str.toString();\n      while (num > 0) {\n        if (num & 1) {\n          result += str;\n        }\n        if (num >>= 1) {\n          str += str;\n        }\n      }\n      return result;\n    }\n  \n    function simpleCapitalize(str) {\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n  \n    function createFormatMatcher(bracketMatcher, percentMatcher, precheck) {\n  \n      var reg = STRING_FORMAT_REG;\n      var compileMemoized = memoizeFunction(compile);\n  \n      function getToken(format, match) {\n        var get, token, literal, fn;\n        var bKey = match[2];\n        var pLit = match[3];\n        var pKey = match[5];\n        if (match[4] && percentMatcher) {\n          token = pKey;\n          get = percentMatcher;\n        } else if (bKey) {\n          token = bKey;\n          get = bracketMatcher;\n        } else if (pLit && percentMatcher) {\n          literal = pLit;\n        } else {\n          literal = match[1] || match[0];\n        }\n        if (get) {\n          assertPassesPrecheck(precheck, bKey, pKey);\n          fn = function(obj, opt) {\n            return get(obj, token, opt);\n          };\n        }\n        format.push(fn || getLiteral(literal));\n      }\n  \n      function getSubstring(format, str, start, end) {\n        if (end > start) {\n          var sub = str.slice(start, end);\n          assertNoUnmatched(sub, OPEN_BRACE);\n          assertNoUnmatched(sub, CLOSE_BRACE);\n          format.push(function() {\n            return sub;\n          });\n        }\n      }\n  \n      function getLiteral(str) {\n        return function() {\n          return str;\n        };\n      }\n  \n      function assertPassesPrecheck(precheck, bt, pt) {\n        if (precheck && !precheck(bt, pt)) {\n          throw new TypeError('Invalid token '+ (bt || pt) +' in format string');\n        }\n      }\n  \n      function assertNoUnmatched(str, chr) {\n        if (str.indexOf(chr) !== -1) {\n          throw new TypeError('Unmatched '+ chr +' in format string');\n        }\n      }\n  \n      function compile(str) {\n        var format = [], lastIndex = 0, match;\n        reg.lastIndex = 0;\n        while(match = reg.exec(str)) {\n          getSubstring(format, str, lastIndex, match.index);\n          getToken(format, match);\n          lastIndex = reg.lastIndex;\n        }\n        getSubstring(format, str, lastIndex, str.length);\n        return format;\n      }\n  \n      return function(str, obj, opt) {\n        var format = compileMemoized(str), result = '';\n        for (var i = 0; i < format.length; i++) {\n          result += format[i](obj, opt);\n        }\n        return result;\n      };\n    }\n  \n    // Inflection helper\n  \n    var Inflections = {};\n  \n    function getAcronym(str) {\n      return Inflections.acronyms && Inflections.acronyms.find(str);\n    }\n  \n    function getHumanWord(str) {\n      return Inflections.human && Inflections.human.find(str);\n    }\n  \n    function runHumanRules(str) {\n      return Inflections.human && Inflections.human.runRules(str) || str;\n    }\n  \n    // RegExp helpers\n  \n    function allCharsReg(src) {\n      return RegExp('[' + src + ']', 'g');\n    }\n  \n    function getRegExpFlags(reg, add) {\n      var flags = '';\n      add = add || '';\n      function checkFlag(prop, flag) {\n        if (prop || add.indexOf(flag) > -1) {\n          flags += flag;\n        }\n      }\n      checkFlag(reg.global, 'g');\n      checkFlag(reg.ignoreCase, 'i');\n      checkFlag(reg.multiline, 'm');\n      checkFlag(reg.sticky, 'y');\n      return flags;\n    }\n  \n    function escapeRegExp(str) {\n      if (!isString(str)) str = String(str);\n      return str.replace(/([\\\\\\/\\'*+?|()\\[\\]{}.^$-])/g,'\\\\$1');\n    }\n  \n    // Date helpers\n  \n    var _utc = privatePropertyAccessor('utc');\n  \n    function callDateGet(d, method) {\n      return d['get' + (_utc(d) ? 'UTC' : '') + method]();\n    }\n  \n    function callDateSet(d, method, value, safe) {\n      // \"Safe\" denotes not setting the date if the value is the same as what is\n      // currently set. In theory this should be a noop, however it will cause\n      // timezone shifts when in the middle of a DST fallback. This is unavoidable\n      // as the notation itself is ambiguous (i.e. there are two \"1:00ams\" on\n      // November 1st, 2015 in northern hemisphere timezones that follow DST),\n      // however when advancing or rewinding dates this can throw off calculations\n      // so avoiding this unintentional shifting on an opt-in basis.\n      if (safe && value === callDateGet(d, method, value)) {\n        return;\n      }\n      d['set' + (_utc(d) ? 'UTC' : '') + method](value);\n    }\n  \n    // Memoization helpers\n  \n    var INTERNAL_MEMOIZE_LIMIT = 1000;\n  \n    // Note that attemps to consolidate this with Function#memoize\n    // ended up clunky as that is also serializing arguments. Separating\n    // these implementations turned out to be simpler.\n    function memoizeFunction(fn) {\n      var memo = {}, counter = 0;\n  \n      return function(key) {\n        if (hasOwn(memo, key)) {\n          return memo[key];\n        }\n        if (counter === INTERNAL_MEMOIZE_LIMIT) {\n          memo = {};\n          counter = 0;\n        }\n        counter++;\n        return memo[key] = fn(key);\n      };\n    }\n  \n    // ES6 helpers\n  \n    function setToArray(set) {\n      var arr = new Array(set.size), i = 0;\n      set.forEach(function(val) {\n        arr[i++] = val;\n      });\n      return arr;\n    }\n  \n    function mapToArray(map) {\n      var arr = new Array(map.size), i = 0;\n      map.forEach(function(val, key) {\n        arr[i++] = [key, val];\n      });\n      return arr;\n    }\n  \n    buildClassChecks();\n    buildFullWidthNumber();\n  \n    /***\n     * @module ES6\n     * @description Polyfills that provide basic ES6 compatibility. This module\n     *              provides the base for Sugar functionality, but is not a full\n     *              polyfill suite.\n     *\n     ***/\n  \n  \n    /*** @namespace String ***/\n  \n    function getCoercedStringSubject(obj) {\n      if (obj == null) {\n        throw new TypeError('String required.');\n      }\n      return String(obj);\n    }\n  \n    function getCoercedSearchString(obj) {\n      if (isRegExp(obj)) {\n        throw new TypeError();\n      }\n      return String(obj);\n    }\n  \n    defineInstancePolyfill(sugarString, {\n  \n      /***\n       * @method includes(search, [pos] = 0)\n       * @returns Boolean\n       * @polyfill ES6\n       * @short Returns true if `search` is contained within the string.\n       * @extra Search begins at [pos], which defaults to the beginning of the\n       *        string. Sugar enhances this method to allow matching a regex.\n       *\n       * @example\n       *\n       *   'jumpy'.includes('py')      -> true\n       *   'broken'.includes('ken', 3) -> true\n       *   'broken'.includes('bro', 3) -> false\n       *\n       ***/\n      'includes': function(searchString) {\n        // Force compiler to respect argument length.\n        var argLen = arguments.length, pos = arguments[1];\n        var str = getCoercedStringSubject(this);\n        searchString = getCoercedSearchString(searchString);\n        return str.indexOf(searchString, pos) !== -1;\n      },\n  \n      /***\n       * @method startsWith(search, [pos] = 0)\n       * @returns Boolean\n       * @polyfill ES6\n       * @short Returns true if the string starts with substring `search`.\n       * @extra Search begins at [pos], which defaults to the entire string length.\n       *\n       * @example\n       *\n       *   'hello'.startsWith('hell')   -> true\n       *   'hello'.startsWith('HELL')   -> false\n       *   'hello'.startsWith('ell', 1) -> true\n       *\n       ***/\n      'startsWith': function(searchString) {\n        // Force compiler to respect argument length.\n        var argLen = arguments.length, position = arguments[1];\n        var str, start, pos, len, searchLength;\n        str = getCoercedStringSubject(this);\n        searchString = getCoercedSearchString(searchString);\n        pos = +position || 0;\n        len = str.length;\n        start = min(max(pos, 0), len);\n        searchLength = searchString.length;\n        if (searchLength + start > len) {\n          return false;\n        }\n        if (str.substr(start, searchLength) === searchString) {\n          return true;\n        }\n        return false;\n      },\n  \n      /***\n       * @method endsWith(search, [pos] = length)\n       * @returns Boolean\n       * @polyfill ES6\n       * @short Returns true if the string ends with substring `search`.\n       * @extra Search ends at [pos], which defaults to the entire string length.\n       *\n       * @example\n       *\n       *   'jumpy'.endsWith('py')    -> true\n       *   'jumpy'.endsWith('MPY')   -> false\n       *   'jumpy'.endsWith('mp', 4) -> false\n       *\n       ***/\n      'endsWith': function(searchString) {\n        // Force compiler to respect argument length.\n        var argLen = arguments.length, endPosition = arguments[1];\n        var str, start, end, pos, len, searchLength;\n        str = getCoercedStringSubject(this);\n        searchString = getCoercedSearchString(searchString);\n        len = str.length;\n        pos = len;\n        if (isDefined(endPosition)) {\n          pos = +endPosition || 0;\n        }\n        end = min(max(pos, 0), len);\n        searchLength = searchString.length;\n        start = end - searchLength;\n        if (start < 0) {\n          return false;\n        }\n        if (str.substr(start, searchLength) === searchString) {\n          return true;\n        }\n        return false;\n      },\n  \n      /***\n       * @method repeat([num] = 0)\n       * @returns String\n       * @polyfill ES6\n       * @short Returns the string repeated [num] times.\n       *\n       * @example\n       *\n       *   'jumpy'.repeat(2) -> 'jumpyjumpy'\n       *   'a'.repeat(5)     -> 'aaaaa'\n       *   'a'.repeat(0)     -> ''\n       *\n       ***/\n      'repeat': function(num) {\n        num = coercePositiveInteger(num);\n        return repeatString(this, num);\n      }\n  \n    });\n  \n  \n    /*** @namespace Number ***/\n  \n    defineStaticPolyfill(sugarNumber, {\n  \n      /***\n       * @method isNaN(value)\n       * @returns Boolean\n       * @polyfill ES6\n       * @static\n       * @short Returns true only if the number is `NaN`.\n       * @extra This is differs from the global `isNaN`, which returns true for\n       *        anything that is not a number.\n       *\n       * @example\n       *\n       *   Number.isNaN(NaN) -> true\n       *   Number.isNaN('n') -> false\n       *\n       ***/\n      'isNaN': function(obj) {\n        return isRealNaN(obj);\n      }\n  \n    });\n  \n  \n    /*** @namespace Array ***/\n  \n    function getCoercedObject(obj) {\n      if (obj == null) {\n        throw new TypeError('Object required.');\n      }\n      return coercePrimitiveToObject(obj);\n    }\n  \n    defineStaticPolyfill(sugarArray, {\n  \n      /***\n       * @method from(a, [map], [context])\n       * @returns Mixed\n       * @polyfill ES6\n       * @static\n       * @short Creates an array from an array-like object.\n       * @extra If a function is passed for [map], it will be map each element of\n       *        the array. [context] is the `this` object if passed.\n       *\n       * @callback map\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   arr  A reference to the array.\n       *\n       * @example\n       *\n       *   Array.from({0:'a',1:'b',length:2}); -> ['a','b']\n       *\n       ***/\n      'from': function(a) {\n        // Force compiler to respect argument length.\n        var argLen = arguments.length, map = arguments[1], context = arguments[2];\n        var len, arr;\n        if (isDefined(map)) {\n          assertCallable(map);\n        }\n        a = getCoercedObject(a);\n        len = trunc(max(0, a.length || 0));\n        if (!isArrayIndex(len)) {\n          throw new RangeError('Invalid array length');\n        }\n        if (isFunction(this)) {\n          arr = new this(len);\n          arr.length = len;\n        } else {\n          arr = new Array(len);\n        }\n        for (var i = 0; i < len; i++) {\n          setProperty(arr, i, isDefined(map) ? map.call(context, a[i], i) : a[i], true);\n        }\n        return arr;\n      }\n  \n    });\n  \n    defineInstancePolyfill(sugarArray, {\n  \n      'find': function(f) {\n        // Force compiler to respect argument length.\n        var argLen = arguments.length, context = arguments[1];\n        assertCallable(f);\n        for (var i = 0, len = this.length; i < len; i++) {\n          if (f.call(context, this[i], i, this)) {\n            return this[i];\n          }\n        }\n      },\n  \n      'findIndex': function(f) {\n        // Force compiler to respect argument length.\n        var argLen = arguments.length, context = arguments[1];\n        assertCallable(f);\n        for (var i = 0, len = this.length; i < len; i++) {\n          if (f.call(context, this[i], i, this)) {\n            return i;\n          }\n        }\n        return -1;\n      }\n  \n    });\n  \n    /***\n     * @module ES7\n     * @description Polyfills that provide basic ES7 compatibility. This module\n     *              provides the base for Sugar functionality, but is not a full\n     *              polyfill suite.\n     *\n     ***/\n  \n  \n    /*** @namespace Array ***/\n  \n    function sameValueZero(a, b) {\n      if (isRealNaN(a)) {\n        return isRealNaN(b);\n      }\n      return a === b ? a !== 0 || 1 / a === 1 / b : false;\n    }\n  \n    defineInstancePolyfill(sugarArray, {\n  \n      /***\n       * @method includes(search, [fromIndex] = 0)\n       * @returns Boolean\n       * @polyfill ES7\n       * @short Returns true if `search` is contained within the array.\n       * @extra Search begins at [fromIndex], which defaults to the beginning of the\n       *        array.\n       *\n       * @example\n       *\n       *   [1,2,3].includes(2)    -> true\n       *   [1,2,3].includes(4)    -> false\n       *   [1,2,3].includes(2, 3) -> false\n       *\n       ***/\n      'includes': function(search) {\n        // Force compiler to respect argument length.\n        var argLen = arguments.length, fromIndex = arguments[1];\n        var arr = this, len;\n        if (isString(arr)) return arr.includes(search, fromIndex);\n        fromIndex = fromIndex ? fromIndex.valueOf() : 0;\n        len = arr.length;\n        if (fromIndex < 0) {\n          fromIndex = max(0, fromIndex + len);\n        }\n        for (var i = fromIndex; i < len; i++) {\n          if (sameValueZero(search, arr[i])) {\n            return true;\n          }\n        }\n        return false;\n      }\n  \n    });\n  \n    /***\n     * @module Date\n     * @description Date parsing and formatting, relative formats, number shortcuts,\n     *              and locale support with default English locales.\n     *\n     ***/\n  \n    var DATE_OPTIONS = {\n      'newDateInternal': defaultNewDate\n    };\n  \n    var LOCALE_ARRAY_FIELDS = [\n      'months', 'weekdays', 'units', 'numerals', 'placeholders',\n      'articles', 'tokens', 'timeMarkers', 'ampm', 'timeSuffixes',\n      'parse', 'timeParse', 'timeFrontParse', 'modifiers'\n    ];\n  \n    // Regex for stripping Timezone Abbreviations\n    var TIMEZONE_ABBREVIATION_REG = /(\\w{3})[()\\s\\d]*$/;\n  \n    // One minute in milliseconds\n    var MINUTES = 60 * 1000;\n  \n    // Date unit indexes\n    var HOURS_INDEX   = 3,\n        DAY_INDEX     = 4,\n        WEEK_INDEX    = 5,\n        MONTH_INDEX   = 6,\n        YEAR_INDEX    = 7;\n  \n    // ISO Defaults\n    var ISO_FIRST_DAY_OF_WEEK = 1,\n        ISO_FIRST_DAY_OF_WEEK_YEAR = 4;\n  \n    var ParsingTokens = {\n      'yyyy': {\n        param: 'year',\n        src: '\\\\d{4}'\n      },\n      'MM': {\n        param: 'month',\n        src: '[01]?\\\\d'\n      },\n      'dd': {\n        param: 'date',\n        src: '[0123]?\\\\d'\n      },\n      'hh': {\n        param: 'hour',\n        src: '[0-2]?\\\\d'\n      },\n      'mm': {\n        param: 'minute',\n        src: '[0-5]\\\\d'\n      },\n      'ss': {\n        param: 'second',\n        src: '[0-5]\\\\d(?:[,.]\\\\d+)?'\n      },\n      'yy': {\n        param: 'year',\n        src: '\\\\d{2}'\n      },\n      'y': {\n        param: 'year',\n        src: '\\\\d'\n      },\n      'yearSign': {\n        src: '[+-]',\n        sign: true\n      },\n      'tzHour': {\n        src: '[0-1]\\\\d'\n      },\n      'tzMinute': {\n        src: '[0-5]\\\\d'\n      },\n      'tzSign': {\n        src: '[+−-]',\n        sign: true\n      },\n      'ihh': {\n        param: 'hour',\n        src: '[0-2]?\\\\d(?:[,.]\\\\d+)?'\n      },\n      'imm': {\n        param: 'minute',\n        src: '[0-5]\\\\d(?:[,.]\\\\d+)?'\n      },\n      'GMT': {\n        param: 'utc',\n        src: 'GMT',\n        val: 1\n      },\n      'Z': {\n        param: 'utc',\n        src: 'Z',\n        val: 1\n      },\n      'timestamp': {\n        src: '\\\\d+'\n      }\n    };\n  \n    var LocalizedParsingTokens = {\n      'year': {\n        base: 'yyyy',\n        requiresSuffix: true\n      },\n      'month': {\n        base: 'MM',\n        requiresSuffix: true\n      },\n      'date': {\n        base: 'dd',\n        requiresSuffix: true\n      },\n      'hour': {\n        base: 'hh',\n        requiresSuffixOr: ':'\n      },\n      'minute': {\n        base: 'mm'\n      },\n      'second': {\n        base: 'ss'\n      },\n      'num': {\n        src: '\\\\d+',\n        requiresNumerals: true\n      }\n    };\n  \n    var CoreParsingFormats = [\n      {\n        // 12-1978\n        // 08-1978 (MDY)\n        src: '{MM}[-.\\\\/]{yyyy}'\n      },\n      {\n        // 12/08/1978\n        // 08/12/1978 (MDY)\n        time: true,\n        src: '{dd}[-.\\\\/]{MM}(?:[-.\\\\/]{yyyy|yy|y})?',\n        mdy: '{MM}[-.\\\\/]{dd}(?:[-.\\\\/]{yyyy|yy|y})?'\n      },\n      {\n        // 1975-08-25\n        time: true,\n        src: '{yyyy}[-.\\\\/]{MM}(?:[-.\\\\/]{dd})?'\n      },\n      {\n        // .NET JSON\n        src: '\\\\\\\\/Date\\\\({timestamp}(?:[+-]\\\\d{4,4})?\\\\)\\\\\\\\/'\n      },\n      {\n        // ISO-8601\n        src: '{yearSign?}{yyyy}(?:-?{MM}(?:-?{dd}(?:T{ihh}(?::?{imm}(?::?{ss})?)?)?)?)?{tzOffset?}'\n      }\n    ];\n  \n    var CoreOutputFormats = {\n      'ISO8601': '{yyyy}-{MM}-{dd}T{HH}:{mm}:{ss}.{SSS}{Z}',\n      'RFC1123': '{Dow}, {dd} {Mon} {yyyy} {HH}:{mm}:{ss} {ZZ}',\n      'RFC1036': '{Weekday}, {dd}-{Mon}-{yy} {HH}:{mm}:{ss} {ZZ}'\n    };\n  \n    var FormatTokensBase = [\n      {\n        ldml: 'Dow',\n        strf: 'a',\n        lowerToken: 'dow',\n        get: function(d, localeCode) {\n          return localeManager.get(localeCode).getWeekdayName(getWeekday(d), 2);\n        }\n      },\n      {\n        ldml: 'Weekday',\n        strf: 'A',\n        lowerToken: 'weekday',\n        allowAlternates: true,\n        get: function(d, localeCode, alternate) {\n          return localeManager.get(localeCode).getWeekdayName(getWeekday(d), alternate);\n        }\n      },\n      {\n        ldml: 'Mon',\n        strf: 'b h',\n        lowerToken: 'mon',\n        get: function(d, localeCode) {\n          return localeManager.get(localeCode).getMonthName(getMonth(d), 2);\n        }\n      },\n      {\n        ldml: 'Month',\n        strf: 'B',\n        lowerToken: 'month',\n        allowAlternates: true,\n        get: function(d, localeCode, alternate) {\n          return localeManager.get(localeCode).getMonthName(getMonth(d), alternate);\n        }\n      },\n      {\n        strf: 'C',\n        get: function(d) {\n          return getYear(d).toString().slice(0, 2);\n        }\n      },\n      {\n        ldml: 'd date day',\n        strf: 'd',\n        strfPadding: 2,\n        ldmlPaddedToken: 'dd',\n        ordinalToken: 'do',\n        get: function(d) {\n          return getDate(d);\n        }\n      },\n      {\n        strf: 'e',\n        get: function(d) {\n          return padNumber(getDate(d), 2, false, 10, ' ');\n        }\n      },\n      {\n        ldml: 'H 24hr',\n        strf: 'H',\n        strfPadding: 2,\n        ldmlPaddedToken: 'HH',\n        get: function(d) {\n          return getHours(d);\n        }\n      },\n      {\n        ldml: 'h hours 12hr',\n        strf: 'I',\n        strfPadding: 2,\n        ldmlPaddedToken: 'hh',\n        get: function(d) {\n          return getHours(d) % 12 || 12;\n        }\n      },\n      {\n        ldml: 'D',\n        strf: 'j',\n        strfPadding: 3,\n        ldmlPaddedToken: 'DDD',\n        get: function(d) {\n          var s = setUnitAndLowerToEdge(cloneDate(d), MONTH_INDEX);\n          return getDaysSince(d, s) + 1;\n        }\n      },\n      {\n        ldml: 'M',\n        strf: 'm',\n        strfPadding: 2,\n        ordinalToken: 'Mo',\n        ldmlPaddedToken: 'MM',\n        get: function(d) {\n          return getMonth(d) + 1;\n        }\n      },\n      {\n        ldml: 'm minutes',\n        strf: 'M',\n        strfPadding: 2,\n        ldmlPaddedToken: 'mm',\n        get: function(d) {\n          return callDateGet(d, 'Minutes');\n        }\n      },\n      {\n        ldml: 'Q',\n        get: function(d) {\n          return ceil((getMonth(d) + 1) / 3);\n        }\n      },\n      {\n        ldml: 'TT',\n        strf: 'p',\n        get: function(d, localeCode) {\n          return getMeridiemToken(d, localeCode);\n        }\n      },\n      {\n        ldml: 'tt',\n        strf: 'P',\n        get: function(d, localeCode) {\n          return getMeridiemToken(d, localeCode).toLowerCase();\n        }\n      },\n      {\n        ldml: 'T',\n        lowerToken: 't',\n        get: function(d, localeCode) {\n          return getMeridiemToken(d, localeCode).charAt(0);\n        }\n      },\n      {\n        ldml: 's seconds',\n        strf: 'S',\n        strfPadding: 2,\n        ldmlPaddedToken: 'ss',\n        get: function(d) {\n          return callDateGet(d, 'Seconds');\n        }\n      },\n      {\n        ldml: 'S ms',\n        strfPadding: 3,\n        ldmlPaddedToken: 'SSS',\n        get: function(d) {\n          return callDateGet(d, 'Milliseconds');\n        }\n      },\n      {\n        ldml: 'e',\n        strf: 'u',\n        ordinalToken: 'eo',\n        get: function(d) {\n          return getWeekday(d) || 7;\n        }\n      },\n      {\n        strf: 'U',\n        strfPadding: 2,\n        get: function(d) {\n          // Sunday first, 0-53\n          return getWeekNumber(d, false, 0);\n        }\n      },\n      {\n        ldml: 'W',\n        strf: 'V',\n        strfPadding: 2,\n        ordinalToken: 'Wo',\n        ldmlPaddedToken: 'WW',\n        get: function(d) {\n          // Monday first, 1-53 (ISO8601)\n          return getWeekNumber(d, true);\n        }\n      },\n      {\n        strf: 'w',\n        get: function(d) {\n          return getWeekday(d);\n        }\n      },\n      {\n        ldml: 'w',\n        ordinalToken: 'wo',\n        ldmlPaddedToken: 'ww',\n        get: function(d, localeCode) {\n          // Locale dependent, 1-53\n          var loc = localeManager.get(localeCode),\n              dow = loc.getFirstDayOfWeek(localeCode),\n              doy = loc.getFirstDayOfWeekYear(localeCode);\n          return getWeekNumber(d, true, dow, doy);\n        }\n      },\n      {\n        strf: 'W',\n        strfPadding: 2,\n        get: function(d) {\n          // Monday first, 0-53\n          return getWeekNumber(d, false);\n        }\n      },\n      {\n        ldmlPaddedToken: 'gggg',\n        ldmlTwoDigitToken: 'gg',\n        get: function(d, localeCode) {\n          return getWeekYear(d, localeCode);\n        }\n      },\n      {\n        strf: 'G',\n        strfPadding: 4,\n        strfTwoDigitToken: 'g',\n        ldmlPaddedToken: 'GGGG',\n        ldmlTwoDigitToken: 'GG',\n        get: function(d, localeCode) {\n          return getWeekYear(d, localeCode, true);\n        }\n      },\n      {\n        ldml: 'year',\n        ldmlPaddedToken: 'yyyy',\n        ldmlTwoDigitToken: 'yy',\n        strf: 'Y',\n        strfPadding: 4,\n        strfTwoDigitToken: 'y',\n        get: function(d) {\n          return getYear(d);\n        }\n      },\n      {\n        ldml: 'ZZ',\n        strf: 'z',\n        get: function(d) {\n          return getUTCOffset(d);\n        }\n      },\n      {\n        ldml: 'X',\n        get: function(d) {\n          return trunc(d.getTime() / 1000);\n        }\n      },\n      {\n        ldml: 'x',\n        get: function(d) {\n          return d.getTime();\n        }\n      },\n      {\n        ldml: 'Z',\n        get: function(d) {\n          return getUTCOffset(d, true);\n        }\n      },\n      {\n        ldml: 'z',\n        strf: 'Z',\n        get: function(d) {\n          // Note that this is not accurate in all browsing environments!\n          // https://github.com/moment/moment/issues/162\n          // It will continue to be supported for Node and usage with the\n          // understanding that it may be blank.\n          var match = d.toString().match(TIMEZONE_ABBREVIATION_REG);\n          return match ? match[1]: '';\n        }\n      },\n      {\n        strf: 'D',\n        alias: '%m/%d/%y'\n      },\n      {\n        strf: 'F',\n        alias: '%Y-%m-%d'\n      },\n      {\n        strf: 'r',\n        alias: '%I:%M:%S %p'\n      },\n      {\n        strf: 'R',\n        alias: '%H:%M'\n      },\n      {\n        strf: 'T',\n        alias: '%H:%M:%S'\n      },\n      {\n        strf: 'x',\n        alias: '{short}'\n      },\n      {\n        strf: 'X',\n        alias: '{time}'\n      },\n      {\n        strf: 'c',\n        alias: '{stamp}'\n      }\n    ];\n  \n    var DateUnits = [\n      {\n        name: 'millisecond',\n        method: 'Milliseconds',\n        multiplier: 1,\n        start: 0,\n        end: 999\n      },\n      {\n        name: 'second',\n        method: 'Seconds',\n        multiplier: 1000,\n        start: 0,\n        end: 59\n      },\n      {\n        name: 'minute',\n        method: 'Minutes',\n        multiplier: 60 * 1000,\n        start: 0,\n        end: 59\n      },\n      {\n        name: 'hour',\n        method: 'Hours',\n        multiplier: 60 * 60 * 1000,\n        start: 0,\n        end: 23\n      },\n      {\n        name: 'day',\n        alias: 'date',\n        method: 'Date',\n        ambiguous: true,\n        multiplier: 24 * 60 * 60 * 1000,\n        start: 1,\n        end: function(d) {\n          return getDaysInMonth(d);\n        }\n      },\n      {\n        name: 'week',\n        method: 'ISOWeek',\n        ambiguous: true,\n        multiplier: 7 * 24 * 60 * 60 * 1000\n      },\n      {\n        name: 'month',\n        method: 'Month',\n        ambiguous: true,\n        multiplier: 30.4375 * 24 * 60 * 60 * 1000,\n        start: 0,\n        end: 11\n      },\n      {\n        name: 'year',\n        method: 'FullYear',\n        ambiguous: true,\n        multiplier: 365.25 * 24 * 60 * 60 * 1000,\n        start: 0\n      }\n    ];\n  \n    /***\n     * @method getOption(name)\n     * @returns Mixed\n     * @accessor\n     * @short Gets an option used interally by Date.\n     * @example\n     *\n     *   Sugar.Date.getOption('newDateInternal');\n     *\n     * @param {string} name\n     *\n     ***\n     * @method setOption(name, value)\n     * @accessor\n     * @short Sets an option used interally by Date.\n     * @extra If `value` is `null`, the default value will be restored.\n     * @options\n     *\n     *   newDateInternal   Sugar's internal date constructor. Date methods often\n     *                     construct a `new Date()` internally as a reference point\n     *                     (`isToday`, relative formats like `tomorrow`, etc). This\n     *                     can be overridden if you need it to be something else.\n     *                     Most commonly, this allows you to return a shifted date\n     *                     to simulate a specific timezone, as dates in Javascript\n     *                     are always local.\n     *\n     * @example\n     *\n     *   Sugar.Date.setOption('newDateInternal', function() {\n     *     var d = new Date(), offset;\n     *     offset = (d.getTimezoneOffset() - 600) * 60 * 1000; // Hawaii time!\n     *     d.setTime(d.getTime() + offset);\n     *     return d;\n     *   });\n     *\n     * @signature setOption(options)\n     * @param {DateOptions} options\n     * @param {string} name\n     * @param {any} value\n     * @option {Function} newDateInternal\n     *\n     ***/\n    var _dateOptions = defineOptionsAccessor(sugarDate, DATE_OPTIONS);\n  \n    function setDateChainableConstructor() {\n      setChainableConstructor(sugarDate, createDate);\n    }\n  \n    // General helpers\n  \n    function getNewDate() {\n      return _dateOptions('newDateInternal')();\n    }\n  \n    function defaultNewDate() {\n      return new Date;\n    }\n  \n    function cloneDate(d) {\n      // Rhino environments have a bug where new Date(d) truncates\n      // milliseconds so need to call getTime() here.\n      var clone = new Date(d.getTime());\n      _utc(clone, !!_utc(d));\n      return clone;\n    }\n  \n    function dateIsValid(d) {\n      return !isNaN(d.getTime());\n    }\n  \n    function assertDateIsValid(d) {\n      if (!dateIsValid(d)) {\n        throw new TypeError('Date is not valid');\n      }\n    }\n  \n    function getHours(d) {\n      return callDateGet(d, 'Hours');\n    }\n  \n    function getWeekday(d) {\n      return callDateGet(d, 'Day');\n    }\n  \n    function getDate(d) {\n      return callDateGet(d, 'Date');\n    }\n  \n    function getMonth(d) {\n      return callDateGet(d, 'Month');\n    }\n  \n    function getYear(d) {\n      return callDateGet(d, 'FullYear');\n    }\n  \n    function setDate(d, val) {\n      callDateSet(d, 'Date', val);\n    }\n  \n    function setMonth(d, val) {\n      callDateSet(d, 'Month', val);\n    }\n  \n    function setYear(d, val) {\n      callDateSet(d, 'FullYear', val);\n    }\n  \n    function getDaysInMonth(d) {\n      return 32 - callDateGet(new Date(getYear(d), getMonth(d), 32), 'Date');\n    }\n  \n    function setWeekday(d, dow, dir) {\n      if (!isNumber(dow)) return;\n      var currentWeekday = getWeekday(d);\n      if (dir) {\n        // Allow a \"direction\" parameter to determine whether a weekday can\n        // be set beyond the current weekday in either direction.\n        var ndir = dir > 0 ? 1 : -1;\n        var offset = dow % 7 - currentWeekday;\n        if (offset && offset / abs(offset) !== ndir) {\n          dow += 7 * ndir;\n        }\n      }\n      setDate(d, getDate(d) + dow - currentWeekday);\n      return d.getTime();\n    }\n  \n    // Normal callDateSet method with ability\n    // to handle ISOWeek setting as well.\n    function callDateSetWithWeek(d, method, value, safe) {\n      if (method === 'ISOWeek') {\n        setISOWeekNumber(d, value);\n      } else {\n        callDateSet(d, method, value, safe);\n      }\n    }\n  \n    // UTC helpers\n  \n    function isUTC(d) {\n      return !!_utc(d) || tzOffset(d) === 0;\n    }\n  \n    function getUTCOffset(d, iso) {\n      var offset = _utc(d) ? 0 : tzOffset(d), hours, mins, colon;\n      colon  = iso === true ? ':' : '';\n      if (!offset && iso) return 'Z';\n      hours = padNumber(trunc(-offset / 60), 2, true);\n      mins = padNumber(abs(offset % 60), 2);\n      return  hours + colon + mins;\n    }\n  \n    function tzOffset(d) {\n      return d.getTimezoneOffset();\n    }\n  \n    // Argument helpers\n  \n    function collectDateArguments(args, allowDuration) {\n      var arg1 = args[0], arg2 = args[1];\n      if (allowDuration && isString(arg1)) {\n        arg1 = getDateParamsFromString(arg1);\n      } else if (isNumber(arg1) && isNumber(arg2)) {\n        arg1 = collectDateParamsFromArguments(args);\n        arg2 = null;\n      } else {\n        if (isObjectType(arg1)) {\n          arg1 = simpleClone(arg1);\n        }\n      }\n      return [arg1, arg2];\n    }\n  \n    function collectDateParamsFromArguments(args) {\n      var params = {}, index = 0;\n      walkUnitDown(YEAR_INDEX, function(unit) {\n        var arg = args[index++];\n        if (isDefined(arg)) {\n          params[unit.name] = arg;\n        }\n      });\n      return params;\n    }\n  \n    function getDateParamsFromString(str) {\n      var match, num, params = {};\n      match = str.match(/^(-?\\d*[\\d.]\\d*)?\\s?(\\w+?)s?$/i);\n      if (match) {\n        if (isUndefined(num)) {\n          num = +match[1];\n          if (isNaN(num)) {\n            num = 1;\n          }\n        }\n        params[match[2].toLowerCase()] = num;\n      }\n      return params;\n    }\n  \n    // Iteration helpers\n  \n    // Years -> Milliseconds\n    function iterateOverDateUnits(fn, startIndex, endIndex) {\n      endIndex = endIndex || 0;\n      if (isUndefined(startIndex)) {\n        startIndex = YEAR_INDEX;\n      }\n      for (var index = startIndex; index >= endIndex; index--) {\n        if (fn(DateUnits[index], index) === false) {\n          break;\n        }\n      }\n    }\n  \n    // Years -> Milliseconds using getLower/Higher methods\n    function walkUnitDown(unitIndex, fn) {\n      while (unitIndex >= 0) {\n        if (fn(DateUnits[unitIndex], unitIndex) === false) {\n          break;\n        }\n        unitIndex = getLowerUnitIndex(unitIndex);\n      }\n    }\n  \n    // Moving lower from specific unit\n    function getLowerUnitIndex(index) {\n      if (index === MONTH_INDEX) {\n        return DAY_INDEX;\n      } else if (index === WEEK_INDEX) {\n        return HOURS_INDEX;\n      }\n      return index - 1;\n    }\n  \n    // Moving higher from specific unit\n    function getHigherUnitIndex(index) {\n      return index === DAY_INDEX ? MONTH_INDEX : index + 1;\n    }\n  \n    // Years -> Milliseconds checking all date params including \"weekday\"\n    function iterateOverDateParams(params, fn, startIndex, endIndex) {\n  \n      function run(name, unit, i) {\n        var val = getDateParam(params, name);\n        if (isDefined(val)) {\n          fn(name, val, unit, i);\n        }\n      }\n  \n      iterateOverDateUnits(function (unit, i) {\n        var result = run(unit.name, unit, i);\n        if (result !== false && i === DAY_INDEX) {\n          // Check for \"weekday\", which has a distinct meaning\n          // in the context of setting a date, but has the same\n          // meaning as \"day\" as a unit of time.\n          result = run('weekday', unit, i);\n        }\n        return result;\n      }, startIndex, endIndex);\n  \n    }\n  \n    // Years -> Days\n    function iterateOverHigherDateParams(params, fn) {\n      iterateOverDateParams(params, fn, YEAR_INDEX, DAY_INDEX);\n    }\n  \n    // Advancing helpers\n  \n    function advanceDate(d, unit, num, reset) {\n      var set = {};\n      set[unit] = num;\n      return updateDate(d, set, reset, 1);\n    }\n  \n    function advanceDateWithArgs(d, args, dir) {\n      args = collectDateArguments(args, true);\n      return updateDate(d, args[0], args[1], dir);\n    }\n  \n    // Edge helpers\n  \n    function resetTime(d) {\n      return setUnitAndLowerToEdge(d, HOURS_INDEX);\n    }\n  \n    function resetLowerUnits(d, unitIndex) {\n      return setUnitAndLowerToEdge(d, getLowerUnitIndex(unitIndex));\n    }\n  \n    function moveToBeginningOfWeek(d, firstDayOfWeek) {\n      setWeekday(d, floor((getWeekday(d) - firstDayOfWeek) / 7) * 7 + firstDayOfWeek);\n      return d;\n    }\n  \n    function moveToEndOfWeek(d, firstDayOfWeek) {\n      var target = firstDayOfWeek - 1;\n      setWeekday(d, ceil((getWeekday(d) - target) / 7) * 7 + target);\n      return d;\n    }\n  \n    function moveToBeginningOfUnit(d, unitIndex, localeCode) {\n      if (unitIndex === WEEK_INDEX) {\n        moveToBeginningOfWeek(d, localeManager.get(localeCode).getFirstDayOfWeek());\n      }\n      return setUnitAndLowerToEdge(d, getLowerUnitIndex(unitIndex));\n    }\n  \n    function moveToEndOfUnit(d, unitIndex, localeCode, stopIndex) {\n      if (unitIndex === WEEK_INDEX) {\n        moveToEndOfWeek(d, localeManager.get(localeCode).getFirstDayOfWeek());\n      }\n      return setUnitAndLowerToEdge(d, getLowerUnitIndex(unitIndex), stopIndex, true);\n    }\n  \n    function setUnitAndLowerToEdge(d, startIndex, stopIndex, end) {\n      walkUnitDown(startIndex, function(unit, i) {\n        var val = end ? unit.end : unit.start;\n        if (isFunction(val)) {\n          val = val(d);\n        }\n        callDateSet(d, unit.method, val);\n        return !isDefined(stopIndex) || i > stopIndex;\n      });\n      return d;\n    }\n  \n    // Param helpers\n  \n    function getDateParamKey(params, key) {\n      return getOwnKey(params, key) ||\n             getOwnKey(params, key + 's') ||\n             (key === 'day' && getOwnKey(params, 'date'));\n    }\n  \n    function getDateParam(params, key) {\n      return getOwn(params, getDateParamKey(params, key));\n    }\n  \n    function deleteDateParam(params, key) {\n      delete params[getDateParamKey(params, key)];\n    }\n  \n    function getUnitIndexForParamName(name) {\n      var params = {}, unitIndex;\n      params[name] = 1;\n      iterateOverDateParams(params, function(name, val, unit, i) {\n        unitIndex = i;\n        return false;\n      });\n      return unitIndex;\n    }\n  \n    // Time distance helpers\n  \n    function getDaysSince(d1, d2) {\n      return getTimeDistanceForUnit(d1, d2, DateUnits[DAY_INDEX]);\n    }\n  \n    function getTimeDistanceForUnit(d1, d2, unit) {\n      var fwd = d2 > d1, num, tmp;\n      if (!fwd) {\n        tmp = d2;\n        d2  = d1;\n        d1  = tmp;\n      }\n      num = d2 - d1;\n      if (unit.multiplier > 1) {\n        num = trunc(num / unit.multiplier);\n      }\n      // For higher order with potential ambiguity, use the numeric calculation\n      // as a starting point, then iterate until we pass the target date.\n      if (unit.ambiguous) {\n        d1 = cloneDate(d1);\n        if (num) {\n          advanceDate(d1, unit.name, num);\n        }\n        while (d1 < d2) {\n          advanceDate(d1, unit.name, 1);\n          if (d1 > d2) {\n            break;\n          }\n          num += 1;\n        }\n      }\n      return fwd ? -num : num;\n    }\n  \n    // Parsing helpers\n  \n    function getParsingTokenValue(token, str) {\n      var val;\n      if (token.val) {\n        val = token.val;\n      } else if (token.sign) {\n        val = str === '+' ? 1 : -1;\n      } else if (token.bool) {\n        val = !!val;\n      } else {\n        val = +str.replace(/,/, '.');\n      }\n      if (token.param === 'month') {\n        val -= 1;\n      }\n      return val;\n    }\n  \n    function getYearFromAbbreviation(str, d, prefer) {\n      // Following IETF here, adding 1900 or 2000 depending on the last two digits.\n      // Note that this makes no accordance for what should happen after 2050, but\n      // intentionally ignoring this for now. https://www.ietf.org/rfc/rfc2822.txt\n      var val = +str, delta;\n      val += val < 50 ? 2000 : 1900;\n      if (prefer) {\n        delta = val - getYear(d);\n        if (delta / abs(delta) !== prefer) {\n          val += prefer * 100;\n        }\n      }\n      return val;\n    }\n  \n    // Week number helpers\n  \n    function setISOWeekNumber(d, num) {\n      if (isNumber(num)) {\n        // Intentionally avoiding updateDate here to prevent circular dependencies.\n        var isoWeek = cloneDate(d), dow = getWeekday(d);\n        moveToFirstDayOfWeekYear(isoWeek, ISO_FIRST_DAY_OF_WEEK, ISO_FIRST_DAY_OF_WEEK_YEAR);\n        setDate(isoWeek, getDate(isoWeek) + 7 * (num - 1));\n        setYear(d, getYear(isoWeek));\n        setMonth(d, getMonth(isoWeek));\n        setDate(d, getDate(isoWeek));\n        setWeekday(d, dow || 7);\n      }\n      return d.getTime();\n    }\n  \n    function getWeekNumber(d, allowPrevious, firstDayOfWeek, firstDayOfWeekYear) {\n      var isoWeek, n = 0;\n      if (isUndefined(firstDayOfWeek)) {\n        firstDayOfWeek = ISO_FIRST_DAY_OF_WEEK;\n      }\n      if (isUndefined(firstDayOfWeekYear)) {\n        firstDayOfWeekYear = ISO_FIRST_DAY_OF_WEEK_YEAR;\n      }\n      // Moving to the end of the week allows for forward year traversal, ie\n      // Dec 29 2014 is actually week 01 of 2015.\n      isoWeek = moveToEndOfWeek(cloneDate(d), firstDayOfWeek);\n      moveToFirstDayOfWeekYear(isoWeek, firstDayOfWeek, firstDayOfWeekYear);\n      if (allowPrevious && d < isoWeek) {\n        // If the date is still before the start of the year, then it should be\n        // the last week of the previous year, ie Jan 1 2016 is actually week 53\n        // of 2015, so move to the beginning of the week to traverse the year.\n        isoWeek = moveToBeginningOfWeek(cloneDate(d), firstDayOfWeek);\n        moveToFirstDayOfWeekYear(isoWeek, firstDayOfWeek, firstDayOfWeekYear);\n      }\n      while (isoWeek <= d) {\n        // Doing a very simple walk to get the week number.\n        setDate(isoWeek, getDate(isoWeek) + 7);\n        n++;\n      }\n      return n;\n    }\n  \n    // Week year helpers\n  \n    function getWeekYear(d, localeCode, iso) {\n      var year, month, firstDayOfWeek, firstDayOfWeekYear, week, loc;\n      year = getYear(d);\n      month = getMonth(d);\n      if (month === 0 || month === 11) {\n        if (!iso) {\n          loc = localeManager.get(localeCode);\n          firstDayOfWeek = loc.getFirstDayOfWeek(localeCode);\n          firstDayOfWeekYear = loc.getFirstDayOfWeekYear(localeCode);\n        }\n        week = getWeekNumber(d, false, firstDayOfWeek, firstDayOfWeekYear);\n        if (month === 0 && week === 0) {\n          year -= 1;\n        } else if (month === 11 && week === 1) {\n          year += 1;\n        }\n      }\n      return year;\n    }\n  \n    function moveToFirstDayOfWeekYear(d, firstDayOfWeek, firstDayOfWeekYear) {\n      setUnitAndLowerToEdge(d, MONTH_INDEX);\n      setDate(d, firstDayOfWeekYear);\n      moveToBeginningOfWeek(d, firstDayOfWeek);\n    }\n  \n    // Relative helpers\n  \n    function dateRelative(d, dRelative, arg1, arg2) {\n      var adu, format, type, localeCode, fn;\n      assertDateIsValid(d);\n      if (isFunction(arg1)) {\n        fn = arg1;\n      } else {\n        localeCode = arg1;\n        fn = arg2;\n      }\n      adu = getAdjustedUnitForDate(d, dRelative);\n      if (fn) {\n        format = fn.apply(d, adu.concat(localeManager.get(localeCode)));\n        if (format) {\n          return dateFormat(d, format, localeCode);\n        }\n      }\n      // Adjust up if time is in ms, as this doesn't\n      // look very good for a standard relative date.\n      if (adu[1] === 0) {\n        adu[1] = 1;\n        adu[0] = 1;\n      }\n      if (dRelative) {\n        type = 'duration';\n      } else if (adu[2] > 0) {\n        type = 'future';\n      } else {\n        type = 'past';\n      }\n      return localeManager.get(localeCode).getRelativeFormat(adu, type);\n    }\n  \n    // Gets an \"adjusted date unit\" which is a way of representing\n    // the largest possible meaningful unit. In other words, if passed\n    // 3600000, this will return an array which represents \"1 hour\".\n    function getAdjustedUnit(ms, fn) {\n      var unitIndex = 0, value = 0;\n      iterateOverDateUnits(function(unit, i) {\n        value = abs(fn(unit));\n        if (value >= 1) {\n          unitIndex = i;\n          return false;\n        }\n      });\n      return [value, unitIndex, ms];\n    }\n  \n    // Gets the adjusted unit based on simple division by\n    // date unit multiplier.\n    function getAdjustedUnitForNumber(ms) {\n      return getAdjustedUnit(ms, function(unit) {\n        return trunc(withPrecision(ms / unit.multiplier, 1));\n      });\n    }\n  \n    // Gets the adjusted unit using the unitsFromNow methods,\n    // which use internal date methods that neatly avoid vaguely\n    // defined units of time (days in month, leap years, etc).\n    // Reserving dRelative to allow another date to be relative to.\n    function getAdjustedUnitForDate(d, dRelative) {\n      var ms;\n      if (!dRelative) {\n        dRelative = getNewDate();\n        if (d > dRelative) {\n          // If our date is greater than the one that we got from getNewDate, it\n          // means that we are finding the unit for a date that is in the future\n          // relative to now. However, often the incoming date was created in\n          // the same cycle as our comparison, but our \"now\" date will have been\n          // created an instant after it, creating situations where \"5 minutes from\n          // now\" becomes \"4 minutes from now\" in the same tick. To prevent this,\n          // subtract a buffer of 10ms to compensate.\n          dRelative = new Date(dRelative.getTime() - 10);\n        }\n      }\n      ms = d - dRelative;\n      return getAdjustedUnit(ms, function(u) {\n        return abs(getTimeDistanceForUnit(d, dRelative, u));\n      });\n    }\n  \n    // Foramtting helpers\n  \n    // Formatting tokens\n    var ldmlTokens, strfTokens;\n  \n    function dateFormat(d, format, localeCode) {\n      assertDateIsValid(d);\n      format = CoreOutputFormats[format] || format || '{long}';\n      return dateFormatMatcher(format, d, localeCode);\n    }\n  \n    function getMeridiemToken(d, localeCode) {\n      var hours = getHours(d);\n      return localeManager.get(localeCode).ampm[trunc(hours / 12)] || '';\n    }\n  \n    function buildDateFormatTokens() {\n  \n      function addFormats(target, tokens, fn) {\n        if (tokens) {\n          forEach(spaceSplit(tokens), function(token) {\n            target[token] = fn;\n          });\n        }\n      }\n  \n      function buildLowercase(get) {\n        return function(d, localeCode) {\n          return get(d, localeCode).toLowerCase();\n        };\n      }\n  \n      function buildOrdinal(get) {\n        return function(d, localeCode) {\n          var n = get(d, localeCode);\n          return n + localeManager.get(localeCode).getOrdinal(n);\n        };\n      }\n  \n      function buildPadded(get, padding) {\n        return function(d, localeCode) {\n          return padNumber(get(d, localeCode), padding);\n        };\n      }\n  \n      function buildTwoDigits(get) {\n        return function(d, localeCode) {\n          return get(d, localeCode) % 100;\n        };\n      }\n  \n      function buildAlias(alias) {\n        return function(d, localeCode) {\n          return dateFormatMatcher(alias, d, localeCode);\n        };\n      }\n  \n      function buildAlternates(f) {\n        for (var n = 1; n <= 5; n++) {\n          buildAlternate(f, n);\n        }\n      }\n  \n      function buildAlternate(f, n) {\n        var alternate = function(d, localeCode) {\n          return f.get(d, localeCode, n);\n        };\n        addFormats(ldmlTokens, f.ldml + n, alternate);\n        if (f.lowerToken) {\n          ldmlTokens[f.lowerToken + n] = buildLowercase(alternate);\n        }\n      }\n  \n      function getIdentityFormat(name) {\n        return function(d, localeCode) {\n          var loc = localeManager.get(localeCode);\n          return dateFormatMatcher(loc[name], d, localeCode);\n        };\n      }\n  \n      ldmlTokens = {};\n      strfTokens = {};\n  \n      forEach(FormatTokensBase, function(f) {\n        var get = f.get, getPadded;\n        if (f.lowerToken) {\n          ldmlTokens[f.lowerToken] = buildLowercase(get);\n        }\n        if (f.ordinalToken) {\n          ldmlTokens[f.ordinalToken] = buildOrdinal(get, f);\n        }\n        if (f.ldmlPaddedToken) {\n          ldmlTokens[f.ldmlPaddedToken] = buildPadded(get, f.ldmlPaddedToken.length);\n        }\n        if (f.ldmlTwoDigitToken) {\n          ldmlTokens[f.ldmlTwoDigitToken] = buildPadded(buildTwoDigits(get), 2);\n        }\n        if (f.strfTwoDigitToken) {\n          strfTokens[f.strfTwoDigitToken] = buildPadded(buildTwoDigits(get), 2);\n        }\n        if (f.strfPadding) {\n          getPadded = buildPadded(get, f.strfPadding);\n        }\n        if (f.alias) {\n          get = buildAlias(f.alias);\n        }\n        if (f.allowAlternates) {\n          buildAlternates(f);\n        }\n        addFormats(ldmlTokens, f.ldml, get);\n        addFormats(strfTokens, f.strf, getPadded || get);\n      });\n  \n      forEachProperty(CoreOutputFormats, function(src, name) {\n        addFormats(ldmlTokens, name, buildAlias(src));\n      });\n  \n      defineInstanceSimilar(sugarDate, 'short medium long full', function(methods, name) {\n        var fn = getIdentityFormat(name);\n        addFormats(ldmlTokens, name, fn);\n        methods[name] = fn;\n      });\n  \n      addFormats(ldmlTokens, 'time', getIdentityFormat('time'));\n      addFormats(ldmlTokens, 'stamp', getIdentityFormat('stamp'));\n    }\n  \n    // Format matcher\n  \n    var dateFormatMatcher;\n  \n    function buildDateFormatMatcher() {\n  \n      function getLdml(d, token, localeCode) {\n        return getOwn(ldmlTokens, token)(d, localeCode);\n      }\n  \n      function getStrf(d, token, localeCode) {\n        return getOwn(strfTokens, token)(d, localeCode);\n      }\n  \n      function checkDateToken(ldml, strf) {\n        return hasOwn(ldmlTokens, ldml) || hasOwn(strfTokens, strf);\n      }\n  \n      // Format matcher for LDML or STRF tokens.\n      dateFormatMatcher = createFormatMatcher(getLdml, getStrf, checkDateToken);\n    }\n  \n    // Comparison helpers\n  \n    function fullCompareDate(date, d, margin) {\n      var tmp;\n      if (!dateIsValid(date)) return;\n      if (isString(d)) {\n        d = trim(d).toLowerCase();\n        switch(true) {\n          case d === 'future':    return date.getTime() > getNewDate().getTime();\n          case d === 'past':      return date.getTime() < getNewDate().getTime();\n          case d === 'today':     return compareDay(date);\n          case d === 'tomorrow':  return compareDay(date,  1);\n          case d === 'yesterday': return compareDay(date, -1);\n          case d === 'weekday':   return getWeekday(date) > 0 && getWeekday(date) < 6;\n          case d === 'weekend':   return getWeekday(date) === 0 || getWeekday(date) === 6;\n  \n          case (isDefined(tmp = English.weekdayMap[d])):\n            return getWeekday(date) === tmp;\n          case (isDefined(tmp = English.monthMap[d])):\n            return getMonth(date) === tmp;\n        }\n      }\n      return compareDate(date, d, margin);\n    }\n  \n    function compareDate(date, d, margin, localeCode, options) {\n      var loMargin = 0, hiMargin = 0, timezoneShift, compareEdges, override, min, max, p, t;\n  \n      function getTimezoneShift() {\n        // If there is any specificity in the date then we're implicitly not\n        // checking absolute time, so ignore timezone shifts.\n        if (p.set && p.set.specificity) {\n          return 0;\n        }\n        return (tzOffset(p.date) - tzOffset(date)) * MINUTES;\n      }\n  \n      function addSpecificUnit() {\n        var unit = DateUnits[p.set.specificity];\n        return advanceDate(cloneDate(p.date), unit.name, 1).getTime() - 1;\n      }\n  \n      if (_utc(date)) {\n        options = options || {};\n        options.fromUTC = true;\n        options.setUTC = true;\n      }\n  \n      p = getExtendedDate(null, d, options, true);\n  \n      if (margin > 0) {\n        loMargin = hiMargin = margin;\n        override = true;\n      }\n      if (!dateIsValid(p.date)) return false;\n      if (p.set && p.set.specificity) {\n        if (isDefined(p.set.edge) || isDefined(p.set.shift)) {\n          compareEdges = true;\n          moveToBeginningOfUnit(p.date, p.set.specificity, localeCode);\n        }\n        if (compareEdges || p.set.specificity === MONTH_INDEX) {\n          max = moveToEndOfUnit(cloneDate(p.date), p.set.specificity, localeCode).getTime();\n        } else {\n          max = addSpecificUnit();\n        }\n        if (!override && isDefined(p.set.sign) && p.set.specificity) {\n          // If the time is relative, there can occasionally be an disparity between\n          // the relative date and \"now\", which it is being compared to, so set an\n          // extra margin to account for this.\n          loMargin = 50;\n          hiMargin = -50;\n        }\n      }\n      t   = date.getTime();\n      min = p.date.getTime();\n      max = max || min;\n      timezoneShift = getTimezoneShift();\n      if (timezoneShift) {\n        min -= timezoneShift;\n        max -= timezoneShift;\n      }\n      return t >= (min - loMargin) && t <= (max + hiMargin);\n    }\n  \n    function compareDay(d, shift) {\n      var comp = getNewDate();\n      if (shift) {\n        setDate(comp, getDate(comp) + shift);\n      }\n      return getYear(d) === getYear(comp) &&\n             getMonth(d) === getMonth(comp) &&\n             getDate(d) === getDate(comp);\n    }\n  \n    // Create helpers\n  \n    function createDate(d, options, forceClone) {\n      return getExtendedDate(null, d, options, forceClone).date;\n    }\n  \n    function createDateWithContext(contextDate, d, options, forceClone) {\n      return getExtendedDate(contextDate, d, options, forceClone).date;\n    }\n  \n    function getExtendedDate(contextDate, d, opt, forceClone) {\n  \n      var date, set, loc, options, afterCallbacks, relative, weekdayDir;\n  \n      afterCallbacks = [];\n      options = getDateOptions(opt);\n  \n      function getDateOptions(opt) {\n        var options = isString(opt) ? { locale: opt } : opt || {};\n        options.prefer = +!!getOwn(options, 'future') - +!!getOwn(options, 'past');\n        return options;\n      }\n  \n      function getFormatParams(match, dif) {\n        var set = getOwn(options, 'params') || {};\n        forEach(dif.to, function(field, i) {\n          var str = match[i + 1], token, val;\n          if (!str) return;\n          if (field === 'yy' || field === 'y') {\n            field = 'year';\n            val = getYearFromAbbreviation(str, date, getOwn(options, 'prefer'));\n          } else if (token = getOwn(ParsingTokens, field)) {\n            field = token.param || field;\n            val = getParsingTokenValue(token, str);\n          } else {\n            val = loc.getTokenValue(field, str);\n          }\n          set[field] = val;\n        });\n        return set;\n      }\n  \n      // Clone date will set the utc flag, but it will\n      // be overriden later, so set option flags instead.\n      function cloneDateByFlag(d, clone) {\n        if (_utc(d) && !isDefined(getOwn(options, 'fromUTC'))) {\n          options.fromUTC = true;\n        }\n        if (_utc(d) && !isDefined(getOwn(options, 'setUTC'))) {\n          options.setUTC = true;\n        }\n        if (clone) {\n          d = new Date(d.getTime());\n        }\n        return d;\n      }\n  \n      function afterDateSet(fn) {\n        afterCallbacks.push(fn);\n      }\n  \n      function fireCallbacks() {\n        forEach(afterCallbacks, function(fn) {\n          fn.call();\n        });\n      }\n  \n      function parseStringDate(str) {\n  \n        str = str.toLowerCase();\n  \n        // The act of getting the locale will initialize\n        // if it is missing and add the required formats.\n        loc = localeManager.get(getOwn(options, 'locale'));\n  \n        for (var i = 0, dif, match; dif = loc.compiledFormats[i]; i++) {\n          match = str.match(dif.reg);\n          if (match) {\n  \n            // Note that caching the format will modify the compiledFormats array\n            // which is not a good idea to do inside its for loop, however we\n            // know at this point that we have a matched format and that we will\n            // break out below, so simpler to do it here.\n            loc.cacheFormat(dif, i);\n  \n            set = getFormatParams(match, dif);\n  \n            if (isDefined(set.timestamp)) {\n              str = set.timestamp;\n              set = null;\n              break;\n            }\n  \n            if (isDefined(set.ampm)) {\n              handleAmpm(set.ampm);\n            }\n  \n            if (set.utc || isDefined(set.tzHour)) {\n              handleTimezoneOffset(set.tzHour, set.tzMinute, set.tzSign);\n            }\n  \n            if (isDefined(set.shift) && isUndefined(set.unit)) {\n              // \"next january\", \"next monday\", etc\n              handleUnitlessShift();\n            }\n  \n            if (isDefined(set.num) && isUndefined(set.unit)) {\n              // \"the second of January\", etc\n              handleUnitlessNum(set.num);\n            }\n  \n            if (set.midday) {\n              // \"noon\" and \"midnight\"\n              handleMidday(set.midday);\n            }\n  \n            if (isDefined(set.day)) {\n              // Relative day localizations such as \"today\" and \"tomorrow\".\n              handleRelativeDay(set.day);\n            }\n  \n            if (isDefined(set.unit)) {\n              // \"3 days ago\", etc\n              handleRelativeUnit(set.unit);\n            }\n  \n            if (set.edge) {\n              // \"the end of January\", etc\n              handleEdge(set.edge, set);\n            }\n  \n            if (set.yearSign) {\n              set.year *= set.yearSign;\n            }\n  \n            break;\n          }\n        }\n  \n        if (!set) {\n          // Fall back to native parsing\n          date = new Date(str);\n          if (getOwn(options, 'fromUTC')) {\n            // Falling back to system date here which cannot be parsed as UTC,\n            // so if we're forcing UTC then simply add the offset.\n            date.setTime(date.getTime() + (tzOffset(date) * MINUTES));\n          }\n        } else if (relative) {\n          updateDate(date, set, false, 1);\n        } else {\n          if (_utc(date)) {\n            // UTC times can traverse into other days or even months,\n            // so preemtively reset the time here to prevent this.\n            resetTime(date);\n          }\n          updateDate(date, set, true, 0, getOwn(options, 'prefer'), weekdayDir);\n        }\n        fireCallbacks();\n        return date;\n      }\n  \n      function handleAmpm(ampm) {\n        if (ampm === 1 && set.hour < 12) {\n          // If the time is 1pm-11pm advance the time by 12 hours.\n          set.hour += 12;\n        } else if (ampm === 0 && set.hour === 12) {\n          // If it is 12:00am then set the hour to 0.\n          set.hour = 0;\n        }\n      }\n  \n      function handleTimezoneOffset(tzHour, tzMinute, tzSign) {\n        // Adjust for timezone offset\n        _utc(date, true);\n        var offset = (tzSign || 1) * ((tzHour || 0) * 60 + (tzMinute || 0));\n        if (offset) {\n          set.minute = (set.minute || 0) - offset;\n        }\n      }\n  \n      function handleUnitlessShift() {\n        if (isDefined(set.month)) {\n          // \"next January\"\n          set.unit = YEAR_INDEX;\n        } else if (isDefined(set.weekday)) {\n          // \"next Monday\"\n          set.unit = WEEK_INDEX;\n        }\n      }\n  \n      function handleUnitlessNum(num) {\n        if (isDefined(set.weekday)) {\n          // \"The second Tuesday of March\"\n          setOrdinalWeekday(num);\n        } else if (isDefined(set.month)) {\n          // \"The second of March\"\n          set.date = set.num;\n        }\n      }\n  \n      function handleMidday(hour) {\n        set.hour = hour % 24;\n        if (hour > 23) {\n          // If the date has hours past 24, we need to prevent it from traversing\n          // into a new day as that would make it being part of a new week in\n          // ambiguous dates such as \"Monday\".\n          afterDateSet(function() {\n            advanceDate(date, 'date', trunc(hour / 24));\n          });\n        }\n      }\n  \n      function handleRelativeDay() {\n        resetTime(date);\n        if (isUndefined(set.unit)) {\n          set.unit = DAY_INDEX;\n          set.num  = set.day;\n          delete set.day;\n        }\n      }\n  \n      function handleRelativeUnit(unitIndex) {\n        var num = isDefined(set.num) ? set.num : 1;\n  \n        // If a weekday is defined, there are 3 possible formats being applied:\n        //\n        // 1. \"the day after monday\": unit is days\n        // 2. \"next monday\": short for \"next week monday\", unit is weeks\n        // 3. \"the 2nd monday of next month\": unit is months\n        //\n        // In the first case, we need to set the weekday up front, as the day is\n        // relative to it. The second case also needs to be handled up front for\n        // formats like \"next monday at midnight\" which will have its weekday reset\n        // if not set up front. The last case will set up the params necessary to\n        // shift the weekday and allow separateAbsoluteUnits below to handle setting\n        // it after the date has been shifted.\n        if(isDefined(set.weekday)) {\n          if(unitIndex === MONTH_INDEX) {\n            setOrdinalWeekday(num);\n            num = 1;\n          } else {\n            updateDate(date, { weekday: set.weekday }, true);\n            delete set.weekday;\n          }\n        }\n  \n        if (set.half) {\n          // Allow localized \"half\" as a standalone colloquialism. Purposely avoiding\n          // the locale number system to reduce complexity. The units \"month\" and\n          // \"week\" are purposely excluded in the English date formats below, as\n          // \"half a week\" and \"half a month\" are meaningless as exact dates.\n          num *= set.half;\n        }\n  \n        if (isDefined(set.shift)) {\n          // Shift and unit, ie \"next month\", \"last week\", etc.\n          num *= set.shift;\n        } else if (set.sign) {\n          // Unit and sign, ie \"months ago\", \"weeks from now\", etc.\n          num *= set.sign;\n        }\n  \n        if (isDefined(set.day)) {\n          // \"the day after tomorrow\"\n          num += set.day;\n          delete set.day;\n        }\n  \n        // Formats like \"the 15th of last month\" or \"6:30pm of next week\"\n        // contain absolute units in addition to relative ones, so separate\n        // them here, remove them from the params, and set up a callback to\n        // set them after the relative ones have been set.\n        separateAbsoluteUnits(unitIndex);\n  \n        // Finally shift the unit.\n        set[English.units[unitIndex]] = num;\n        relative = true;\n      }\n  \n      function handleEdge(edge, params) {\n        var edgeIndex = params.unit, weekdayOfMonth;\n        if (!edgeIndex) {\n          // If we have \"the end of January\", then we need to find the unit index.\n          iterateOverHigherDateParams(params, function(unitName, val, unit, i) {\n            if (unitName === 'weekday' && isDefined(params.month)) {\n              // If both a month and weekday exist, then we have a format like\n              // \"the last tuesday in November, 2012\", where the \"last\" is still\n              // relative to the end of the month, so prevent the unit \"weekday\"\n              // from taking over.\n              return;\n            }\n            edgeIndex = i;\n          });\n        }\n        if (edgeIndex === MONTH_INDEX && isDefined(params.weekday)) {\n          // If a weekday in a month exists (as described above),\n          // then set it up to be set after the date has been shifted.\n          weekdayOfMonth = params.weekday;\n          delete params.weekday;\n        }\n        afterDateSet(function() {\n          var stopIndex;\n          // \"edge\" values that are at the very edge are \"2\" so the beginning of the\n          // year is -2 and the end of the year is 2. Conversely, the \"last day\" is\n          // actually 00:00am so it is 1. -1 is reserved but unused for now.\n          if (edge < 0) {\n            moveToBeginningOfUnit(date, edgeIndex, getOwn(options, 'locale'));\n          } else if (edge > 0) {\n            if (edge === 1) {\n              stopIndex = DAY_INDEX;\n              moveToBeginningOfUnit(date, DAY_INDEX);\n            }\n            moveToEndOfUnit(date, edgeIndex, getOwn(options, 'locale'), stopIndex);\n          }\n          if (isDefined(weekdayOfMonth)) {\n            setWeekday(date, weekdayOfMonth, -edge);\n            resetTime(date);\n          }\n        });\n        if (edgeIndex === MONTH_INDEX) {\n          params.specificity = DAY_INDEX;\n        } else {\n          params.specificity = edgeIndex - 1;\n        }\n      }\n  \n      function setOrdinalWeekday(num) {\n        // If we have \"the 2nd Tuesday of June\", then pass the \"weekdayDir\"\n        // flag along to updateDate so that the date does not accidentally traverse\n        // into the previous month. This needs to be independent of the \"prefer\"\n        // flag because we are only ensuring that the weekday is in the future, not\n        // the entire date.\n        set.weekday = 7 * (num - 1) + set.weekday;\n        set.date = 1;\n        weekdayDir = 1;\n      }\n  \n      function separateAbsoluteUnits(unitIndex) {\n        var params;\n  \n        iterateOverDateParams(set, function(name, val, unit, i) {\n          // If there is a time unit set that is more specific than\n          // the matched unit we have a string like \"5:30am in 2 minutes\",\n          // which is meaningless, so invalidate the date...\n          if (i >= unitIndex) {\n            date.setTime(NaN);\n            return false;\n          } else if (i < unitIndex) {\n            // ...otherwise set the params to set the absolute date\n            // as a callback after the relative date has been set.\n            params = params || {};\n            params[name] = val;\n            deleteDateParam(set, name);\n          }\n        });\n        if (params) {\n          afterDateSet(function() {\n            updateDate(date, params, true, false, getOwn(options, 'prefer'), weekdayDir);\n          });\n          if (set.edge) {\n            // \"the end of March of next year\"\n            handleEdge(set.edge, params);\n            delete set.edge;\n          }\n        }\n      }\n  \n      if (contextDate && d) {\n        // If a context date is passed (\"get\" and \"unitsFromNow\"),\n        // then use it as the starting point.\n        date = cloneDateByFlag(contextDate, true);\n      } else {\n        date = getNewDate();\n      }\n  \n      _utc(date, getOwn(options, 'fromUTC'));\n  \n      if (isString(d)) {\n        date = parseStringDate(d);\n      } else if (isDate(d)) {\n        date = cloneDateByFlag(d, hasOwn(options, 'clone') || forceClone);\n      } else if (isObjectType(d)) {\n        set = simpleClone(d);\n        updateDate(date, set, true);\n      } else if (isNumber(d) || d === null) {\n        date.setTime(d);\n      }\n      // A date created by parsing a string presumes that the format *itself* is\n      // UTC, but not that the date, once created, should be manipulated as such. In\n      // other words, if you are creating a date object from a server time\n      // \"2012-11-15T12:00:00Z\", in the majority of cases you are using it to create\n      // a date that will, after creation, be manipulated as local, so reset the utc\n      // flag here unless \"setUTC\" is also set.\n      _utc(date, !!getOwn(options, 'setUTC'));\n      return {\n        set: set,\n        date: date\n      };\n    }\n  \n    function updateDate(d, params, reset, advance, prefer, weekdayDir) {\n      var upperUnitIndex;\n  \n      function setUpperUnit(unitName, unitIndex) {\n        if (prefer && !upperUnitIndex) {\n          if (unitName === 'weekday') {\n            upperUnitIndex = WEEK_INDEX;\n          } else {\n            upperUnitIndex = getHigherUnitIndex(unitIndex);\n          }\n        }\n      }\n  \n      function setSpecificity(unitIndex) {\n        // Other functions may preemptively set the specificity before arriving\n        // here so concede to them if they have already set more specific units.\n        if (unitIndex > params.specificity) {\n          return;\n        }\n        params.specificity = unitIndex;\n      }\n  \n      function canDisambiguate() {\n        if (!upperUnitIndex || upperUnitIndex > YEAR_INDEX) {\n          return;\n        }\n        switch(prefer) {\n          case -1: return d > getNewDate();\n          case  1: return d < getNewDate();\n        }\n      }\n  \n      function disambiguateHigherUnit() {\n        var unit = DateUnits[upperUnitIndex];\n        advance = prefer;\n        setUnit(unit.name, 1, unit, upperUnitIndex);\n      }\n  \n      function handleFraction(unit, unitIndex, fraction) {\n        if (unitIndex) {\n          var lowerUnit = DateUnits[getLowerUnitIndex(unitIndex)];\n          var val = round(unit.multiplier / lowerUnit.multiplier * fraction);\n          params[lowerUnit.name] = val;\n        }\n      }\n  \n      function monthHasShifted(d, targetMonth) {\n        if (targetMonth < 0) {\n          targetMonth = targetMonth % 12 + 12;\n        }\n        return targetMonth % 12 !== getMonth(d);\n      }\n  \n      function setUnit(unitName, value, unit, unitIndex) {\n        var method = unit.method, checkMonth, fraction;\n  \n        setUpperUnit(unitName, unitIndex);\n        setSpecificity(unitIndex);\n  \n        fraction = value % 1;\n        if (fraction) {\n          handleFraction(unit, unitIndex, fraction);\n          value = trunc(value);\n        }\n  \n        if (unitName === 'weekday') {\n          if (!advance) {\n            // Weekdays are always considered absolute units so simply set them\n            // here even if it is an \"advance\" operation. This is to help avoid\n            // ambiguous meanings in \"advance\" as well as to neatly allow formats\n            // like \"Wednesday of next week\" without more complex logic.\n            setWeekday(d, value, weekdayDir);\n          }\n          return;\n        }\n        checkMonth = unitIndex === MONTH_INDEX && getDate(d) > 28;\n  \n        // If we are advancing or rewinding, then we need we need to set the\n        // absolute time if the unit is \"hours\" or less. This is due to the fact\n        // that setting by method is ambiguous during DST shifts. For example,\n        // 1:00am on November 1st 2015 occurs twice in North American timezones\n        // with DST, the second time being after the clocks are rolled back at\n        // 2:00am. When springing forward this is automatically handled as there\n        // is no 2:00am so the date automatically jumps to 3:00am. However, when\n        // rolling back, setHours(2) will always choose the first \"2am\" even if\n        // the date is currently set to the second, causing unintended jumps.\n        // This ambiguity is unavoidable when setting dates as the notation is\n        // ambiguous. However when advancing, we clearly want the resulting date\n        // to be an acutal hour ahead, which can only be accomplished by setting\n        // the absolute time. Conversely, any unit higher than \"hours\" MUST use\n        // the internal set methods, as they are ambiguous as absolute units of\n        // time. Years may be 365 or 366 days depending on leap years, months are\n        // all over the place, and even days may be 23-25 hours depending on DST\n        // shifts. Finally, note that the kind of jumping described above will\n        // occur when calling ANY \"set\" method on the date and will occur even if\n        // the value being set is identical to the one currently set (i.e.\n        // setHours(2) on a date at 2am may not be a noop). This is precarious,\n        // so avoiding this situation in callDateSet by checking up front that\n        // the value is not the same before setting.\n        if (advance && !unit.ambiguous) {\n          d.setTime(d.getTime() + (value * advance * unit.multiplier));\n          return;\n        } else if (advance) {\n          if (unitIndex === WEEK_INDEX) {\n            value *= 7;\n            method = DateUnits[DAY_INDEX].method;\n          }\n          value = (value * advance) + callDateGet(d, method);\n        }\n        callDateSetWithWeek(d, method, value, advance);\n        if (checkMonth && monthHasShifted(d, value)) {\n          // As we are setting the units in reverse order, there is a chance that\n          // our date may accidentally traverse into a new month, such as setting\n          // { month: 1, date 15 } on January 31st. Check for this here and reset\n          // the date to the last day of the previous month if this has happened.\n          setDate(d, 0);\n        }\n      }\n  \n      if (isNumber(params) && advance) {\n        // If param is a number and advancing, the number is in milliseconds.\n        params = { millisecond: params };\n      } else if (isNumber(params)) {\n        // Otherwise just set the timestamp and return.\n        d.setTime(params);\n        return d;\n      }\n  \n      iterateOverDateParams(params, setUnit);\n  \n      if (reset && params.specificity) {\n        resetLowerUnits(d, params.specificity);\n      }\n  \n      // If past or future is preferred, then the process of \"disambiguation\" will\n      // ensure that an ambiguous time/date (\"4pm\", \"thursday\", \"June\", etc.) will\n      // be in the past or future. Weeks are only considered ambiguous if there is\n      // a weekday, i.e. \"thursday\" is an ambiguous week, but \"the 4th\" is an\n      // ambiguous month.\n      if (canDisambiguate()) {\n        disambiguateHigherUnit();\n      }\n      return d;\n    }\n  \n    // Locales\n  \n    // Locale helpers\n    var English, localeManager;\n  \n    function getEnglishVariant(v) {\n      return simpleMerge(simpleClone(EnglishLocaleBaseDefinition), v);\n    }\n  \n    function arrayToRegAlternates(arr) {\n      var joined = arr.join('');\n      if (!arr || !arr.length) {\n        return '';\n      }\n      if (joined.length === arr.length) {\n        return '[' + joined + ']';\n      }\n      // map handles sparse arrays so no need to compact the array here.\n      return map(arr, escapeRegExp).join('|');\n    }\n  \n    function getRegNonCapturing(src, opt) {\n      if (src.length > 1) {\n        src = '(?:' + src + ')';\n      }\n      if (opt) {\n        src += '?';\n      }\n      return src;\n    }\n  \n    function getParsingTokenWithSuffix(field, src, suffix) {\n      var token = LocalizedParsingTokens[field];\n      if (token.requiresSuffix) {\n        src = getRegNonCapturing(src + getRegNonCapturing(suffix));\n      } else if (token.requiresSuffixOr) {\n        src += getRegNonCapturing(token.requiresSuffixOr + '|' + suffix);\n      } else {\n        src += getRegNonCapturing(suffix, true);\n      }\n      return src;\n    }\n  \n    function getArrayWithOffset(arr, n, alternate, offset) {\n      var val;\n      if (alternate > 1) {\n        val = arr[n + (alternate - 1) * offset];\n      }\n      return val || arr[n];\n    }\n  \n    function buildLocales() {\n  \n      function LocaleManager(loc) {\n        this.locales = {};\n        this.add(loc);\n      }\n  \n      LocaleManager.prototype = {\n  \n        get: function(code, fallback) {\n          var loc = this.locales[code];\n          if (!loc && LazyLoadedLocales[code]) {\n            loc = this.add(code, LazyLoadedLocales[code]);\n          } else if (!loc && code) {\n            loc = this.locales[code.slice(0, 2)];\n          }\n          return loc || fallback === false ? loc : this.current;\n        },\n  \n        getAll: function() {\n          return this.locales;\n        },\n  \n        set: function(code) {\n          var loc = this.get(code, false);\n          if (!loc) {\n            throw new TypeError('Invalid Locale: ' + code);\n          }\n          return this.current = loc;\n        },\n  \n        add: function(code, def) {\n          if (!def) {\n            def = code;\n            code = def.code;\n          } else {\n            def.code = code;\n          }\n          var loc = def.compiledFormats ? def : getNewLocale(def);\n          this.locales[code] = loc;\n          if (!this.current) {\n            this.current = loc;\n          }\n          return loc;\n        },\n  \n        remove: function(code) {\n          if (this.current.code === code) {\n            this.current = this.get('en');\n          }\n          return delete this.locales[code];\n        }\n  \n      };\n  \n      // Sorry about this guys...\n      English = getNewLocale(AmericanEnglishDefinition);\n      localeManager = new LocaleManager(English);\n    }\n  \n    function getNewLocale(def) {\n  \n      function Locale(def) {\n        this.init(def);\n      }\n  \n      Locale.prototype = {\n  \n        getMonthName: function(n, alternate) {\n          if (this.monthSuffix) {\n            return (n + 1) + this.monthSuffix;\n          }\n          return getArrayWithOffset(this.months, n, alternate, 12);\n        },\n  \n        getWeekdayName: function(n, alternate) {\n          return getArrayWithOffset(this.weekdays, n, alternate, 7);\n        },\n  \n        getTokenValue: function(field, str) {\n          var map = this[field + 'Map'], val;\n          if (map) {\n            val = map[str];\n          }\n          if (isUndefined(val)) {\n            val = this.getNumber(str);\n            if (field === 'month') {\n              // Months are the only numeric date field\n              // whose value is not the same as its number.\n              val -= 1;\n            }\n          }\n          return val;\n        },\n  \n        getNumber: function(str) {\n          var num = this.numeralMap[str];\n          if (isDefined(num)) {\n            return num;\n          }\n          // The unary plus operator here show better performance and handles\n          // every format that parseFloat does with the exception of trailing\n          // characters, which are guaranteed not to be in our string at this point.\n          num = +str.replace(/,/, '.');\n          if (!isNaN(num)) {\n            return num;\n          }\n          num = this.getNumeralValue(str);\n          if (!isNaN(num)) {\n            this.numeralMap[str] = num;\n            return num;\n          }\n          return num;\n        },\n  \n        getNumeralValue: function(str) {\n          var place = 1, num = 0, lastWasPlace, isPlace, numeral, digit, arr;\n          // Note that \"numerals\" that need to be converted through this method are\n          // all considered to be single characters in order to handle CJK. This\n          // method is by no means unique to CJK, but the complexity of handling\n          // inflections in non-CJK languages adds too much overhead for not enough\n          // value, so avoiding for now.\n          arr = str.split('');\n          for (var i = arr.length - 1; numeral = arr[i]; i--) {\n            digit = getOwn(this.numeralMap, numeral);\n            if (isUndefined(digit)) {\n              digit = getOwn(fullWidthNumberMap, numeral) || 0;\n            }\n            isPlace = digit > 0 && digit % 10 === 0;\n            if (isPlace) {\n              if (lastWasPlace) {\n                num += place;\n              }\n              if (i) {\n                place = digit;\n              } else {\n                num += digit;\n              }\n            } else {\n              num += digit * place;\n              place *= 10;\n            }\n            lastWasPlace = isPlace;\n          }\n          return num;\n        },\n  \n        getOrdinal: function(n) {\n          var suffix = this.ordinalSuffix;\n          return suffix || getOrdinalSuffix(n);\n        },\n  \n        getRelativeFormat: function(adu, type) {\n          return this.convertAdjustedToFormat(adu, type);\n        },\n  \n        getDuration: function(ms) {\n          return this.convertAdjustedToFormat(getAdjustedUnitForNumber(max(0, ms)), 'duration');\n        },\n  \n        getFirstDayOfWeek: function() {\n          var val = this.firstDayOfWeek;\n          return isDefined(val) ? val : ISO_FIRST_DAY_OF_WEEK;\n        },\n  \n        getFirstDayOfWeekYear: function() {\n          return this.firstDayOfWeekYear || ISO_FIRST_DAY_OF_WEEK_YEAR;\n        },\n  \n        convertAdjustedToFormat: function(adu, type) {\n          var sign, unit, mult,\n              num    = adu[0],\n              u      = adu[1],\n              ms     = adu[2],\n              format = this[type] || this.relative;\n          if (isFunction(format)) {\n            return format.call(this, num, u, ms, type);\n          }\n          mult = !this.plural || num === 1 ? 0 : 1;\n          unit = this.units[mult * 8 + u] || this.units[u];\n          sign = this[ms > 0 ? 'fromNow' : 'ago'];\n          return format.replace(/\\{(.*?)\\}/g, function(full, match) {\n            switch(match) {\n              case 'num': return num;\n              case 'unit': return unit;\n              case 'sign': return sign;\n            }\n          });\n        },\n  \n        cacheFormat: function(dif, i) {\n          this.compiledFormats.splice(i, 1);\n          this.compiledFormats.unshift(dif);\n        },\n  \n        addFormat: function(src, to) {\n          var loc = this;\n  \n          function getTokenSrc(str) {\n            var suffix, src, val,\n                opt   = str.match(/\\?$/),\n                nc    = str.match(/^(\\d+)\\??$/),\n                slice = str.match(/(\\d)(?:-(\\d))?/),\n                key   = str.replace(/[^a-z]+$/i, '');\n  \n            // Allowing alias tokens such as {time}\n            if (val = getOwn(loc.parsingAliases, key)) {\n              src = replaceParsingTokens(val);\n              if (opt) {\n                src = getRegNonCapturing(src, true);\n              }\n              return src;\n            }\n  \n            if (nc) {\n              src = loc.tokens[nc[1]];\n            } else if (val = getOwn(ParsingTokens, key)) {\n              src = val.src;\n            } else {\n              val = getOwn(loc.parsingTokens, key) || getOwn(loc, key);\n  \n              // Both the \"months\" array and the \"month\" parsing token can be accessed\n              // by either {month} or {months}, falling back as necessary, however\n              // regardless of whether or not a fallback occurs, the final field to\n              // be passed to addRawFormat must be normalized as singular.\n              key = key.replace(/s$/, '');\n  \n              if (!val) {\n                val = getOwn(loc.parsingTokens, key) || getOwn(loc, key + 's');\n              }\n  \n              if (isString(val)) {\n                src = val;\n                suffix = loc[key + 'Suffix'];\n              } else {\n                if (slice) {\n                  val = filter(val, function(m, i) {\n                    var mod = i % (loc.units ? 8 : val.length);\n                    return mod >= slice[1] && mod <= (slice[2] || slice[1]);\n                  });\n                }\n                src = arrayToRegAlternates(val);\n              }\n            }\n            if (!src) {\n              return '';\n            }\n            if (nc) {\n              // Non-capturing tokens like {0}\n              src = getRegNonCapturing(src);\n            } else {\n              // Capturing group and add to parsed tokens\n              to.push(key);\n              src = '(' + src + ')';\n            }\n            if (suffix) {\n              // Date/time suffixes such as those in CJK\n              src = getParsingTokenWithSuffix(key, src, suffix);\n            }\n            if (opt) {\n              src += '?';\n            }\n            return src;\n          }\n  \n          function replaceParsingTokens(str) {\n  \n            // Make spaces optional\n            str = str.replace(/ /g, ' ?');\n  \n            return str.replace(/\\{([^,]+?)\\}/g, function(match, token) {\n              var tokens = token.split('|'), src;\n              if (tokens.length > 1) {\n                src = getRegNonCapturing(map(tokens, getTokenSrc).join('|'));\n              } else {\n                src = getTokenSrc(token);\n              }\n              return src;\n            });\n          }\n  \n          if (!to) {\n            to = [];\n            src = replaceParsingTokens(src);\n          }\n  \n          loc.addRawFormat(src, to);\n        },\n  \n        addRawFormat: function(format, to) {\n          this.compiledFormats.unshift({\n            reg: RegExp('^ *' + format + ' *$', 'i'),\n            to: to\n          });\n        },\n  \n        init: function(def) {\n          var loc = this;\n  \n          // -- Initialization helpers\n  \n          function initFormats() {\n            loc.compiledFormats = [];\n            loc.parsingAliases = {};\n            loc.parsingTokens = {};\n          }\n  \n          function initDefinition() {\n            simpleMerge(loc, def);\n          }\n  \n          function initArrayFields() {\n            forEach(LOCALE_ARRAY_FIELDS, function(name) {\n              var val = loc[name];\n              if (isString(val)) {\n                loc[name] = commaSplit(val);\n              } else if (!val) {\n                loc[name] = [];\n              }\n            });\n          }\n  \n          // -- Value array build helpers\n  \n          function buildValueArray(name, mod, map, fn) {\n            var field = name, all = [], setMap;\n            if (!loc[field]) {\n              field += 's';\n            }\n            if (!map) {\n              map = {};\n              setMap = true;\n            }\n            forAllAlternates(field, function(alt, j, i) {\n              var idx = j * mod + i, val;\n              val = fn ? fn(i) : i;\n              map[alt] = val;\n              map[alt.toLowerCase()] = val;\n              all[idx] = alt;\n            });\n            loc[field] = all;\n            if (setMap) {\n              loc[name + 'Map'] = map;\n            }\n          }\n  \n          function forAllAlternates(field, fn) {\n            forEach(loc[field], function(str, i) {\n              forEachAlternate(str, function(alt, j) {\n                fn(alt, j, i);\n              });\n            });\n          }\n  \n          function forEachAlternate(str, fn) {\n            var arr = map(str.split('+'), function(split) {\n              return split.replace(/(.+):(.+)$/, function(full, base, suffixes) {\n                return map(suffixes.split('|'), function(suffix) {\n                  return base + suffix;\n                }).join('|');\n              });\n            }).join('|');\n            forEach(arr.split('|'), fn);\n          }\n  \n          function buildNumerals() {\n            var map = {};\n            buildValueArray('numeral', 10, map);\n            buildValueArray('article', 1, map, function() {\n              return 1;\n            });\n            buildValueArray('placeholder', 4, map, function(n) {\n              return pow(10, n + 1);\n            });\n            loc.numeralMap = map;\n          }\n  \n          function buildTimeFormats() {\n            loc.parsingAliases['time'] = getTimeFormat();\n            loc.parsingAliases['tzOffset'] = getTZOffsetFormat();\n          }\n  \n          function getTimeFormat() {\n            var src;\n            if (loc.ampmFront) {\n              // \"ampmFront\" exists mostly for CJK locales, which also presume that\n              // time suffixes exist, allowing this to be a simpler regex.\n              src = '{ampm?} {hour} (?:{minute} (?::?{second})?)?';\n            } else if(loc.ampm.length) {\n              src = '{hour}(?:[.:]{minute}(?:[.:]{second})? {ampm?}| {ampm})';\n            } else {\n              src = '{hour}(?:[.:]{minute}(?:[.:]{second})?)';\n            }\n            return src;\n          }\n  \n          function getTZOffsetFormat() {\n            return '(?:{Z}|{GMT?}(?:{tzSign}{tzHour}(?::?{tzMinute}(?: \\\\([\\\\w\\\\s]+\\\\))?)?)?)?';\n          }\n  \n          function buildParsingTokens() {\n            forEachProperty(LocalizedParsingTokens, function(token, name) {\n              var src, arr;\n              src = token.base ? ParsingTokens[token.base].src : token.src;\n              if (token.requiresNumerals || loc.numeralUnits) {\n                src += getNumeralSrc();\n              }\n              arr = loc[name + 's'];\n              if (arr && arr.length) {\n                src += '|' + arrayToRegAlternates(arr);\n              }\n              loc.parsingTokens[name] = src;\n            });\n          }\n  \n          function getNumeralSrc() {\n            var all, src = '';\n            all = loc.numerals.concat(loc.placeholders).concat(loc.articles);\n            if (loc.allowsFullWidth) {\n              all = all.concat(fullWidthNumbers.split(''));\n            }\n            if (all.length) {\n              src = '|(?:' + arrayToRegAlternates(all) + ')+';\n            }\n            return src;\n          }\n  \n          function buildTimeSuffixes() {\n            iterateOverDateUnits(function(unit, i) {\n              var token = loc.timeSuffixes[i];\n              if (token) {\n                loc[(unit.alias || unit.name) + 'Suffix'] = token;\n              }\n            });\n          }\n  \n          function buildModifiers() {\n            forEach(loc.modifiers, function(modifier) {\n              var name = modifier.name, mapKey = name + 'Map', map;\n              map = loc[mapKey] || {};\n              forEachAlternate(modifier.src, function(alt, j) {\n                var token = getOwn(loc.parsingTokens, name), val = modifier.value;\n                map[alt] = val;\n                loc.parsingTokens[name] = token ? token + '|' + alt : alt;\n                if (modifier.name === 'sign' && j === 0) {\n                  // Hooking in here to set the first \"fromNow\" or \"ago\" modifier\n                  // directly on the locale, so that it can be reused in the\n                  // relative format.\n                  loc[val === 1 ? 'fromNow' : 'ago'] = alt;\n                }\n              });\n              loc[mapKey] = map;\n            });\n          }\n  \n          // -- Format adding helpers\n  \n          function addCoreFormats() {\n            forEach(CoreParsingFormats, function(df) {\n              var src = df.src;\n              if (df.mdy && loc.mdy) {\n                // Use the mm/dd/yyyy variant if it\n                // exists and the locale requires it\n                src = df.mdy;\n              }\n              if (df.time) {\n                // Core formats that allow time require the time\n                // reg on both sides, so add both versions here.\n                loc.addFormat(getFormatWithTime(src, true));\n                loc.addFormat(getFormatWithTime(src));\n              } else {\n                loc.addFormat(src);\n              }\n            });\n            loc.addFormat('{time}');\n          }\n  \n          function addLocaleFormats() {\n            addFormatSet('parse');\n            addFormatSet('timeParse', true);\n            addFormatSet('timeFrontParse', true, true);\n          }\n  \n          function addFormatSet(field, allowTime, timeFront) {\n            forEach(loc[field], function(format) {\n              if (allowTime) {\n                format = getFormatWithTime(format, timeFront);\n              }\n              loc.addFormat(format);\n            });\n          }\n  \n          function getFormatWithTime(baseFormat, timeBefore) {\n            if (timeBefore) {\n              return getTimeBefore() + baseFormat;\n            }\n            return baseFormat + getTimeAfter();\n          }\n  \n          function getTimeBefore() {\n            return getRegNonCapturing('{time}[,\\\\s\\\\u3000]', true);\n          }\n  \n          function getTimeAfter() {\n            var markers = ',?[\\\\s\\\\u3000]', localized;\n            localized = arrayToRegAlternates(loc.timeMarkers);\n            if (localized) {\n              markers += '| (?:' + localized + ') ';\n            }\n            markers = getRegNonCapturing(markers, loc.timeMarkerOptional);\n            return getRegNonCapturing(markers + '{time}', true);\n          }\n  \n          initFormats();\n          initDefinition();\n          initArrayFields();\n  \n          buildValueArray('month', 12);\n          buildValueArray('weekday', 7);\n          buildValueArray('unit', 8);\n          buildValueArray('ampm', 2);\n  \n          buildNumerals();\n          buildTimeFormats();\n          buildParsingTokens();\n          buildTimeSuffixes();\n          buildModifiers();\n  \n          // The order of these formats is important. Order is reversed so formats\n          // that are initialized later will take precedence. Generally, this means\n          // that more specific formats should come later.\n          addCoreFormats();\n          addLocaleFormats();\n  \n        }\n  \n      };\n  \n      return new Locale(def);\n    }\n  \n  \n    /***\n     * @method [units]Since(d, [options])\n     * @returns Number\n     * @short Returns the time since [d].\n     * @extra [d] will accept a date object, timestamp, or string. If not specified,\n     *        [d] is assumed to be now. `unitsAgo` is provided as an alias to make\n     *        this more readable when [d] is assumed to be the current date.\n     *        [options] can be an object or a locale code as a string. See `create`\n     *        for more.\n     *\n     * @set\n     *   millisecondsSince\n     *   secondsSince\n     *   minutesSince\n     *   hoursSince\n     *   daysSince\n     *   weeksSince\n     *   monthsSince\n     *   yearsSince\n     *\n     * @example\n     *\n     *   new Date().millisecondsSince('1 hour ago') -> 3,600,000\n     *   new Date().daysSince('1 week ago')         -> 7\n     *   new Date().yearsSince('15 years ago')      -> 15\n     *   lastYear.yearsAgo()                 -> 1\n     *\n     * @param {string|number|Date} d\n     * @param {DateCreateOptions} options\n     *\n     ***\n     * @method [units]Ago()\n     * @returns Number\n     * @short Returns the time ago in the appropriate unit.\n     *\n     * @set\n     *   millisecondsAgo\n     *   secondsAgo\n     *   minutesAgo\n     *   hoursAgo\n     *   daysAgo\n     *   weeksAgo\n     *   monthsAgo\n     *   yearsAgo\n     *\n     * @example\n     *\n     *   lastYear.millisecondsAgo() -> 3,600,000\n     *   lastYear.daysAgo()         -> 7\n     *   lastYear.yearsAgo()        -> 15\n     *\n     ***\n     * @method [units]Until([d], [options])\n     * @returns Number\n     * @short Returns the time until [d].\n     * @extra [d] will accept a date object, timestamp, or string. If not specified,\n     *        [d] is assumed to be now. `unitsFromNow` is provided as an alias to\n     *        make this more readable when [d] is assumed to be the current date.\n     *        [options] can be an object or a locale code as a string. See `create`\n     *        for more.\n     *\n     *\n     * @set\n     *   millisecondsUntil\n     *   secondsUntil\n     *   minutesUntil\n     *   hoursUntil\n     *   daysUntil\n     *   weeksUntil\n     *   monthsUntil\n     *   yearsUntil\n     *\n     * @example\n     *\n     *   new Date().millisecondsUntil('1 hour from now') -> 3,600,000\n     *   new Date().daysUntil('1 week from now')         -> 7\n     *   new Date().yearsUntil('15 years from now')      -> 15\n     *   nextYear.yearsFromNow()                  -> 1\n     *\n     * @param {string|number|Date} d\n     * @param {DateCreateOptions} options\n     *\n     ***\n     * @method [units]FromNow()\n     * @returns Number\n     * @short Returns the time from now in the appropriate unit.\n     *\n     * @set\n     *   millisecondsFromNow\n     *   secondsFromNow\n     *   minutesFromNow\n     *   hoursFromNow\n     *   daysFromNow\n     *   weeksFromNow\n     *   monthsFromNow\n     *   yearsFromNow\n     *\n     * @example\n     *\n     *   nextYear.millisecondsFromNow() -> 3,600,000\n     *   nextYear.daysFromNow()         -> 7\n     *   nextYear.yearsFromNow()        -> 15\n     *\n     ***\n     * @method add[Units](n, [reset] = false)\n     * @returns Date\n     * @short Adds `n` units to the date. If [reset] is true, all lower units will\n     *        be reset.\n     * @extra This method modifies the date! Note that in the case of `addMonths`,\n     *        the date may fall on a date that doesn't exist (i.e. February 30). In\n     *        this case the date will be shifted to the last day of the month. Don't\n     *        use `addMonths` if you need precision.\n     *\n     * @set\n     *   addMilliseconds\n     *   addSeconds\n     *   addMinutes\n     *   addHours\n     *   addDays\n     *   addWeeks\n     *   addMonths\n     *   addYears\n     *\n     * @example\n     *\n     *   new Date().addYears(5)        -> current time + 5 years\n     *   new Date().addDays(5)         -> current time + 5 days\n     *   new Date().addDays(5, true)   -> current time + 5 days (time reset)\n     *\n     * @param {number} n\n     * @param {boolean} [reset]\n     *\n     ***\n     * @method isLast[Unit]([localeCode])\n     * @returns Boolean\n     * @short Returns true if the date is last week, month, or year.\n     * @extra This method takes an optional locale code for `isLastWeek`, which is\n     *        locale dependent. The default locale code is `en`, which places\n     *        Sunday at the beginning of the week. You can pass `en-GB` as a quick\n     *        way to force Monday as the beginning of the week.\n     *\n     * @set\n     *   isLastWeek\n     *   isLastMonth\n     *   isLastYear\n     *\n     * @example\n     *\n     *   yesterday.isLastWeek()  -> true or false?\n     *   yesterday.isLastMonth() -> probably not...\n     *   yesterday.isLastYear()  -> even less likely...\n     *\n     * @param {string} [localeCode]\n     *\n     ***\n     * @method isThis[Unit]([localeCode])\n     * @returns Boolean\n     * @short Returns true if the date is this week, month, or year.\n     * @extra This method takes an optional locale code for `isThisWeek`, which is\n     *        locale dependent. The default locale code is `en`, which places\n     *        Sunday at the beginning of the week. You can pass `en-GB` as a quick\n     *        way to force Monday as the beginning of the week.\n     *\n     * @set\n     *   isThisWeek\n     *   isThisMonth\n     *   isThisYear\n     *\n     * @example\n     *\n     *   tomorrow.isThisWeek()  -> true or false?\n     *   tomorrow.isThisMonth() -> probably...\n     *   tomorrow.isThisYear()  -> signs point to yes...\n     *\n     * @param {string} [localeCode]\n     *\n     ***\n     * @method isNext[Unit]([localeCode])\n     * @returns Boolean\n     * @short Returns true if the date is next week, month, or year.\n     * @extra This method takes an optional locale code for `isNextWeek`, which is\n     *        locale dependent. The default locale code is `en`, which places\n     *        Sunday at the beginning of the week. You can pass `en-GB` as a quick\n     *        way to force Monday as the beginning of the week.\n     *\n     * @set\n     *   isNextWeek\n     *   isNextMonth\n     *   isNextYear\n     *\n     * @example\n     *\n     *   tomorrow.isNextWeek()  -> true or false?\n     *   tomorrow.isNextMonth() -> probably not...\n     *   tomorrow.isNextYear()  -> even less likely...\n     *\n     * @param {string} [localeCode]\n     *\n     ***\n     * @method beginningOf[Unit]([localeCode])\n     * @returns Date\n     * @short Sets the date to the beginning of the appropriate unit.\n     * @extra This method modifies the date! A locale code can be passed for\n     *        `beginningOfWeek`, which is locale dependent. If consistency is\n     *        needed, use `beginningOfISOWeek` instead.\n     *\n     * @set\n     *   beginningOfDay\n     *   beginningOfWeek\n     *   beginningOfMonth\n     *   beginningOfYear\n     *\n     * @example\n     *\n     *   new Date().beginningOfDay()   -> the beginning of today (resets the time)\n     *   new Date().beginningOfWeek()  -> the beginning of the week\n     *   new Date().beginningOfMonth() -> the beginning of the month\n     *   new Date().beginningOfYear()  -> the beginning of the year\n     *\n     * @param {string} [localeCode]\n     *\n     ***\n     * @method endOf[Unit]([localeCode])\n     * @returns Date\n     * @short Sets the date to the end of the appropriate unit.\n     * @extra This method modifies the date! A locale code can be passed for\n     *        `endOfWeek`, which is locale dependent. If consistency is needed, use\n     *        `endOfISOWeek` instead.\n     *\n     * @set\n     *   endOfDay\n     *   endOfWeek\n     *   endOfMonth\n     *   endOfYear\n     *\n     * @example\n     *\n     *   new Date().endOfDay()   -> the end of today (sets the time to 23:59:59.999)\n     *   new Date().endOfWeek()  -> the end of the week\n     *   new Date().endOfMonth() -> the end of the month\n     *   new Date().endOfYear()  -> the end of the year\n     *\n     * @param {string} [localeCode]\n     *\n     ***/\n    function buildDateUnitMethods() {\n  \n      defineInstanceSimilar(sugarDate, DateUnits, function(methods, unit, index) {\n        var name = unit.name, caps = simpleCapitalize(name);\n  \n        if (index > DAY_INDEX) {\n          forEach(['Last','This','Next'], function(shift) {\n            methods['is' + shift + caps] = function(d, localeCode) {\n              return compareDate(d, shift + ' ' + name, 0, localeCode, { locale: 'en' });\n            };\n          });\n        }\n        if (index > HOURS_INDEX) {\n          methods['beginningOf' + caps] = function(d, localeCode) {\n            return moveToBeginningOfUnit(d, index, localeCode);\n          };\n          methods['endOf' + caps] = function(d, localeCode) {\n            return moveToEndOfUnit(d, index, localeCode);\n          };\n        }\n  \n        methods['add' + caps + 's'] = function(d, num, reset) {\n          return advanceDate(d, name, num, reset);\n        };\n  \n        var since = function(date, d, options) {\n          return getTimeDistanceForUnit(date, createDateWithContext(date, d, options, true), unit);\n        };\n        var until = function(date, d, options) {\n          return getTimeDistanceForUnit(createDateWithContext(date, d, options, true), date, unit);\n        };\n  \n        methods[name + 'sAgo']   = methods[name + 'sUntil']   = until;\n        methods[name + 'sSince'] = methods[name + 'sFromNow'] = since;\n  \n      });\n  \n    }\n  \n    /***\n     * @method is[Day]()\n     * @returns Boolean\n     * @short Returns true if the date falls on the specified day.\n     *\n     * @set\n     *   isToday\n     *   isYesterday\n     *   isTomorrow\n     *   isWeekday\n     *   isWeekend\n     *   isSunday\n     *   isMonday\n     *   isTuesday\n     *   isWednesday\n     *   isThursday\n     *   isFriday\n     *   isSaturday\n     *\n     * @example\n     *\n     *   tomorrow.isToday() -> false\n     *   thursday.isTomorrow() -> ?\n     *   yesterday.isWednesday() -> ?\n     *   today.isWeekend() -> ?\n     *\n     ***\n     * @method isFuture()\n     * @returns Boolean\n     * @short Returns true if the date is in the future.\n     *\n     * @example\n     *\n     *   lastWeek.isFuture() -> false\n     *   nextWeek.isFuture() -> true\n     *\n     ***\n     * @method isPast()\n     * @returns Boolean\n     * @short Returns true if the date is in the past.\n     *\n     * @example\n     *\n     *   lastWeek.isPast() -> true\n     *   nextWeek.isPast() -> false\n     *\n     ***/\n    function buildRelativeAliases() {\n      var special  = spaceSplit('Today Yesterday Tomorrow Weekday Weekend Future Past');\n      var weekdays = English.weekdays.slice(0, 7);\n      var months   = English.months.slice(0, 12);\n      var together = special.concat(weekdays).concat(months);\n      defineInstanceSimilar(sugarDate, together, function(methods, name) {\n        methods['is'+ name] = function(d) {\n          return fullCompareDate(d, name);\n        };\n      });\n    }\n  \n    defineStatic(sugarDate, {\n  \n      /***\n       * @method create(d, [options])\n       * @returns Date\n       * @static\n       * @short Alternate date constructor which accepts text formats, a timestamp,\n       *        objects, or another date.\n       * @extra If no argument is given, the date is assumed to be now. The second\n       *        argument can either be an options object or a locale code as a\n       *        shortcut. For more, see `date parsing`.\n       *\n       * @options\n       *\n       *   locale     A locale code to parse the date in. This can also be passed as\n       *              the second argument to this method. Default is the current\n       *              locale, which is `en` if none is set.\n       *\n       *   past       If `true`, ambiguous dates like `Sunday` will be parsed as\n       *              `last Sunday`. Note that non-ambiguous dates are not\n       *              guaranteed to be in the past.\n       *              Default is `false`.\n       *\n       *   future     If `true`, ambiguous dates like `Sunday` will be parsed as\n       *              `next Sunday`. Note that non-ambiguous dates are not\n       *              guaranteed to be in the future.\n       *              Default is `false`.\n       *\n       *   fromUTC    If `true`, dates with no timezone notation will be parsed as\n       *              UTC (no timezone offset). This is useful for server\n       *              timestamps, etc. Note that this flag is not required if the\n       *              timezone is specified in the string, either as an explicit\n       *              value (ex. +0900 or -09:00) or \"Z\", which is UTC time.\n       *\n       *   setUTC     If `true`, this will set a flag on the date that tells Sugar\n       *              to internally use UTC methods like `getUTCHours` when handling\n       *              it. This flag is the same as calling the `setUTC` method on\n       *              the date after parsing is complete. Note that this is\n       *              different from `fromUTC`, which parses a string as UTC, but\n       *              does not set this flag.\n       *\n       *   clone      If `true` and `d` is a date, it will be cloned.\n       *\n       *   params     An optional object that is populated with properties that are\n       *              parsed from string input. This option is useful when parsed\n       *              properties need to be retained.\n       *\n       * @example\n       *\n       *   Date.create('July')                      -> July of this year\n       *   Date.create('1776')                      -> 1776\n       *   Date.create('today')                     -> today\n       *   Date.create('Wednesday')                 -> This wednesday\n       *   Date.create('next Friday')               -> Next friday\n       *   Date.create('July 4, 1776')              -> July 4, 1776\n       *   Date.create(-446806800000)               -> November 5, 1955\n       *   Date.create('1776年07月04日', 'ja')      -> July 4, 1776\n       *   Date.create('August', {past: true})      -> August of this or last year\n       *   Date.create('August', {future: true})    -> August of this or next year\n       *   Date.create('Thursday', {fromUTC: true}) -> Thursday at 12:00am UTC time\n       *\n       * @param {string|number|Date} d\n       * @param {DateCreateOptions} [options]\n       *\n       * @option {string} [locale]\n       * @option {boolean} [past]\n       * @option {boolean} [future]\n       * @option {boolean} [fromUTC]\n       * @option {boolean} [setUTC]\n       * @option {boolean} [clone]\n       * @option {Object} [params]\n       *\n       ***/\n      'create': function(d, options) {\n        return createDate(d, options);\n      },\n  \n      /***\n       * @method getLocale([localeCode] = current)\n       * @returns Locale\n       * @static\n       * @short Gets the locale object for the given code, or the current locale.\n       * @extra The locale object has various properties that dictate how dates are\n       *        parsed and formatted for that locale. The locale object is exposed\n       *        here mostly for introspection - it should be uncommon to need to\n       *        maniplate the object itself. For more, see `date locales`.\n       *\n       * @example\n       *\n       *   Date.getLocale()     -> Returns the current locale\n       *   Date.getLocale('en') -> Returns the EN locale\n       *\n       * @param {string} [localeCode]\n       *\n       ***/\n      'getLocale': function(code) {\n        return localeManager.get(code, !code);\n      },\n  \n      /***\n       * @method getAllLocales()\n       * @returns Array<Locale>\n       * @static\n       * @short Returns all available locales as an object.\n       * @extra For more, see `date locales`.\n       * @example\n       *\n       *   Date.getAllLocales()\n       *\n       ***/\n      'getAllLocales': function() {\n        return localeManager.getAll();\n      },\n  \n      /***\n       * @method getAllLocaleCodes()\n       * @returns string[]\n       * @static\n       * @short Returns all available locale codes as an array of strings.\n       * @extra For more, see `date locales`.\n       * @example\n       *\n       *   Date.getAllLocaleCodes()\n       *\n       ***/\n      'getAllLocaleCodes': function() {\n        return getKeys(localeManager.getAll());\n      },\n  \n      /***\n       * @method setLocale(localeCode)\n       * @returns Locale\n       * @static\n       * @short Sets the current locale to be used with dates.\n       * @extra Sugar has native support for 17 major locales. In addition, you can\n       *        define a new locale with `addLocale`. For more, see `date locales`.\n       * @example\n       *\n       *   Date.setLocale('en')\n       *\n       * @param {string} localeCode\n       *\n       ***/\n      'setLocale': function(code) {\n        return localeManager.set(code);\n      },\n  \n      /***\n       * @method addLocale(localeCode, def)\n       * @returns Locale\n       * @static\n       * @short Adds a locale definition to the locales understood by Sugar.\n       * @extra This method should only be required for adding locale definitions\n       *        that don't already exist. For more, see `date locales`.\n       * @example\n       *\n       *   Date.addLocale('eo', {})\n       *\n       * @param {string} localeCode\n       * @param {Object} def\n       *\n       ***/\n      'addLocale': function(code, set) {\n        return localeManager.add(code, set);\n      },\n  \n      /***\n       * @method removeLocale(localeCode)\n       * @returns Locale\n       * @static\n       * @short Deletes the the locale by `localeCode` from Sugar's known locales.\n       * @extra For more, see `date locales`.\n       * @example\n       *\n       *   Date.removeLocale('foo')\n       *\n       * @param {string} localeCode\n       *\n       ***/\n      'removeLocale': function(code) {\n        return localeManager.remove(code);\n      }\n  \n    });\n  \n    defineInstanceWithArguments(sugarDate, {\n  \n      /***\n       * @method set(set, [reset] = false)\n       * @returns Date\n       * @short Sets the date object.\n       * @extra This method accepts multiple formats including a single number as\n       *        a timestamp, an object, or enumerated arguments. If [reset] is\n       *        `true`, any units more specific than those passed will be reset.\n       *\n       * @example\n       *\n       *   new Date().set({year:2011,month:11,day:31}) -> December 31, 2011\n       *   new Date().set(2011, 11, 31)                -> December 31, 2011\n       *   new Date().set(86400000)                    -> 1 day after Jan 1, 1970\n       *   new Date().set({year:2004,month:6}, true)   -> June 1, 2004, 00:00:00.000\n       *\n       * @signature set(milliseconds)\n       * @signature set(year, month, [day], [hour], [minute], [second], [millliseconds])\n       * @param {Object} set\n       * @param {boolean} [reset]\n       * @param {number} year\n       * @param {number} month\n       * @param {number} [day]\n       * @param {number} [hour]\n       * @param {number} [minute]\n       * @param {number} [second]\n       * @param {number} [milliseconds]\n       *\n       ***/\n      'set': function(d, args) {\n        args = collectDateArguments(args);\n        return updateDate(d, args[0], args[1]);\n      },\n  \n      /***\n       * @method advance(set, [reset] = false)\n       * @returns Date\n       * @short Shifts the date forward.\n       * @extra `set` accepts multiple formats including an object, a string in the\n       *        format \"3 days\", a single number as milliseconds, or enumerated\n       *        parameters (as with the Date constructor). If [reset] is `true`, any\n       *        units more specific than those passed will be reset. This method\n       *        modifies the date!\n       *\n       * @example\n       *\n       *   new Date().advance({ year: 2 }) -> 2 years in the future\n       *   new Date().advance('2 hours')   -> 2 hours in the future\n       *   new Date().advance(0, 2, 3)     -> 2 months 3 days in the future\n       *   new Date().advance(86400000)    -> 1 day in the future\n       *\n       * @signature advance(milliseconds)\n       * @signature advance(year, month, [day], [hour], [minute], [second], [millliseconds])\n       * @param {string|Object} set\n       * @param {boolean} [reset]\n       * @param {number} year\n       * @param {number} month\n       * @param {number} [day]\n       * @param {number} [hour]\n       * @param {number} [minute]\n       * @param {number} [second]\n       * @param {number} [milliseconds]\n       *\n       ***/\n      'advance': function(d, args) {\n        return advanceDateWithArgs(d, args, 1);\n      },\n  \n      /***\n       * @method rewind(set, [reset] = false)\n       * @returns Date\n       * @short Shifts the date backward.\n       * @extra [set] accepts multiple formats including an object, a string in the\n       *        format \"3 days\", a single number as milliseconds, or enumerated\n       *        parameters (as with the Date constructor). If [reset] is `true`, any\n       *        units more specific than those passed will be reset. This method\n       *        modifies the date!\n       *\n       * @example\n       *\n       *   new Date().rewind({ year: 2 }) -> 2 years in the past\n       *   new Date().rewind('2 weeks')   -> 2 weeks in the past\n       *   new Date().rewind(0, 2, 3)     -> 2 months 3 days in the past\n       *   new Date().rewind(86400000)    -> 1 day in the past\n       *\n       * @signature advance(milliseconds)\n       * @signature advance(year, month, [day], [hour], [minute], [second], [millliseconds])\n       * @param {string|Object} set\n       * @param {boolean} [reset]\n       * @param {number} year\n       * @param {number} month\n       * @param {number} [day]\n       * @param {number} [hour]\n       * @param {number} [minute]\n       * @param {number} [second]\n       * @param {number} [milliseconds]\n       *\n       ***/\n      'rewind': function(d, args) {\n        return advanceDateWithArgs(d, args, -1);\n      }\n  \n    });\n  \n    defineInstance(sugarDate, {\n  \n      /***\n       * @method get(d, [options])\n       * @returns Date\n       * @short Gets a new date using the current one as a starting point.\n       * @extra This method is identical to `Date.create`, except that relative\n       *        formats like `next month` are relative to the date instance rather\n       *        than the current date. Accepts a locale code as a string in place\n       *        of [options]. See `create` for more.\n       *\n       * @example\n       *\n       *   nextYear.get('monday') -> monday of the week exactly 1 year from now\n       *   millenium.get('2 years before') -> 2 years before Jan 1, 2000.\n       *\n       * @param {string|number|Date} d\n       * @param {DateCreateOptions} options\n       *\n       ***/\n      'get': function(date, d, options) {\n        return createDateWithContext(date, d, options);\n      },\n  \n      /***\n       * @method setWeekday(dow)\n       * @short Sets the weekday of the date, starting with Sunday at `0`.\n       * @extra This method modifies the date!\n       *\n       * @example\n       *\n       *   d = new Date(); d.setWeekday(1); d; -> Monday of this week\n       *   d = new Date(); d.setWeekday(6); d; -> Saturday of this week\n       *\n       * @param {number} dow\n       *\n       ***/\n      'setWeekday': function(date, dow) {\n        return setWeekday(date, dow);\n      },\n  \n      /***\n       * @method setISOWeek(num)\n       * @short Sets the week (of the year) as defined by the ISO8601 standard.\n       * @extra Note that this standard places Sunday at the end of the week (day 7).\n       *        This method modifies the date!\n       *\n       * @example\n       *\n       *   d = new Date(); d.setISOWeek(15); d; -> 15th week of the year\n       *\n       * @param {number} num\n       *\n       ***/\n      'setISOWeek': function(date, num) {\n        return setISOWeekNumber(date, num);\n      },\n  \n      /***\n       * @method getISOWeek()\n       * @returns Number\n       * @short Gets the date's week (of the year) as defined by the ISO8601 standard.\n       * @extra Note that this standard places Sunday at the end of the week (day 7).\n       *        If `utc` is set on the date, the week will be according to UTC time.\n       *\n       * @example\n       *\n       *   new Date().getISOWeek() -> today's week of the year\n       *\n       ***/\n      'getISOWeek': function(date) {\n        return getWeekNumber(date, true);\n      },\n  \n      /***\n       * @method beginningOfISOWeek()\n       * @returns Date\n       * @short Set the date to the beginning of week as defined by ISO8601.\n       * @extra Note that this standard places Monday at the start of the week.\n       *        This method modifies the date!\n       *\n       * @example\n       *\n       *   new Date().beginningOfISOWeek() -> Monday\n       *\n       ***/\n      'beginningOfISOWeek': function(date) {\n        var day = getWeekday(date);\n        if (day === 0) {\n          day = -6;\n        } else if (day !== 1) {\n          day = 1;\n        }\n        setWeekday(date, day);\n        return resetTime(date);\n      },\n  \n      /***\n       * @method endOfISOWeek()\n       * @returns Date\n       * @short Set the date to the end of week as defined by this ISO8601 standard.\n       * @extra Note that this standard places Sunday at the end of the week.\n       *        This method modifies the date!\n       *\n       * @example\n       *\n       *   new Date().endOfISOWeek() -> Sunday\n       *\n       ***/\n      'endOfISOWeek': function(date) {\n        if (getWeekday(date) !== 0) {\n          setWeekday(date, 7);\n        }\n        return moveToEndOfUnit(date, DAY_INDEX);\n      },\n  \n      /***\n       * @method getUTCOffset([iso] = false)\n       * @returns String\n       * @short Returns a string representation of the offset from UTC time. If [iso]\n       *        is true the offset will be in ISO8601 format.\n       *\n       * @example\n       *\n       *   new Date().getUTCOffset()     -> \"+0900\"\n       *   new Date().getUTCOffset(true) -> \"+09:00\"\n       *\n       * @param {boolean} iso\n       *\n       ***/\n      'getUTCOffset': function(date, iso) {\n        return getUTCOffset(date, iso);\n      },\n  \n      /***\n       * @method setUTC([on] = false)\n       * @returns Date\n       * @short Controls a flag on the date that tells Sugar to internally use UTC\n       *        methods like `getUTCHours`.\n       * @extra This flag is most commonly used for output in UTC time with the\n       *        `format` method. Note that this flag only governs which methods are\n       *        called internally – date native methods like `setHours` will still\n       *        return local non-UTC values. This method will modify the date!\n       *\n       * @example\n       *\n       *   new Date().setUTC(true).long()  -> formatted with UTC methods\n       *   new Date().setUTC(false).long() -> formatted without UTC methods\n       *\n       * @param {boolean} on\n       *\n       ***/\n      'setUTC': function(date, on) {\n        return _utc(date, on);\n      },\n  \n      /***\n       * @method isUTC()\n       * @returns Boolean\n       * @short Returns true if the date has no timezone offset.\n       * @extra This will also return true for dates whose internal utc flag is set\n       *        with `setUTC`. Even if the utc flag is set, `getTimezoneOffset`\n       *        will always report the same thing as Javascript always reports that\n       *        based on the environment's locale.\n       *\n       * @example\n       *\n       *   new Date().isUTC() -> true or false (depends on the local offset)\n       *   new Date().setUTC(true).isUTC() -> true\n       *\n       ***/\n      'isUTC': function(date) {\n        return isUTC(date);\n      },\n  \n      /***\n       * @method isValid()\n       * @returns Boolean\n       * @short Returns true if the date is valid.\n       *\n       * @example\n       *\n       *   new Date().isValid()         -> true\n       *   new Date('flexor').isValid() -> false\n       *\n       ***/\n      'isValid': function(date) {\n        return dateIsValid(date);\n      },\n  \n      /***\n       * @method isAfter(d, [margin] = 0)\n       * @returns Boolean\n       * @short Returns true if the date is after `d`.\n       * @extra [margin] is to allow extra margin of error in ms. `d` will accept\n       *        a date object, timestamp, or string. If not specified, `d` is\n       *        assumed to be now. See `create` for formats.\n       *\n       * @example\n       *\n       *   today.isAfter('tomorrow')  -> false\n       *   today.isAfter('yesterday') -> true\n       *\n       * @param {string|number|Date} d\n       * @param {number} [margin]\n       *\n       ***/\n      'isAfter': function(date, d, margin) {\n        return date.getTime() > createDate(d).getTime() - (margin || 0);\n      },\n  \n      /***\n       * @method isBefore(d, [margin] = 0)\n       * @returns Boolean\n       * @short Returns true if the date is before `d`.\n       * @extra [margin] is to allow extra margin of error in ms. `d` will accept\n       *        a date object, timestamp, or text format. If not specified, `d` is\n       *        assumed to be now. See `create` for formats.\n       *\n       * @example\n       *\n       *   today.isBefore('tomorrow')  -> true\n       *   today.isBefore('yesterday') -> false\n       *\n       * @param {string|number|Date} d\n       * @param {number} [margin]\n       *\n       ***/\n      'isBefore': function(date, d, margin) {\n        return date.getTime() < createDate(d).getTime() + (margin || 0);\n      },\n  \n      /***\n       * @method isBetween(d1, d2, [margin] = 0)\n       * @returns Boolean\n       * @short Returns true if the date is later or equal to `d1` and before or\n       *        equal to `d2`.\n       * @extra [margin] is to allow extra margin of error in ms. `d1` and `d2` will\n       *        accept a date object, timestamp, or text format. If not specified,\n       *        they are assumed to be now.  See `create` for formats.\n       *\n       * @example\n       *\n       *   new Date().isBetween('yesterday', 'tomorrow')    -> true\n       *   new Date().isBetween('last year', '2 years ago') -> false\n       *\n       * @param {string|number|Date} d1\n       * @param {string|number|Date} d2\n       * @param {number} [margin]\n       *\n       ***/\n      'isBetween': function(date, d1, d2, margin) {\n        var t  = date.getTime();\n        var t1 = createDate(d1).getTime();\n        var t2 = createDate(d2).getTime();\n        var lo = min(t1, t2);\n        var hi = max(t1, t2);\n        margin = margin || 0;\n        return (lo - margin <= t) && (hi + margin >= t);\n      },\n  \n      /***\n       * @method isLeapYear()\n       * @returns Boolean\n       * @short Returns true if the date is a leap year.\n       *\n       * @example\n       *\n       *   millenium.isLeapYear() -> true\n       *\n       ***/\n      'isLeapYear': function(date) {\n        var year = getYear(date);\n        return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n      },\n  \n      /***\n       * @method daysInMonth()\n       * @returns Number\n       * @short Returns the number of days in the date's month.\n       *\n       * @example\n       *\n       *   may.daysInMonth() -> 31\n       *   feb.daysInMonth() -> 28 or 29\n       *\n       ***/\n      'daysInMonth': function(date) {\n        return getDaysInMonth(date);\n      },\n  \n      /***\n       * @method format([f], [localeCode] = currentLocaleCode)\n       * @returns String\n       * @short Returns the date as a string using the format `f`.\n       * @extra `f` is a string that contains tokens in either LDML format using\n       *        curly braces, or \"strftime\" format using a percent sign. If `f` is\n       *        not specified, the locale specific `{long}` format is used. [localeCode]\n       *        is a locale code to use (if not specified the current locale is\n       *        used). For more, see `date formatting`.\n       *\n       * @example\n       *\n       *   new Date().format()                        -> ex. February 13, 2012 11:21 AM\n       *   new Date().format('{Weekday} {d} {Month}') -> ex. Monday July 4\n       *   new Date().format('{hh}:{mm}')             -> ex. 15:57\n       *   new Date().format('%H:%M')                 -> ex. 15:57\n       *   new Date().format('{12hr}:{mm}{tt}')       -> ex. 3:57pm\n       *   new Date().format('ISO8601')               -> ex. 2011-07-05 12:24:55.528Z\n       *   new Date().format('{Weekday}', 'ja')       -> ex. 先週\n       *\n       * @param {string} f\n       * @param {string} [localeCode]\n       *\n       ***\n       * @method short([localeCode] = currentLocaleCode)\n       * @returns String\n       * @short Outputs the date in the short format for the current locale.\n       * @extra [localeCode] overrides the current locale code if passed.\n       *\n       * @example\n       *\n       *   new Date().short()     -> ex. 02/13/2016\n       *   new Date().short('fi') -> ex. 13.2.2016\n       *\n       * @param {string} [localeCode]\n       *\n       ***\n       * @method medium([localeCode] = currentLocaleCode)\n       * @returns String\n       * @short Outputs the date in the medium format for the current locale.\n       * @extra [localeCode] overrides the current locale code if passed.\n       *\n       * @example\n       *\n       *   new Date().medium()     -> ex. February 13, 2016\n       *   new Date().medium('ja') -> ex. 2016年2月13日\n       *\n       * @param {string} [localeCode]\n       *\n       ***\n       * @method long([localeCode] = currentLocaleCode)\n       * @returns String\n       * @short Outputs the date in the long format for the current locale.\n       * @extra [localeCode] overrides the current locale code if passed.\n       *\n       * @example\n       *\n       *   new Date().long()     -> ex. February 13, 2016 6:22 PM\n       *   new Date().long('es') -> ex. 13 de febrero de 2016 18:22\n       *\n       * @param {string} [localeCode]\n       *\n       ***\n       * @method full([localeCode] = currentLocaleCode)\n       * @returns String\n       * @short Outputs the date in the full format for the current locale.\n       * @extra [localeCode] overrides the current locale code if passed.\n       *\n       * @example\n       *\n       *   new Date().full()     -> ex. Saturday, February 13, 2016 6:23 PM\n       *   new Date().full('ru') -> ex. суббота, 13 февраля 2016 г., 18:23\n       *\n       * @param {string} [localeCode]\n       *\n       ***/\n      'format': function(date, f, localeCode) {\n        return dateFormat(date, f, localeCode);\n      },\n  \n      /***\n       * @method relative([localeCode] = currentLocaleCode, [fn])\n       * @returns String\n       * @short Returns the date in a text format relative to the current time,\n       *        such as \"5 minutes ago\".\n       * @extra [fn] is a function that can be passed to provide more granular\n       *        control over the resulting string. Its return value will be passed\n       *        to `format`. If nothing is returned, the relative format will be\n       *        used. [fn] may be passed as the first argument in place of [locale].\n       *        For more about formats, see `date formatting`.\n       *\n       * @callback relativeFn\n       *\n       *   num   The offset number in `unit`.\n       *   unit  A numeric representation of the unit that `num` is in, starting at\n       *         0 for ms.\n       *   ms    The absolute offset in milliseconds.\n       *   loc   The locale object, either specified by [locale] or default.\n       *\n       * @example\n       *\n       *   hourAgo.relative() -> 1 hour ago\n       *   jan.relative()     -> ex. 5 months ago\n       *   jan.relative('ja') -> 3ヶ月前\n       *   jan.relative(function(num, unit, ms, loc) {\n       *     // Return an absolute date for anything over 6 months.\n       *     if(unit == 6 && num > 6 || unit > 6) {\n       *       return '{Month} {d}, {yyyy}';\n       *     }\n       *   }); -> ex. 5 months ago\n       *\n       * @signature relative([fn])\n       * @param {string} [localeCode]\n       * @param {relativeFn} [fn]\n       * @callbackParam {number} num\n       * @callbackParam {number} unit\n       * @callbackParam {number} ms\n       * @callbackParam {Locale} loc\n       * @callbackReturns {string} relativeFn\n       *\n       ***/\n      'relative': function(date, localeCode, fn) {\n        return dateRelative(date, null, localeCode, fn);\n      },\n  \n      /***\n       * @method relativeTo(d, [localeCode] = currentLocaleCode)\n       * @returns String\n       * @short Returns the date in a text format relative to `d`, such as\n       *        \"5 minutes\".\n       * @extra `d` will accept a date object, timestamp, or string. [localeCode]\n       *        applies to the method output, not `d`.\n       *\n       * @example\n       *\n       *   jan.relativeTo(jul)                 -> 5 months\n       *   yesterday.relativeTo('today', 'ja') -> 一日\n       *\n       * @param {string|number|Date} d\n       * @param {string} localeCode\n       *\n       *\n       ***/\n      'relativeTo': function(date, d, localeCode) {\n        return dateRelative(date, createDate(d), localeCode);\n      },\n  \n      /***\n       * @method is(d, [margin] = 0)\n       * @returns Boolean\n       * @short Returns true if the date matches `d`.\n       * @extra `d` will accept a date object, timestamp, or text format. In the\n       *        case of objects and text formats, `is` will additionally compare\n       *        based on the precision implied in the input. In the case of text\n       *        formats `d` will use the currently set locale. [margin] allows an\n       *        extra margin of error in milliseconds. See `create` for formats.\n       *\n       * @example\n       *\n       *   new Date().is('July')               -> true or false?\n       *   new Date().is('1776')               -> false\n       *   new Date().is('today')              -> true\n       *   new Date().is('weekday')            -> true or false?\n       *   new Date().is('July 4, 1776')       -> false\n       *   new Date().is(-6106093200000)       -> false\n       *   new Date().is(new Date(1776, 6, 4)) -> false\n       *\n       * @param {string|number|Date} d\n       * @param {number} [margin]\n       *\n       ***/\n      'is': function(date, d, margin) {\n        return fullCompareDate(date, d, margin);\n      },\n  \n      /***\n       * @method reset([unit] = 'day', [localeCode] = currentLocaleCode)\n       * @returns Date\n       * @short Resets the date to the beginning of [unit].\n       * @extra This method effectively resets all smaller units, pushing the date\n       *        to the beginning of [unit]. Default is `day`, which effectively\n       *        resets the time. [localeCode] is provided for resetting weeks, which\n       *        is locale dependent. This method modifies the date!\n       *\n       * @example\n       *\n       *   new Date().reset('day')   -> Beginning of the day\n       *   new Date().reset('month') -> Beginning of the month\n       *\n       * @param {string} [unit]\n       * @param {string} [localeCode]\n       *\n       ***/\n      'reset': function(date, unit, localeCode) {\n        var unitIndex = unit ? getUnitIndexForParamName(unit) : DAY_INDEX;\n        moveToBeginningOfUnit(date, unitIndex, localeCode);\n        return date;\n      },\n  \n      /***\n       * @method clone()\n       * @returns Date\n       * @short Clones the date.\n       * @extra Note that the UTC flag will be preserved if set. This flag is\n       *        set via the `setUTC` method or an option on `Date.create`.\n       *\n       * @example\n       *\n       *   new Date().clone() -> Copy of now\n       *\n       ***/\n      'clone': function(date) {\n        return cloneDate(date);\n      },\n  \n      /***\n       * @method iso()\n       * @alias toISOString\n       *\n       ***/\n      'iso': function(date) {\n        return date.toISOString();\n      },\n  \n      /***\n       * @method getWeekday()\n       * @returns Number\n       * @short Alias for `getDay`.\n       *\n       * @example\n       *\n       *   new Date().getWeekday();    -> (ex.) 3\n       *\n       ***/\n      'getWeekday': function(date) {\n        return getWeekday(date);\n      },\n  \n      /***\n       * @method getUTCWeekday()\n       * @returns Number\n       * @short Alias for `getUTCDay`.\n       *\n       * @example\n       *\n       *   new Date().getUTCWeekday(); -> (ex.) 3\n       *\n       ***/\n      'getUTCWeekday': function(date) {\n        return date.getUTCDay();\n      }\n  \n    });\n  \n  \n    /*** @namespace Number ***/\n  \n    /***\n     * @method [dateUnit]()\n     * @returns Number\n     * @short Takes the number as a unit of time and converts to milliseconds.\n     * @extra Method names can be singular or plural.  Note that as \"a month\" is\n     *        ambiguous as a unit of time, `months` will be equivalent to 30.4375\n     *        days, the average number in a month. Be careful using `months` if you\n     *        need exact precision.\n     *\n     * @set\n     *   millisecond\n     *   milliseconds\n     *   second\n     *   seconds\n     *   minute\n     *   minutes\n     *   hour\n     *   hours\n     *   day\n     *   days\n     *   week\n     *   weeks\n     *   month\n     *   months\n     *   year\n     *   years\n     *\n     * @example\n     *\n     *   (5).milliseconds() -> 5\n     *   (10).hours()       -> 36000000\n     *   (1).day()          -> 86400000\n     *\n     ***\n     * @method [dateUnit]Before(d, [options])\n     * @returns Date\n     * @short Returns a date that is `n` units before [d], where `n` is the number.\n     * @extra [d] will accept a date object, timestamp, or text format. Note that\n     *        \"months\" is ambiguous as a unit of time. If the target date falls on a\n     *        day that does not exist (i.e. August 31 -> February 31), the date will\n     *        be shifted to the last day of the month. Be careful using\n     *        `monthsBefore` if you need exact precision. [options] can be an object\n     *        or a locale code as a string. See `create` for more.\n     *\n     *\n     * @set\n     *   millisecondBefore\n     *   millisecondsBefore\n     *   secondBefore\n     *   secondsBefore\n     *   minuteBefore\n     *   minutesBefore\n     *   hourBefore\n     *   hoursBefore\n     *   dayBefore\n     *   daysBefore\n     *   weekBefore\n     *   weeksBefore\n     *   monthBefore\n     *   monthsBefore\n     *   yearBefore\n     *   yearsBefore\n     *\n     * @example\n     *\n     *   (5).daysBefore('tuesday')          -> 5 days before tuesday of this week\n     *   (1).yearBefore('January 23, 1997') -> January 23, 1996\n     *\n     * @param {string|number|Date} d\n     * @param {DateCreateOptions} options\n     *\n     ***\n     * @method [dateUnit]Ago()\n     * @returns Date\n     * @short Returns a date that is `n` units ago.\n     * @extra Note that \"months\" is ambiguous as a unit of time. If the target date\n     *        falls on a day that does not exist (i.e. August 31 -> February 31), the\n     *        date will be shifted to the last day of the month. Be careful using\n     *        `monthsAgo` if you need exact precision.\n     *\n     * @set\n     *   millisecondAgo\n     *   millisecondsAgo\n     *   secondAgo\n     *   secondsAgo\n     *   minuteAgo\n     *   minutesAgo\n     *   hourAgo\n     *   hoursAgo\n     *   dayAgo\n     *   daysAgo\n     *   weekAgo\n     *   weeksAgo\n     *   monthAgo\n     *   monthsAgo\n     *   yearAgo\n     *   yearsAgo\n     *\n     * @example\n     *\n     *   (5).weeksAgo() -> 5 weeks ago\n     *   (1).yearAgo()  -> January 23, 1996\n     *\n     ***\n     * @method [dateUnit]After(d, [options])\n     * @returns Date\n     * @short Returns a date `n` units after [d], where `n` is the number.\n     * @extra [d] will accept a date object, timestamp, or text format. Note that\n     *        \"months\" is ambiguous as a unit of time. If the target date falls on a\n     *        day that does not exist (i.e. August 31 -> February 31), the date will\n     *        be shifted to the last day of the month. Be careful using\n     *        `monthsAfter` if you need exact precision. [options] can be an object\n     *        or a locale code as a string. See `create` for more.\n     *\n     * @set\n     *   millisecondAfter\n     *   millisecondsAfter\n     *   secondAfter\n     *   secondsAfter\n     *   minuteAfter\n     *   minutesAfter\n     *   hourAfter\n     *   hoursAfter\n     *   dayAfter\n     *   daysAfter\n     *   weekAfter\n     *   weeksAfter\n     *   monthAfter\n     *   monthsAfter\n     *   yearAfter\n     *   yearsAfter\n     *\n     * @example\n     *\n     *   (5).daysAfter('tuesday')          -> 5 days after tuesday of this week\n     *   (1).yearAfter('January 23, 1997') -> January 23, 1998\n     *\n     * @param {string|number|Date} d\n     * @param {DateCreateOptions} options\n     *\n     ***\n     * @method [dateUnit]FromNow()\n     * @returns Date\n     * @short Returns a date `n` units from now.\n     * @extra Note that \"months\" is ambiguous as a unit of time. If the target date\n     *        falls on a day that does not exist (i.e. August 31 -> February 31), the\n     *        date will be shifted to the last day of the month. Be careful using\n     *        `monthsFromNow` if you need exact precision.\n     *\n     * @set\n     *   millisecondFromNow\n     *   millisecondsFromNow\n     *   secondFromNow\n     *   secondsFromNow\n     *   minuteFromNow\n     *   minutesFromNow\n     *   hourFromNow\n     *   hoursFromNow\n     *   dayFromNow\n     *   daysFromNow\n     *   weekFromNow\n     *   weeksFromNow\n     *   monthFromNow\n     *   monthsFromNow\n     *   yearFromNow\n     *   yearsFromNow\n     *\n     * @example\n     *\n     *   (5).weeksFromNow() -> 5 weeks ago\n     *   (1).yearFromNow()  -> January 23, 1998\n     *\n     ***/\n    function buildNumberUnitMethods() {\n      defineInstanceSimilar(sugarNumber, DateUnits, function(methods, unit) {\n        var name = unit.name, base, after, before;\n        base = function(n) {\n          return round(n * unit.multiplier);\n        };\n        after = function(n, d, options) {\n          return advanceDate(createDate(d, options, true), name, n);\n        };\n        before = function(n, d, options) {\n          return advanceDate(createDate(d, options, true), name, -n);\n        };\n        methods[name] = base;\n        methods[name + 's'] = base;\n        methods[name + 'Before'] = before;\n        methods[name + 'sBefore'] = before;\n        methods[name + 'Ago'] = before;\n        methods[name + 'sAgo'] = before;\n        methods[name + 'After'] = after;\n        methods[name + 'sAfter'] = after;\n        methods[name + 'FromNow'] = after;\n        methods[name + 'sFromNow'] = after;\n      });\n    }\n  \n    defineInstance(sugarNumber, {\n  \n      /***\n       * @method duration([localeCode] = currentLocaleCode)\n       * @returns String\n       * @short Takes the number as milliseconds and returns a localized string.\n       * @extra This method is the same as `Date#relative` without the localized\n       *        equivalent of \"from now\" or \"ago\". [localeCode] can be passed as the\n       *        first (and only) parameter. Note that this method is only available\n       *        when the dates module is included.\n       *\n       * @example\n       *\n       *   (500).duration() -> '500 milliseconds'\n       *   (1200).duration() -> '1 second'\n       *   (75).minutes().duration() -> '1 hour'\n       *   (75).minutes().duration('es') -> '1 hora'\n       *\n       * @param {string} [localeCode]\n       *\n       ***/\n      'duration': function(n, localeCode) {\n        return localeManager.get(localeCode).getDuration(n);\n      }\n  \n    });\n  \n  \n    var EnglishLocaleBaseDefinition = {\n      'code': 'en',\n      'plural': true,\n      'timeMarkers': 'at',\n      'ampm': 'AM|A.M.|a,PM|P.M.|p',\n      'units': 'millisecond:|s,second:|s,minute:|s,hour:|s,day:|s,week:|s,month:|s,year:|s',\n      'months': 'Jan:uary|,Feb:ruary|,Mar:ch|,Apr:il|,May,Jun:e|,Jul:y|,Aug:ust|,Sep:tember|t|,Oct:ober|,Nov:ember|,Dec:ember|',\n      'weekdays': 'Sun:day|,Mon:day|,Tue:sday|,Wed:nesday|,Thu:rsday|,Fri:day|,Sat:urday|+weekend',\n      'numerals': 'zero,one|first,two|second,three|third,four:|th,five|fifth,six:|th,seven:|th,eight:|h,nin:e|th,ten:|th',\n      'articles': 'a,an,the',\n      'tokens': 'the,st|nd|rd|th,of|in,a|an,on',\n      'time': '{H}:{mm}',\n      'past': '{num} {unit} {sign}',\n      'future': '{num} {unit} {sign}',\n      'duration': '{num} {unit}',\n      'modifiers': [\n        { 'name': 'half',   'src': 'half', 'value': .5 },\n        { 'name': 'midday', 'src': 'noon', 'value': 12 },\n        { 'name': 'midday', 'src': 'midnight', 'value': 24 },\n        { 'name': 'day',    'src': 'yesterday', 'value': -1 },\n        { 'name': 'day',    'src': 'today|tonight', 'value': 0 },\n        { 'name': 'day',    'src': 'tomorrow', 'value': 1 },\n        { 'name': 'sign',   'src': 'ago|before', 'value': -1 },\n        { 'name': 'sign',   'src': 'from now|after|from|in|later', 'value': 1 },\n        { 'name': 'edge',   'src': 'first day|first|beginning', 'value': -2 },\n        { 'name': 'edge',   'src': 'last day', 'value': 1 },\n        { 'name': 'edge',   'src': 'end|last', 'value': 2 },\n        { 'name': 'shift',  'src': 'last', 'value': -1 },\n        { 'name': 'shift',  'src': 'the|this', 'value': 0 },\n        { 'name': 'shift',  'src': 'next', 'value': 1 }\n      ],\n      'parse': [\n        '(?:just)? now',\n        '{shift} {unit:5-7}',\n        \"{months?} (?:{year}|'{yy})\",\n        '{midday} {4?} {day|weekday}',\n        '{months},?(?:[-.\\\\/\\\\s]{year})?',\n        '{edge} of (?:day)? {day|weekday}',\n        '{0} {num}{1?} {weekday} {2} {months},? {year?}',\n        '{shift?} {day?} {weekday?} {timeMarker?} {midday}',\n        '{sign?} {3?} {half} {3?} {unit:3-4|unit:7} {sign?}',\n        '{0?} {edge} {weekday?} {2} {shift?} {unit:4-7?} {months?},? {year?}'\n      ],\n      'timeParse': [\n        '{day|weekday}',\n        '{shift} {unit:5?} {weekday}',\n        '{0?} {date}{1?} {2?} {months?}',\n        '{weekday} {2?} {shift} {unit:5}',\n        '{0?} {num} {2?} {months}\\\\.?,? {year?}',\n        '{num?} {unit:4-5} {sign} {day|weekday}',\n        '{year}[-.\\\\/\\\\s]{months}[-.\\\\/\\\\s]{date}',\n        '{0|months} {date?}{1?} of {shift} {unit:6-7}',\n        '{0?} {num}{1?} {weekday} of {shift} {unit:6}',\n        \"{date}[-.\\\\/\\\\s]{months}[-.\\\\/\\\\s](?:{year}|'?{yy})\",\n        \"{weekday?}\\\\.?,? {months}\\\\.?,? {date}{1?},? (?:{year}|'{yy})?\"\n      ],\n      'timeFrontParse': [\n        '{sign} {num} {unit}',\n        '{num} {unit} {sign}',\n        '{4?} {day|weekday}'\n      ]\n    };\n  \n    var AmericanEnglishDefinition = getEnglishVariant({\n      'mdy': true,\n      'firstDayOfWeek': 0,\n      'firstDayOfWeekYear': 1,\n      'short':  '{MM}/{dd}/{yyyy}',\n      'medium': '{Month} {d}, {yyyy}',\n      'long':   '{Month} {d}, {yyyy} {time}',\n      'full':   '{Weekday}, {Month} {d}, {yyyy} {time}',\n      'stamp':  '{Dow} {Mon} {d} {yyyy} {time}',\n      'time':   '{h}:{mm} {TT}'\n    });\n  \n    var BritishEnglishDefinition = getEnglishVariant({\n      'short':  '{dd}/{MM}/{yyyy}',\n      'medium': '{d} {Month} {yyyy}',\n      'long':   '{d} {Month} {yyyy} {H}:{mm}',\n      'full':   '{Weekday}, {d} {Month}, {yyyy} {time}',\n      'stamp':  '{Dow} {d} {Mon} {yyyy} {time}'\n    });\n  \n    var CanadianEnglishDefinition = getEnglishVariant({\n      'short':  '{yyyy}-{MM}-{dd}',\n      'medium': '{d} {Month}, {yyyy}',\n      'long':   '{d} {Month}, {yyyy} {H}:{mm}',\n      'full':   '{Weekday}, {d} {Month}, {yyyy} {time}',\n      'stamp':  '{Dow} {d} {Mon} {yyyy} {time}'\n    });\n  \n    var LazyLoadedLocales = {\n      'en-US': AmericanEnglishDefinition,\n      'en-GB': BritishEnglishDefinition,\n      'en-AU': BritishEnglishDefinition,\n      'en-CA': CanadianEnglishDefinition\n    };\n  \n    buildLocales();\n    buildDateFormatTokens();\n    buildDateFormatMatcher();\n    buildDateUnitMethods();\n    buildNumberUnitMethods();\n    buildRelativeAliases();\n    setDateChainableConstructor();\n  \n    /***\n     * @module String\n     * @description String manupulation, encoding, truncation, and formatting, and more.\n     *\n     ***/\n  \n    // Flag allowing native string methods to be enhanced\n    var STRING_ENHANCEMENTS_FLAG = 'enhanceString';\n  \n    // Matches non-punctuation characters except apostrophe for capitalization.\n    var CAPITALIZE_REG = /[^\\u0000-\\u0040\\u005B-\\u0060\\u007B-\\u007F]+('s)?/g;\n  \n    // Regex matching camelCase.\n    var CAMELIZE_REG = /(^|_)([^_]+)/g;\n  \n    // Regex matching any HTML entity.\n    var HTML_ENTITY_REG = /&#?(x)?([\\w\\d]{0,5});/gi;\n  \n    // Very basic HTML escaping regex.\n    var HTML_ESCAPE_REG = /[&<>]/g;\n  \n    // Special HTML entities.\n    var HTMLFromEntityMap = {\n      'lt':    '<',\n      'gt':    '>',\n      'amp':   '&',\n      'nbsp':  ' ',\n      'quot':  '\"',\n      'apos':  \"'\"\n    };\n  \n    var HTMLToEntityMap;\n  \n    // Words that should not be capitalized in titles\n    var DOWNCASED_WORDS = [\n      'and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at',\n      'by', 'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over',\n      'with', 'for'\n    ];\n  \n    // HTML tags that do not have inner content.\n    var HTML_VOID_ELEMENTS = [\n      'area','base','br','col','command','embed','hr','img',\n      'input','keygen','link','meta','param','source','track','wbr'\n    ];\n  \n    var LEFT_TRIM_REG  = RegExp('^['+ TRIM_CHARS +']+');\n    var RIGHT_TRIM_REG = RegExp('['+ TRIM_CHARS +']+$');\n    var TRUNC_REG      = RegExp('(?=[' + TRIM_CHARS + '])');\n  \n    // Reference to native String#includes to enhance later.\n    var nativeIncludes = String.prototype.includes;\n  \n    // Base64\n    var encodeBase64, decodeBase64;\n  \n    // Format matcher for String#format.\n    var stringFormatMatcher = createFormatMatcher(deepGetProperty);\n  \n    function padString(num, padding) {\n      return repeatString(isDefined(padding) ? padding : ' ', num);\n    }\n  \n    function truncateString(str, length, from, ellipsis, split) {\n      var str1, str2, len1, len2;\n      if (str.length <= length) {\n        return str.toString();\n      }\n      ellipsis = isUndefined(ellipsis) ? '...' : ellipsis;\n      switch(from) {\n        case 'left':\n          str2 = split ? truncateOnWord(str, length, true) : str.slice(str.length - length);\n          return ellipsis + str2;\n        case 'middle':\n          len1 = ceil(length / 2);\n          len2 = floor(length / 2);\n          str1 = split ? truncateOnWord(str, len1) : str.slice(0, len1);\n          str2 = split ? truncateOnWord(str, len2, true) : str.slice(str.length - len2);\n          return str1 + ellipsis + str2;\n        default:\n          str1 = split ? truncateOnWord(str, length) : str.slice(0, length);\n          return str1 + ellipsis;\n      }\n    }\n  \n    function stringEach(str, search, fn) {\n      var chunks, chunk, reg, result = [];\n      if (isFunction(search)) {\n        fn = search;\n        reg = /[\\s\\S]/g;\n      } else if (!search) {\n        reg = /[\\s\\S]/g;\n      } else if (isString(search)) {\n        reg = RegExp(escapeRegExp(search), 'gi');\n      } else if (isRegExp(search)) {\n        reg = RegExp(search.source, getRegExpFlags(search, 'g'));\n      }\n      // Getting the entire array of chunks up front as we need to\n      // pass this into the callback function as an argument.\n      chunks = runGlobalMatch(str, reg);\n  \n      if (chunks) {\n        for(var i = 0, len = chunks.length, r; i < len; i++) {\n          chunk = chunks[i];\n          result[i] = chunk;\n          if (fn) {\n            r = fn.call(str, chunk, i, chunks);\n            if (r === false) {\n              break;\n            } else if (isDefined(r)) {\n              result[i] = r;\n            }\n          }\n        }\n      }\n      return result;\n    }\n  \n    // \"match\" in < IE9 has enumable properties that will confuse for..in\n    // loops, so ensure that the match is a normal array by manually running\n    // \"exec\". Note that this method is also slightly more performant.\n    function runGlobalMatch(str, reg) {\n      var result = [], match, lastLastIndex;\n      while ((match = reg.exec(str)) != null) {\n        if (reg.lastIndex === lastLastIndex) {\n          reg.lastIndex += 1;\n        } else {\n          result.push(match[0]);\n        }\n        lastLastIndex = reg.lastIndex;\n      }\n      return result;\n    }\n  \n    function eachWord(str, fn) {\n      return stringEach(trim(str), /\\S+/g, fn);\n    }\n  \n    function stringCodes(str, fn) {\n      var codes = new Array(str.length), i, len;\n      for(i = 0, len = str.length; i < len; i++) {\n        var code = str.charCodeAt(i);\n        codes[i] = code;\n        if (fn) {\n          fn.call(str, code, i, str);\n        }\n      }\n      return codes;\n    }\n  \n    function stringUnderscore(str) {\n      var areg = Inflections.acronyms && Inflections.acronyms.reg;\n      return str\n        .replace(/[-\\s]+/g, '_')\n        .replace(areg, function(acronym, index) {\n          return (index > 0 ? '_' : '') + acronym.toLowerCase();\n        })\n        .replace(/([A-Z\\d]+)([A-Z][a-z])/g,'$1_$2')\n        .replace(/([a-z\\d])([A-Z])/g,'$1_$2')\n        .toLowerCase();\n    }\n  \n    function stringCamelize(str, upper) {\n      str = stringUnderscore(str);\n      return str.replace(CAMELIZE_REG, function(match, pre, word, index) {\n        var cap = upper !== false || index > 0, acronym;\n        acronym = getAcronym(word);\n        if (acronym && cap) {\n          return acronym;\n        }\n        return cap ? stringCapitalize(word, true) : word;\n      });\n    }\n  \n    function stringSpacify(str) {\n      return stringUnderscore(str).replace(/_/g, ' ');\n    }\n  \n    function stringCapitalize(str, downcase, all) {\n      if (downcase) {\n        str = str.toLowerCase();\n      }\n      return all ? str.replace(CAPITALIZE_REG, simpleCapitalize) : simpleCapitalize(str);\n    }\n  \n    function stringTitleize(str) {\n      var fullStopPunctuation = /[.:;!]$/, lastHadPunctuation;\n      str = runHumanRules(str);\n      str = stringSpacify(str);\n      return eachWord(str, function(word, index, words) {\n        word = getHumanWord(word) || word;\n        word = getAcronym(word) || word;\n        var hasPunctuation, isFirstOrLast;\n        var first = index == 0, last = index == words.length - 1;\n        hasPunctuation = fullStopPunctuation.test(word);\n        isFirstOrLast = first || last || hasPunctuation || lastHadPunctuation;\n        lastHadPunctuation = hasPunctuation;\n        if (isFirstOrLast || indexOf(DOWNCASED_WORDS, word) === -1) {\n          return stringCapitalize(word, false, true);\n        } else {\n          return word;\n        }\n      }).join(' ');\n    }\n  \n    function stringParameterize(str, separator) {\n      if (separator === undefined) separator = '-';\n      str = str.replace(/[^a-z0-9\\-_]+/gi, separator);\n      if (separator) {\n        var reg = RegExp('^{s}+|{s}+$|({s}){s}+'.split('{s}').join(escapeRegExp(separator)), 'g');\n        str = str.replace(reg, '$1');\n      }\n      return encodeURI(str.toLowerCase());\n    }\n  \n    function reverseString(str) {\n      return str.split('').reverse().join('');\n    }\n  \n    function truncateOnWord(str, limit, fromLeft) {\n      if (fromLeft) {\n        return reverseString(truncateOnWord(reverseString(str), limit));\n      }\n      var words = str.split(TRUNC_REG);\n      var count = 0;\n      return filter(words, function(word) {\n        count += word.length;\n        return count <= limit;\n      }).join('');\n    }\n  \n    function unescapeHTML(str) {\n      return str.replace(HTML_ENTITY_REG, function(full, hex, code) {\n        var special = HTMLFromEntityMap[code];\n        return special || chr(hex ? parseInt(code, 16) : +code);\n      });\n    }\n  \n    function tagIsVoid(tag) {\n      return indexOf(HTML_VOID_ELEMENTS, tag.toLowerCase()) !== -1;\n    }\n  \n    function stringReplaceAll(str, f, replace) {\n      var i = 0, tokens;\n      if (isString(f)) {\n        f = RegExp(escapeRegExp(f), 'g');\n      } else if (f && !f.global) {\n        f = RegExp(f.source, getRegExpFlags(f, 'g'));\n      }\n      if (!replace) {\n        replace = '';\n      } else {\n        tokens = replace;\n        replace = function() {\n          var t = tokens[i++];\n          return t != null ? t : '';\n        };\n      }\n      return str.replace(f, replace);\n    }\n  \n    function replaceTags(str, find, replacement, strip) {\n      var tags = isString(find) ? [find] : find, reg, src;\n      tags = map(tags || [], function(t) {\n        return escapeRegExp(t);\n      }).join('|');\n      src = tags.replace('all', '') || '[^\\\\s>]+';\n      src = '<(\\\\/)?(' + src + ')(\\\\s+[^<>]*?)?\\\\s*(\\\\/)?>';\n      reg = RegExp(src, 'gi');\n      return runTagReplacements(str.toString(), reg, strip, replacement);\n    }\n  \n    function runTagReplacements(str, reg, strip, replacement, fullString) {\n  \n      var match;\n      var result = '';\n      var currentIndex = 0;\n      var openTagName;\n      var openTagAttributes;\n      var openTagCount = 0;\n  \n      function processTag(index, tagName, attributes, tagLength, isVoid) {\n        var content = str.slice(currentIndex, index), s = '', r = '';\n        if (isString(replacement)) {\n          r = replacement;\n        } else if (replacement) {\n          r = replacement.call(fullString, tagName, content, attributes, fullString) || '';\n        }\n        if (strip) {\n          s = r;\n        } else {\n          content = r;\n        }\n        if (content) {\n          content = runTagReplacements(content, reg, strip, replacement, fullString);\n        }\n        result += s + content + (isVoid ? '' : s);\n        currentIndex = index + (tagLength || 0);\n      }\n  \n      fullString = fullString || str;\n      reg = RegExp(reg.source, 'gi');\n  \n      while(match = reg.exec(str)) {\n  \n        var tagName         = match[2];\n        var attributes      = (match[3]|| '').slice(1);\n        var isClosingTag    = !!match[1];\n        var isSelfClosing   = !!match[4];\n        var tagLength       = match[0].length;\n        var isVoid          = tagIsVoid(tagName);\n        var isOpeningTag    = !isClosingTag && !isSelfClosing && !isVoid;\n        var isSameAsCurrent = tagName === openTagName;\n  \n        if (!openTagName) {\n          result += str.slice(currentIndex, match.index);\n          currentIndex = match.index;\n        }\n  \n        if (isOpeningTag) {\n          if (!openTagName) {\n            openTagName = tagName;\n            openTagAttributes = attributes;\n            openTagCount++;\n            currentIndex += tagLength;\n          } else if (isSameAsCurrent) {\n            openTagCount++;\n          }\n        } else if (isClosingTag && isSameAsCurrent) {\n          openTagCount--;\n          if (openTagCount === 0) {\n            processTag(match.index, openTagName, openTagAttributes, tagLength, isVoid);\n            openTagName       = null;\n            openTagAttributes = null;\n          }\n        } else if (!openTagName) {\n          processTag(match.index, tagName, attributes, tagLength, isVoid);\n        }\n      }\n      if (openTagName) {\n        processTag(str.length, openTagName, openTagAttributes);\n      }\n      result += str.slice(currentIndex);\n      return result;\n    }\n  \n    function numberOrIndex(str, n, from) {\n      if (isString(n)) {\n        n = str.indexOf(n);\n        if (n === -1) {\n          n = from ? str.length : 0;\n        }\n      }\n      return n;\n    }\n  \n    function buildBase64() {\n      var encodeAscii, decodeAscii;\n  \n      function catchEncodingError(fn) {\n        return function(str) {\n          try {\n            return fn(str);\n          } catch(e) {\n            return '';\n          }\n        };\n      }\n  \n      if (typeof Buffer !== 'undefined') {\n        encodeBase64 = function(str) {\n          return new Buffer(str).toString('base64');\n        };\n        decodeBase64 = function(str) {\n          return new Buffer(str, 'base64').toString('utf8');\n        };\n        return;\n      }\n      if (typeof btoa !== 'undefined') {\n        encodeAscii = catchEncodingError(btoa);\n        decodeAscii = catchEncodingError(atob);\n      } else {\n        var key = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n        var base64reg = /[^A-Za-z0-9\\+\\/\\=]/g;\n        encodeAscii = function(str) {\n          var output = '';\n          var chr1, chr2, chr3;\n          var enc1, enc2, enc3, enc4;\n          var i = 0;\n          do {\n            chr1 = str.charCodeAt(i++);\n            chr2 = str.charCodeAt(i++);\n            chr3 = str.charCodeAt(i++);\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n            if (isNaN(chr2)) {\n              enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n              enc4 = 64;\n            }\n            output += key.charAt(enc1);\n            output += key.charAt(enc2);\n            output += key.charAt(enc3);\n            output += key.charAt(enc4);\n            chr1 = chr2 = chr3 = '';\n            enc1 = enc2 = enc3 = enc4 = '';\n          } while (i < str.length);\n          return output;\n        };\n        decodeAscii = function(input) {\n          var output = '';\n          var chr1, chr2, chr3;\n          var enc1, enc2, enc3, enc4;\n          var i = 0;\n          if (input.match(base64reg)) {\n            return '';\n          }\n          input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n          do {\n            enc1 = key.indexOf(input.charAt(i++));\n            enc2 = key.indexOf(input.charAt(i++));\n            enc3 = key.indexOf(input.charAt(i++));\n            enc4 = key.indexOf(input.charAt(i++));\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n            output = output + chr(chr1);\n            if (enc3 != 64) {\n              output = output + chr(chr2);\n            }\n            if (enc4 != 64) {\n              output = output + chr(chr3);\n            }\n            chr1 = chr2 = chr3 = '';\n            enc1 = enc2 = enc3 = enc4 = '';\n          } while (i < input.length);\n          return output;\n        };\n      }\n      encodeBase64 = function(str) {\n        return encodeAscii(unescape(encodeURIComponent(str)));\n      };\n      decodeBase64 = function(str) {\n        return decodeURIComponent(escape(decodeAscii(str)));\n      };\n    }\n  \n    function buildEntities() {\n      HTMLToEntityMap = {};\n      forEachProperty(HTMLFromEntityMap, function(val, key) {\n        HTMLToEntityMap[val] = '&' + key + ';';\n      });\n    }\n  \n    function callIncludesWithRegexSupport(str, search, position) {\n      if (!isRegExp(search)) {\n        return nativeIncludes.call(str, search, position);\n      }\n      if (position) {\n        str = str.slice(position);\n      }\n      return search.test(str);\n    }\n  \n    defineInstance(sugarString, {\n  \n      // Enhancment to String#includes to allow a regex.\n      'includes': fixArgumentLength(callIncludesWithRegexSupport)\n  \n    }, [ENHANCEMENTS_FLAG, STRING_ENHANCEMENTS_FLAG]);\n  \n    defineInstance(sugarString, {\n  \n      /***\n       * @method at(index, [loop] = false)\n       * @returns Mixed\n       * @short Gets the character(s) at a given index.\n       * @extra When [loop] is true, overshooting the end of the string will begin\n       *        counting from the other end. `index` may be negative. If `index` is\n       *        an array, multiple elements will be returned.\n       * @example\n       *\n       *   'jumpy'.at(0)             -> 'j'\n       *   'jumpy'.at(2)             -> 'm'\n       *   'jumpy'.at(5)             -> ''\n       *   'jumpy'.at(5, true)       -> 'j'\n       *   'jumpy'.at(-1)            -> 'y'\n       *   'lucky charms'.at([2, 4]) -> ['u','k']\n       *\n       * @param {number|Array<number>} index\n       * @param {boolean} [loop]\n       *\n       ***/\n      'at': function(str, index, loop) {\n        return getEntriesForIndexes(str, index, loop, true);\n      },\n  \n      /***\n       * @method escapeURL([param] = false)\n       * @returns String\n       * @short Escapes characters in a string to make a valid URL.\n       * @extra If [param] is true, it will also escape valid URL characters. Use\n       *        this when the entire string is meant for use in a query string.\n       *\n       * @example\n       *\n       *   'a, b, and c'.escapeURL() -> 'a,%20b,%20and%20c'\n       *   'http://foo.com/'.escapeURL(true) -> 'http%3A%2F%2Ffoo.com%2F'\n       *\n       * @param {boolean} [param]\n       *\n       ***/\n      'escapeURL': function(str, param) {\n        return param ? encodeURIComponent(str) : encodeURI(str);\n      },\n  \n      /***\n       * @method unescapeURL([partial] = false)\n       * @returns String\n       * @short Restores escaped characters in a URL escaped string.\n       * @extra If [partial] is true, it will only unescape non-valid URL tokens,\n       *        and is included here for completeness, but should be rarely needed.\n       *\n       * @example\n       *\n       *   'http%3A%2F%2Ffoo.com%2F'.unescapeURL()     -> 'http://foo.com/'\n       *   'http%3A%2F%2Ffoo.com%2F'.unescapeURL(true) -> 'http%3A%2F%2Ffoo.com%2F'\n       *\n       * @param {boolean} [partial]\n       *\n       ***/\n      'unescapeURL': function(str, param) {\n        return param ? decodeURI(str) : decodeURIComponent(str);\n      },\n  \n      /***\n       * @method escapeHTML()\n       * @returns String\n       * @short Converts HTML characters to their entity equivalents.\n       *\n       * @example\n       *\n       *   '<p>some text</p>'.escapeHTML() -> '&lt;p&gt;some text&lt;/p&gt;'\n       *   'one & two'.escapeHTML()        -> 'one &amp; two'\n       *\n       ***/\n      'escapeHTML': function(str) {\n        return str.replace(HTML_ESCAPE_REG, function(chr) {\n          return getOwn(HTMLToEntityMap, chr);\n        });\n      },\n  \n      /***\n       * @method unescapeHTML()\n       * @returns String\n       * @short Restores escaped HTML characters.\n       *\n       * @example\n       *\n       *   '&lt;p&gt;some text&lt;/p&gt;'.unescapeHTML() -> '<p>some text</p>'\n       *   'one &amp; two'.unescapeHTML()                -> 'one & two'\n       *\n       ***/\n      'unescapeHTML': function(str) {\n        return unescapeHTML(str);\n      },\n  \n      /***\n       * @method stripTags([tag] = 'all', [replace])\n       * @returns String\n       * @short Strips HTML tags from the string.\n       * @extra [tag] may be an array of tags or 'all', in which case all tags will\n       *        be stripped. [replace] will replace what was stripped, and may be a\n       *        string or a function to handle replacements. If this function returns\n       *        a string, then it will be used for the replacement. If it returns\n       *        `undefined`, the tags will be stripped normally.\n       *\n       * @callback tagReplaceFn\n       *\n       *   tag     The tag name.\n       *   inner   The tag content.\n       *   attr    The attributes on the tag, if any, as a string.\n       *   outer   The entire matched tag string.\n       *\n       * @example\n       *\n       *   '<p>just <b>some</b> text</p>'.stripTags()    -> 'just some text'\n       *   '<p>just <b>some</b> text</p>'.stripTags('p') -> 'just <b>some</b> text'\n       *   '<p>hi!</p>'.stripTags('p', function(all, content) {\n       *     return '|';\n       *   }); -> '|hi!|'\n       *\n       * @param {string} tag\n       * @param {string|tagReplaceFn} replace\n       * @callbackParam {string} tag\n       * @callbackParam {string} inner\n       * @callbackParam {string} attr\n       * @callbackParam {string} outer\n       * @callbackReturns {string} tagReplaceFn\n       *\n       ***/\n      'stripTags': function(str, tag, replace) {\n        return replaceTags(str, tag, replace, true);\n      },\n  \n      /***\n       * @method removeTags([tag] = 'all', [replace])\n       * @returns String\n       * @short Removes HTML tags and their contents from the string.\n       * @extra [tag] may be an array of tags or 'all', in which case all tags will\n       *        be removed. [replace] will replace what was removed, and may be a\n       *        string or a function to handle replacements. If this function returns\n       *        a string, then it will be used for the replacement. If it returns\n       *        `undefined`, the tags will be removed normally.\n       *\n       * @callback tagReplaceFn\n       *\n       *   tag     The tag name.\n       *   inner   The tag content.\n       *   attr    The attributes on the tag, if any, as a string.\n       *   outer   The entire matched tag string.\n       *\n       * @example\n       *\n       *   '<p>just <b>some</b> text</p>'.removeTags()    -> ''\n       *   '<p>just <b>some</b> text</p>'.removeTags('b') -> '<p>just text</p>'\n       *   '<p>hi!</p>'.removeTags('p', function(all, content) {\n       *     return 'bye!';\n       *   }); -> 'bye!'\n       *\n       * @param {string} tag\n       * @param {string|tagReplaceFn} replace\n       * @callbackParam {string} tag\n       * @callbackParam {string} inner\n       * @callbackParam {string} attr\n       * @callbackParam {string} outer\n       * @callbackReturns {string} tagReplaceFn\n       *\n       ***/\n      'removeTags': function(str, tag, replace) {\n        return replaceTags(str, tag, replace, false);\n      },\n  \n      /***\n       * @method encodeBase64()\n       * @returns String\n       * @short Encodes the string into base64 encoding.\n       * @extra This method wraps native methods when available, and uses a custom\n       *        implementation when not available. It can also handle Unicode\n       *        string encodings.\n       *\n       * @example\n       *\n       *   'gonna get encoded!'.encodeBase64()  -> 'Z29ubmEgZ2V0IGVuY29kZWQh'\n       *   'http://twitter.com/'.encodeBase64() -> 'aHR0cDovL3R3aXR0ZXIuY29tLw=='\n       *\n       ***/\n      'encodeBase64': function(str) {\n        return encodeBase64(str);\n      },\n  \n      /***\n       * @method decodeBase64()\n       * @returns String\n       * @short Decodes the string from base64 encoding.\n       * @extra This method wraps native methods when available, and uses a custom\n       *        implementation when not available. It can also handle Unicode string\n       *        encodings.\n       *\n       * @example\n       *\n       *   'aHR0cDovL3R3aXR0ZXIuY29tLw=='.decodeBase64() -> 'http://twitter.com/'\n       *   'anVzdCBnb3QgZGVjb2RlZA=='.decodeBase64()     -> 'just got decoded!'\n       *\n       ***/\n      'decodeBase64': function(str) {\n        return decodeBase64(str);\n      },\n  \n      /***\n       * @method forEach([search], [callback])\n       * @returns Array\n       * @short Runs callback [fn] against every character in the string, or every\n       *        every occurence of [search] if it is provided.\n       * @extra Returns an array of matches. [search] may be either a string or\n       *        regex, and defaults to every character in the string. If [fn]\n       *        returns false at any time it will break out of the loop.\n       *\n       * @callback stringEachFn\n       *\n       *   match  The current match.\n       *   i      The current index.\n       *   arr    An array of all matches.\n       *\n       * @example\n       *\n       *   'jumpy'.forEach(log)     -> ['j','u','m','p','y']\n       *   'jumpy'.forEach(/[r-z]/) -> ['u','y']\n       *   'jumpy'.forEach(/mp/)    -> ['mp']\n       *   'jumpy'.forEach(/[r-z]/, function(m) {\n       *     // Called twice: \"u\", \"y\"\n       *   });\n       *\n       * @signature forEach(callback)\n       * @param {string|RegExp} [search]\n       * @param {stringEachFn} [callback]\n       * @callbackParam {string} match\n       * @callbackParam {number} i\n       * @callbackParam {Array<string>} arr\n       *\n       ***/\n      'forEach': function(str, search, fn) {\n        return stringEach(str, search, fn);\n      },\n  \n      /***\n       * @method chars([callback])\n       * @returns Array\n       * @short Runs [fn] against each character in the string, and returns an array.\n       *\n       * @callback eachCharFn\n       *\n       *   char  The current character.\n       *   i     The current index.\n       *   arr   An array of all characters.\n       *\n       * @example\n       *\n       *   'jumpy'.chars() -> ['j','u','m','p','y']\n       *   'jumpy'.chars(function(c) {\n       *     // Called 5 times: \"j\",\"u\",\"m\",\"p\",\"y\"\n       *   });\n       *\n       * @param {eachCharFn} [callback]\n       * @callbackParam {string} char\n       * @callbackParam {number} i\n       * @callbackParam {Array<string>} arr\n       *\n       ***/\n      'chars': function(str, search, fn) {\n        return stringEach(str, search, fn);\n      },\n  \n      /***\n       * @method words([callback])\n       * @returns Array\n       * @short Runs [fn] against each word in the string, and returns an array.\n       * @extra A \"word\" is defined as any sequence of non-whitespace characters.\n       *\n       * @callback eachWordFn\n       *\n       *   word  The current word.\n       *   i     The current index.\n       *   arr   An array of all words.\n       *\n       * @example\n       *\n       *   'broken wear'.words() -> ['broken','wear']\n       *   'broken wear'.words(function(w) {\n       *     // Called twice: \"broken\", \"wear\"\n       *   });\n       *\n       * @param {eachWordFn} [callback]\n       * @callbackParam {string} word\n       * @callbackParam {number} i\n       * @callbackParam {Array<string>} arr\n       *\n       ***/\n      'words': function(str, fn) {\n        return stringEach(trim(str), /\\S+/g, fn);\n      },\n  \n      /***\n       * @method lines([callback])\n       * @returns Array\n       * @short Runs [fn] against each line in the string, and returns an array.\n       *\n       * @callback eachLineFn\n       *\n       *   line  The current line.\n       *   i     The current index.\n       *   arr   An array of all lines.\n       *\n       * @example\n       *\n       *   lineText.lines() -> array of lines\n       *   lineText.lines(function(l) {\n       *     // Called once per line\n       *   });\n       *\n       * @param {eachLineFn} [callback]\n       * @callbackParam {string} line\n       * @callbackParam {number} i\n       * @callbackParam {Array<string>} arr\n       *\n       ***/\n      'lines': function(str, fn) {\n        return stringEach(trim(str), /^.*$/gm, fn);\n      },\n  \n      /***\n       * @method codes([callback])\n       * @returns Array\n       * @short Runs callback [fn] against each character code in the string.\n       *        Returns an array of character codes.\n       *\n       * @callback eachCodeFn\n       *\n       *   code  The current character code.\n       *   i     The current index.\n       *   str   The string being operated on.\n       *\n       * @example\n       *\n       *   'jumpy'.codes() -> [106,117,109,112,121]\n       *   'jumpy'.codes(function(c) {\n       *     // Called 5 times: 106, 117, 109, 112, 121\n       *   });\n       *\n       * @param {eachCodeFn} [callback]\n       * @callbackParam {number} code\n       * @callbackParam {number} i\n       * @callbackParam {string} str\n       *\n       ***/\n      'codes': function(str, fn) {\n        return stringCodes(str, fn);\n      },\n  \n      /***\n       * @method shift(n)\n       * @returns Array\n       * @short Shifts each character in the string `n` places in the character map.\n       *\n       * @example\n       *\n       *   'a'.shift(1)  -> 'b'\n       *   'ク'.shift(1) -> 'グ'\n       *\n       * @param {number} n\n       *\n       ***/\n      'shift': function(str, n) {\n        var result = '';\n        n = n || 0;\n        stringCodes(str, function(c) {\n          result += chr(c + n);\n        });\n        return result;\n      },\n  \n      /***\n       * @method isBlank()\n       * @returns Boolean\n       * @short Returns true if the string has length 0 or contains only whitespace.\n       *\n       * @example\n       *\n       *   ''.isBlank()      -> true\n       *   '   '.isBlank()   -> true\n       *   'noway'.isBlank() -> false\n       *\n       ***/\n      'isBlank': function(str) {\n        return trim(str).length === 0;\n      },\n  \n      /***\n       * @method isEmpty()\n       * @returns Boolean\n       * @short Returns true if the string has length 0.\n       *\n       * @example\n       *\n       *   ''.isEmpty()  -> true\n       *   'a'.isBlank() -> false\n       *   ' '.isBlank() -> false\n       *\n       ***/\n      'isEmpty': function(str) {\n        return str.length === 0;\n      },\n  \n      /***\n       * @method insert(str, [index] = length)\n       * @returns String\n       * @short Adds `str` at [index]. Allows negative values.\n       *\n       * @example\n       *\n       *   'dopamine'.insert('e', 3)       -> dopeamine\n       *   'spelling eror'.insert('r', -3) -> spelling error\n       *\n       * @param {string} str\n       * @param {number} [index]\n       *\n       ***/\n      'insert': function(str, substr, index) {\n        index = isUndefined(index) ? str.length : index;\n        return str.slice(0, index) + substr + str.slice(index);\n      },\n  \n      /***\n       * @method remove(f)\n       * @returns String\n       * @short Removes the first occurrence of `f` in the string.\n       * @extra `f` can be a either case-sensitive string or a regex. In either case\n       *        only the first match will be removed. To remove multiple occurrences,\n       *        use `removeAll`.\n       *\n       * @example\n       *\n       *   'schfifty five'.remove('f')      -> 'schifty five'\n       *   'schfifty five'.remove(/[a-f]/g) -> 'shfifty five'\n       *\n       * @param {string|RegExp} f\n       *\n       ***/\n      'remove': function(str, f) {\n        return str.replace(f, '');\n      },\n  \n      /***\n       * @method removeAll(f)\n       * @returns String\n       * @short Removes any occurences of `f` in the string.\n       * @extra `f` can be either a case-sensitive string or a regex. In either case\n       *        all matches will be removed. To remove only a single occurence, use\n       *        `remove`.\n       *\n       * @example\n       *\n       *   'schfifty five'.removeAll('f')     -> 'schity ive'\n       *   'schfifty five'.removeAll(/[a-f]/) -> 'shity iv'\n       *\n       * @param {string|RegExp} f\n       *\n       ***/\n      'removeAll': function(str, f) {\n        return stringReplaceAll(str, f);\n      },\n  \n      /***\n       * @method reverse()\n       * @returns String\n       * @short Reverses the string.\n       *\n       * @example\n       *\n       *   'jumpy'.reverse()        -> 'ypmuj'\n       *   'lucky charms'.reverse() -> 'smrahc ykcul'\n       *\n       ***/\n      'reverse': function(str) {\n        return reverseString(str);\n      },\n  \n      /***\n       * @method compact()\n       * @returns String\n       * @short Compacts whitespace in the string to a single space and trims the ends.\n       *\n       * @example\n       *\n       *   'too \\n much \\n space'.compact() -> 'too much space'\n       *   'enough \\n '.compact()           -> 'enought'\n       *\n       ***/\n      'compact': function(str) {\n        return trim(str).replace(/([\\r\\n\\s　])+/g, function(match, whitespace) {\n          return whitespace === '　' ? whitespace : ' ';\n        });\n      },\n  \n      /***\n       * @method from([index] = 0)\n       * @returns String\n       * @short Returns a section of the string starting from [index].\n       *\n       * @example\n       *\n       *   'lucky charms'.from()   -> 'lucky charms'\n       *   'lucky charms'.from(7)  -> 'harms'\n       *\n       * @param {number} [index]\n       *\n       ***/\n      'from': function(str, from) {\n        return str.slice(numberOrIndex(str, from, true));\n      },\n  \n      /***\n       * @method to([index] = end)\n       * @returns String\n       * @short Returns a section of the string ending at [index].\n       *\n       * @example\n       *\n       *   'lucky charms'.to()   -> 'lucky charms'\n       *   'lucky charms'.to(7)  -> 'lucky ch'\n       *\n       * @param {number} [index]\n       *\n       ***/\n      'to': function(str, to) {\n        if (isUndefined(to)) to = str.length;\n        return str.slice(0, numberOrIndex(str, to));\n      },\n  \n      /***\n       * @method dasherize()\n       * @returns String\n       * @short Converts underscores and camel casing to hypens.\n       *\n       * @example\n       *\n       *   'a_farewell_to_arms'.dasherize() -> 'a-farewell-to-arms'\n       *   'capsLock'.dasherize()           -> 'caps-lock'\n       *\n       ***/\n      'dasherize': function(str) {\n        return stringUnderscore(str).replace(/_/g, '-');\n      },\n  \n      /***\n       * @method underscore()\n       * @returns String\n       * @short Converts hyphens and camel casing to underscores.\n       *\n       * @example\n       *\n       *   'a-farewell-to-arms'.underscore() -> 'a_farewell_to_arms'\n       *   'capsLock'.underscore()           -> 'caps_lock'\n       *\n       ***/\n      'underscore': function(str) {\n        return stringUnderscore(str);\n      },\n  \n      /***\n       * @method camelize([upper] = true)\n       * @returns String\n       * @short Converts underscores and hyphens to camel case.\n       * @extra If [upper] is true, the string will be UpperCamelCase. If the\n       *        inflections module is included, acronyms can also be defined that\n       *        will be used when camelizing.\n       *\n       * @example\n       *\n       *   'caps_lock'.camelize()              -> 'CapsLock'\n       *   'moz-border-radius'.camelize()      -> 'MozBorderRadius'\n       *   'moz-border-radius'.camelize(false) -> 'mozBorderRadius'\n       *   'http-method'.camelize()            -> 'HTTPMethod'\n       *\n       * @param {boolean} [upper]\n       *\n       ***/\n      'camelize': function(str, upper) {\n        return stringCamelize(str, upper);\n      },\n  \n      /***\n       * @method spacify()\n       * @returns String\n       * @short Converts camelcase, underscores, and hyphens to spaces.\n       *\n       * @example\n       *\n       *   'camelCase'.spacify()                         -> 'camel case'\n       *   'an-ugly-string'.spacify()                    -> 'an ugly string'\n       *   'oh-no_youDid-not'.spacify().capitalize(true) -> 'something else'\n       *\n       ***/\n      'spacify': function(str) {\n        return stringSpacify(str);\n      },\n  \n      /***\n       * @method titleize()\n       * @returns String\n       * @short Creates a title version of the string.\n       * @extra Capitalizes all the words and replaces some characters in the string\n       *        to create a nicer looking title. String#titleize is meant for\n       *        creating pretty output.\n       *\n       * @example\n       *\n       *   'man from the boondocks'.titleize() -> 'Man from the Boondocks'\n       *   'x-men: apocalypse'.titleize() -> 'X Men: Apocalypse'\n       *   'TheManWithoutAPast'.titleize() -> 'The Man Without a Past'\n       *   'raiders_of_the_lost_ark'.titleize() -> 'Raiders of the Lost Ark'\n       *\n       ***/\n      'titleize': function(str) {\n        return stringTitleize(str);\n      },\n  \n      /***\n       * @method parameterize()\n       * @returns String\n       * @short Replaces special characters in a string so that it may be used as\n       *        part of a pretty URL.\n       *\n       * @example\n       *\n       *   'hell, no!'.parameterize() -> 'hell-no'\n       *\n       ***/\n      'parameterize': function(str, separator) {\n        return stringParameterize(str, separator);\n      },\n  \n      /***\n       * @method truncate(length, [from] = 'right', [ellipsis] = '...')\n       * @returns String\n       * @short Truncates a string.\n       * @extra [from] can be `'right'`, `'left'`, or `'middle'`. If the string is\n       *        shorter than `length`, [ellipsis] will not be added.\n       *\n       * @example\n       *\n       *   'sittin on the dock'.truncate(10)           -> 'sittin on ...'\n       *   'sittin on the dock'.truncate(10, 'left')   -> '...n the dock'\n       *   'sittin on the dock'.truncate(10, 'middle') -> 'sitti... dock'\n       *\n       * @param {number} length\n       * @param {string} [from]\n       * @param {string} [ellipsis]\n       *\n       ***/\n      'truncate': function(str, length, from, ellipsis) {\n        return truncateString(str, length, from, ellipsis);\n      },\n  \n      /***\n       * @method truncateOnWord(length, [from] = 'right', [ellipsis] = '...')\n       * @returns String\n       * @short Truncates a string without splitting up words.\n       * @extra [from] can be `'right'`, `'left'`, or `'middle'`. If the string is\n       *        shorter than `length`, [ellipsis] will not be added. A \"word\" is\n       *        defined as any sequence of non-whitespace characters.\n       *\n       * @example\n       *\n       *   'here we go'.truncateOnWord(5)         -> 'here...'\n       *   'here we go'.truncateOnWord(5, 'left') -> '...we go'\n       *\n       * @param {number} length\n       * @param {string} [from]\n       * @param {string} [ellipsis]\n       *\n       ***/\n      'truncateOnWord': function(str, length, from, ellipsis) {\n        return truncateString(str, length, from, ellipsis, true);\n      },\n  \n      /***\n       * @method pad(num, [padding] = ' ')\n       * @returns String\n       * @short Pads the string out with [padding] to be exactly `num` characters.\n       *\n       * @example\n       *\n       *   'wasabi'.pad(8)      -> ' wasabi '\n       *   'wasabi'.pad(8, '-') -> '-wasabi-'\n       *\n       * @param {number} num\n       * @param {string} [padding]\n       *\n       ***/\n      'pad': function(str, num, padding) {\n        var half, front, back;\n        num   = coercePositiveInteger(num);\n        half  = max(0, num - str.length) / 2;\n        front = floor(half);\n        back  = ceil(half);\n        return padString(front, padding) + str + padString(back, padding);\n      },\n  \n      /***\n       * @method padLeft(num, [padding] = ' ')\n       * @returns String\n       * @short Pads the string out from the left with [padding] to be exactly\n       *        `num` characters.\n       *\n       * @example\n       *\n       *   'wasabi'.padLeft(8)      -> '  wasabi'\n       *   'wasabi'.padLeft(8, '-') -> '--wasabi'\n       *\n       * @param {number} num\n       * @param {string} [padding]\n       *\n       ***/\n      'padLeft': function(str, num, padding) {\n        num = coercePositiveInteger(num);\n        return padString(max(0, num - str.length), padding) + str;\n      },\n  \n      /***\n       * @method padRight(num, [padding] = ' ')\n       * @returns String\n       * @short Pads the string out from the right with [padding] to be exactly\n       *        `num` characters.\n       *\n       * @example\n       *\n       *   'wasabi'.padRight(8)      -> 'wasabi  '\n       *   'wasabi'.padRight(8, '-') -> 'wasabi--'\n       *\n       * @param {number} num\n       * @param {string} [padding]\n       *\n       ***/\n      'padRight': function(str, num, padding) {\n        num = coercePositiveInteger(num);\n        return str + padString(max(0, num - str.length), padding);\n      },\n  \n      /***\n       * @method first([n] = 1)\n       * @returns String\n       * @short Returns the first [n] characters of the string.\n       *\n       * @example\n       *\n       *   'lucky charms'.first()  -> 'l'\n       *   'lucky charms'.first(3) -> 'luc'\n       *\n       * @param {number} [n]\n       *\n       ***/\n      'first': function(str, num) {\n        if (isUndefined(num)) num = 1;\n        return str.substr(0, num);\n      },\n  \n      /***\n       * @method last([n] = 1)\n       * @returns String\n       * @short Returns the last [n] characters of the string.\n       *\n       * @example\n       *\n       *   'lucky charms'.last()  -> 's'\n       *   'lucky charms'.last(3) -> 'rms'\n       *\n       * @param {number} [n]\n       *\n       ***/\n      'last': function(str, num) {\n        if (isUndefined(num)) num = 1;\n        var start = str.length - num < 0 ? 0 : str.length - num;\n        return str.substr(start);\n      },\n  \n      /***\n       * @method toNumber([base] = 10)\n       * @returns Number\n       * @short Converts the string into a number.\n       * @extra Any value with a \".\" fill be converted to a floating point value,\n       *        otherwise an integer.\n       *\n       * @example\n       *\n       *   '153'.toNumber()    -> 153\n       *   '12,000'.toNumber() -> 12000\n       *   '10px'.toNumber()   -> 10\n       *   'ff'.toNumber(16)   -> 255\n       *\n       * @param {number} [base]\n       *\n       ***/\n      'toNumber': function(str, base) {\n        return stringToNumber(str, base);\n      },\n  \n      /***\n       * @method capitalize([lower] = false, [all] = false)\n       * @returns String\n       * @short Capitalizes the first character of the string.\n       * @extra If [lower] is true, the remainder of the string will be downcased.\n       *        If [all] is true, all words in the string will be capitalized.\n       *\n       * @example\n       *\n       *   'hello'.capitalize()           -> 'Hello'\n       *   'HELLO'.capitalize(true)       -> 'Hello'\n       *   'hello kitty'.capitalize()     -> 'Hello kitty'\n       *   'hEllO kItTy'.capitalize(true, true) -> 'Hello Kitty'\n       *\n       * @param {boolean} [lower]\n       * @param {boolean} [all]\n       *\n       ***/\n      'capitalize': function(str, lower, all) {\n        return stringCapitalize(str, lower, all);\n      },\n  \n      /***\n       * @method trimLeft()\n       * @returns String\n       * @short Removes leading whitespace from the string.\n       * @extra Whitespace is defined as line breaks, tabs, and any character in the\n       *        \"Space, Separator\" Unicode category, conforming to the the ES5 `trim`\n       *        spec.\n       *\n       * @example\n       *\n       *   '   wasabi   '.trimLeft()  -> 'wasabi   '\n       *\n       ***/\n      'trimLeft': function(str) {\n        return str.replace(LEFT_TRIM_REG, '');\n      },\n  \n      /***\n       * @method trimRight()\n       * @returns String\n       * @short Removes trailing whitespace from the string.\n       * @extra Whitespace is defined as line breaks, tabs, and any character in the\n       *        \"Space, Separator\" Unicode category, conforming to the the ES5 `trim`\n       *        spec.\n       *\n       * @example\n       *\n       *   '   wasabi   '.trimRight() -> '   wasabi'\n       *\n       ***/\n      'trimRight': function(str) {\n        return str.replace(RIGHT_TRIM_REG, '');\n      }\n  \n    });\n  \n    defineInstanceWithArguments(sugarString, {\n  \n      /***\n       * @method replaceAll(f, [str1], [str2], ...)\n       * @returns String\n       * @short Replaces all occurences of `f` with arguments passed.\n       * @extra This method is intended to be a quick way to perform multiple string\n       *        replacements quickly when the replacement token differs depending on\n       *        position. `f` can be either a case-sensitive string or a regex.\n       *        In either case all matches will be replaced.\n       *\n       * @example\n       *\n       *   '-x -y -z'.replaceAll('-', 1, 2, 3)               -> '1x 2y 3z'\n       *   'one and two'.replaceAll(/one|two/, '1st', '2nd') -> '1st and 2nd'\n       *\n       * @param {string|RegExp} f\n       * @param {string} [str1]\n       * @param {string} [str2]\n       *\n       ***/\n      'replaceAll': function(str, f, args) {\n        return stringReplaceAll(str, f, args);\n      },\n  \n      /***\n       * @method format(obj1, [obj2], ...)\n       * @returns String\n       * @short Replaces `{}` tokens in the string with arguments or properties.\n       * @extra Tokens support `deep properties`. If a single object is passed, its\n       *        properties can be accessed by keywords such as `{name}`. If multiple\n       *        objects or a non-object are passed, they can be accessed by the\n       *        argument position like `{0}`. Literal braces in the string can be\n       *        escaped by repeating them.\n       *\n       * @example\n       *\n       *   'Welcome, {name}.'.format({ name: 'Bill' }) -> 'Welcome, Bill.'\n       *   'You are {0} years old today.'.format(5)    -> 'You are 5 years old today.'\n       *   '{0.name} and {1.name}'.format(users)       -> logs first two users' names\n       *   '${currencies.usd.balance}'.format(Harry)   -> \"$500\"\n       *   '{{Hello}}'.format('Hello')                 -> \"{Hello}\"\n       *\n       * @param {any} [obj1]\n       * @param {any} [obj2]\n       *\n       ***/\n      'format': function(str, args) {\n        var arg1 = args[0] && args[0].valueOf();\n        // Unwrap if a single object is passed in.\n        if (args.length === 1 && isObjectType(arg1)) {\n          args = arg1;\n        }\n        return stringFormatMatcher(str, args);\n      }\n  \n    });\n  \n    buildBase64();\n    buildEntities();\n  \n    /***\n     * @module Array\n     * @description Array manipulation and traversal, alphanumeric sorting and collation.\n     *\n     ***/\n  \n    var HALF_WIDTH_NINE = 0x39;\n    var FULL_WIDTH_NINE = 0xff19;\n  \n    // Undefined array elements in < IE8 will not be visited by concat\n    // and so will not be copied. This means that non-sparse arrays will\n    // become sparse, so detect for this here.\n    var HAS_CONCAT_BUG = !('0' in [].concat(undefined).concat());\n  \n    var ARRAY_OPTIONS = {\n      'sortIgnore':      null,\n      'sortNatural':     true,\n      'sortIgnoreCase':  true,\n      'sortOrder':       getSortOrder(),\n      'sortCollate':     collateStrings,\n      'sortEquivalents': getSortEquivalents()\n    };\n  \n    /***\n     * @method getOption(name)\n     * @returns Mixed\n     * @accessor\n     * @short Gets an option used interally by Array.\n     * @extra Options listed below. Current options are for sorting strings with\n     *        `sortBy`.\n     *\n     * @example\n     *\n     *   Sugar.Array.getOption('sortNatural')\n     *\n     * @param {string} name\n     *\n     ***\n     * @method setOption(name, value)\n     * @accessor\n     * @short Sets an option used interally by Array.\n     * @extra Options listed below. Current options are for sorting strings with\n     *        `sortBy`. If `value` is `null`, the default value will be restored.\n     *\n     * @options\n     *\n     *   sortIgnore        A regex to ignore when sorting. An example usage of this\n     *                     option would be to ignore numbers in a list to instead\n     *                     sort by the first text that appears. Default is `null`.\n     *\n     *   sortIgnoreCase    A boolean that ignores case when sorting.\n     *                     Default is `true`.\n     *\n     *   sortNatural       A boolean that turns on natural sorting. \"Natural\" means\n     *                     that numerals like \"10\" will be sorted after \"9\" instead\n     *                     of after \"1\". Default is `true`.\n     *\n     *   sortOrder         A string of characters to use as the base sort order. The\n     *                     default is an order natural to most major world languages.\n     *\n     *   sortEquivalents   A table of equivalent characters used when sorting. The\n     *                     default produces a natural sort order for most world\n     *                     languages, however can be modified for others. For\n     *                     example, setting \"ä\" and \"ö\" to `null` in the table would\n     *                     produce a Scandanavian sort order. Note that setting this\n     *                     option to `null` will restore the default table, but any\n     *                     mutations made to that table will persist.\n     *\n     *   sortCollate       The collation function used when sorting strings. The\n     *                     default function produces a natural sort order that can\n     *                     be customized with the other \"sort\" options. Overriding\n     *                     the function directly here will also override these\n     *                     options.\n     *\n     * @example\n     *\n     *   Sugar.Array.setOption('sortIgnore', /^\\d+\\./)\n     *   Sugar.Array.setOption('sortIgnoreCase', false)\n     *\n     * @signature setOption(options)\n     * @param {ArrayOptions} options\n     * @param {string} name\n     * @param {any} value\n     * @option {RegExp} [sortIgnore]\n     * @option {boolean} [sortIgnoreCase]\n     * @option {boolean} [sortNatural]\n     * @option {string} [sortOrder]\n     * @option {Object} [sortEquivalents]\n     * @option {Function} [sortCollate]\n     *\n     ***/\n    var _arrayOptions = defineOptionsAccessor(sugarArray, ARRAY_OPTIONS);\n  \n  \n    function setArrayChainableConstructor() {\n      setChainableConstructor(sugarArray, arrayCreate);\n    }\n  \n    function isArrayOrInherited(obj) {\n      return obj && obj.constructor && isArray(obj.constructor.prototype);\n    }\n  \n    function arrayCreate(obj, clone) {\n      var arr;\n      if (isArrayOrInherited(obj)) {\n        arr = clone ? arrayClone(obj) : obj;\n      } else if (isObjectType(obj) || isString(obj)) {\n        arr = Array.from(obj);\n      } else if (isDefined(obj)) {\n        arr = [obj];\n      }\n      return arr || [];\n    }\n  \n    function arrayClone(arr) {\n      var clone = new Array(arr.length);\n      forEach(arr, function(el, i) {\n        clone[i] = el;\n      });\n      return clone;\n    }\n  \n    function arrayConcat(arr1, arr2) {\n      if (HAS_CONCAT_BUG) {\n        return arraySafeConcat(arr1, arr2);\n      }\n      return arr1.concat(arr2);\n    }\n  \n    // Avoids issues with [undefined] in < IE9\n    function arrayWrap(obj) {\n      var arr = [];\n      arr.push(obj);\n      return arr;\n    }\n  \n    // Avoids issues with concat in < IE8\n    function arraySafeConcat(arr, arg) {\n      var result = arrayClone(arr), len = result.length, arr2;\n      arr2 = isArray(arg) ? arg : [arg];\n      result.length += arr2.length;\n      forEach(arr2, function(el, i) {\n        result[len + i] = el;\n      });\n      return result;\n    }\n  \n  \n    function arrayAppend(arr, el, index) {\n      var spliceArgs;\n      index = +index;\n      if (isNaN(index)) {\n        index = arr.length;\n      }\n      spliceArgs = [index, 0];\n      if (isDefined(el)) {\n        spliceArgs = spliceArgs.concat(el);\n      }\n      arr.splice.apply(arr, spliceArgs);\n      return arr;\n    }\n  \n    function arrayRemove(arr, f) {\n      var matcher = getMatcher(f), i = 0;\n      while(i < arr.length) {\n        if (matcher(arr[i], i, arr)) {\n          arr.splice(i, 1);\n        } else {\n          i++;\n        }\n      }\n      return arr;\n    }\n  \n    function arrayExclude(arr, f) {\n      var result = [], matcher = getMatcher(f);\n      for (var i = 0; i < arr.length; i++) {\n        if (!matcher(arr[i], i, arr)) {\n          result.push(arr[i]);\n        }\n      }\n      return result;\n    }\n  \n    function arrayUnique(arr, map) {\n      var result = [], obj = {}, refs = [];\n      forEach(arr, function(el, i) {\n        var transformed = map ? mapWithShortcuts(el, map, arr, [el, i, arr]) : el;\n        var key = serializeInternal(transformed, refs);\n        if (!hasOwn(obj, key)) {\n          result.push(el);\n          obj[key] = true;\n        }\n      });\n      return result;\n    }\n  \n    function arrayFlatten(arr, level, current) {\n      var result = [];\n      level = level || Infinity;\n      current = current || 0;\n      forEach(arr, function(el) {\n        if (isArray(el) && current < level) {\n          result = result.concat(arrayFlatten(el, level, current + 1));\n        } else {\n          result.push(el);\n        }\n      });\n      return result;\n    }\n  \n    function arrayCompact(arr, all) {\n      return filter(arr, function(el) {\n        return el || (!all && el != null && el.valueOf() === el.valueOf());\n      });\n    }\n  \n    function arrayShuffle(arr) {\n      arr = arrayClone(arr);\n      var i = arr.length, j, x;\n      while(i) {\n        j = (Math.random() * i) | 0;\n        x = arr[--i];\n        arr[i] = arr[j];\n        arr[j] = x;\n      }\n      return arr;\n    }\n  \n    function arrayGroupBy(arr, map, fn) {\n      var result = {}, key;\n      forEach(arr, function(el, i) {\n        key = mapWithShortcuts(el, map, arr, [el, i, arr]);\n        if (!hasOwn(result, key)) {\n          result[key] = [];\n        }\n        result[key].push(el);\n      });\n      if (fn) {\n        forEachProperty(result, fn);\n      }\n      return result;\n    }\n  \n    function arrayIntersectOrSubtract(arr1, arr2, subtract) {\n      var result = [], obj = {}, refs = [];\n      if (!isArray(arr2)) {\n        arr2 = arrayWrap(arr2);\n      }\n      forEach(arr2, function(el) {\n        obj[serializeInternal(el, refs)] = true;\n      });\n      forEach(arr1, function(el) {\n        var key = serializeInternal(el, refs);\n        if (hasOwn(obj, key) !== subtract) {\n          delete obj[key];\n          result.push(el);\n        }\n      });\n      return result;\n    }\n  \n    // Collation helpers\n  \n    function compareValue(aVal, bVal) {\n      var cmp, i, collate;\n      if (isString(aVal) && isString(bVal)) {\n        collate = _arrayOptions('sortCollate');\n        return collate(aVal, bVal);\n      } else if (isArray(aVal) && isArray(bVal)) {\n        if (aVal.length < bVal.length) {\n          return -1;\n        } else if (aVal.length > bVal.length) {\n          return 1;\n        } else {\n          for(i = 0; i < aVal.length; i++) {\n            cmp = compareValue(aVal[i], bVal[i]);\n            if (cmp !== 0) {\n              return cmp;\n            }\n          }\n          return 0;\n        }\n      }\n      return aVal < bVal ? -1 : aVal > bVal ? 1 : 0;\n    }\n  \n    function codeIsNumeral(code) {\n      return (code >= HALF_WIDTH_ZERO && code <= HALF_WIDTH_NINE) ||\n             (code >= FULL_WIDTH_ZERO && code <= FULL_WIDTH_NINE);\n    }\n  \n    function collateStrings(a, b) {\n      var aValue, bValue, aChar, bChar, aEquiv, bEquiv, index = 0, tiebreaker = 0;\n  \n      var sortOrder       = _arrayOptions('sortOrder');\n      var sortIgnore      = _arrayOptions('sortIgnore');\n      var sortNatural     = _arrayOptions('sortNatural');\n      var sortIgnoreCase  = _arrayOptions('sortIgnoreCase');\n      var sortEquivalents = _arrayOptions('sortEquivalents');\n  \n      a = getCollationReadyString(a, sortIgnore, sortIgnoreCase);\n      b = getCollationReadyString(b, sortIgnore, sortIgnoreCase);\n  \n      do {\n  \n        aChar  = getCollationCharacter(a, index, sortEquivalents);\n        bChar  = getCollationCharacter(b, index, sortEquivalents);\n        aValue = getSortOrderIndex(aChar, sortOrder);\n        bValue = getSortOrderIndex(bChar, sortOrder);\n  \n        if (aValue === -1 || bValue === -1) {\n          aValue = a.charCodeAt(index) || null;\n          bValue = b.charCodeAt(index) || null;\n          if (sortNatural && codeIsNumeral(aValue) && codeIsNumeral(bValue)) {\n            aValue = stringToNumber(a.slice(index));\n            bValue = stringToNumber(b.slice(index));\n          }\n        } else {\n          aEquiv = aChar !== a.charAt(index);\n          bEquiv = bChar !== b.charAt(index);\n          if (aEquiv !== bEquiv && tiebreaker === 0) {\n            tiebreaker = aEquiv - bEquiv;\n          }\n        }\n        index += 1;\n      } while(aValue != null && bValue != null && aValue === bValue);\n      if (aValue === bValue) return tiebreaker;\n      return aValue - bValue;\n    }\n  \n    function getCollationReadyString(str, sortIgnore, sortIgnoreCase) {\n      if (!isString(str)) str = String(str);\n      if (sortIgnoreCase) {\n        str = str.toLowerCase();\n      }\n      if (sortIgnore) {\n        str = str.replace(sortIgnore, '');\n      }\n      return str;\n    }\n  \n    function getCollationCharacter(str, index, sortEquivalents) {\n      var chr = str.charAt(index);\n      return getOwn(sortEquivalents, chr) || chr;\n    }\n  \n    function getSortOrderIndex(chr, sortOrder) {\n      if (!chr) {\n        return null;\n      } else {\n        return sortOrder.indexOf(chr);\n      }\n    }\n  \n    function getSortOrder() {\n      var order = 'AÁÀÂÃĄBCĆČÇDĎÐEÉÈĚÊËĘFGĞHıIÍÌİÎÏJKLŁMNŃŇÑOÓÒÔPQRŘSŚŠŞTŤUÚÙŮÛÜVWXYÝZŹŻŽÞÆŒØÕÅÄÖ';\n      return map(order.split(''), function(str) {\n        return str + str.toLowerCase();\n      }).join('');\n    }\n  \n    function getSortEquivalents() {\n      var equivalents = {};\n      forEach(spaceSplit('AÁÀÂÃÄ CÇ EÉÈÊË IÍÌİÎÏ OÓÒÔÕÖ Sß UÚÙÛÜ'), function(set) {\n        var first = set.charAt(0);\n        forEach(set.slice(1).split(''), function(chr) {\n          equivalents[chr] = first;\n          equivalents[chr.toLowerCase()] = first.toLowerCase();\n        });\n      });\n      return equivalents;\n    }\n  \n    defineStatic(sugarArray, {\n  \n      /***\n       *\n       * @method create([obj], [clone] = false)\n       * @returns Array\n       * @static\n       * @short Creates an array from an unknown object.\n       * @extra This method is similar to native `Array.from` but is faster when\n       *        `obj` is already an array. When [clone] is true, the array will be\n       *        shallow cloned. Additionally, it will not fail on `undefined`,\n       *        `null`, or numbers, producing an empty array in the case of\n       *        `undefined` and wrapping `obj` otherwise.\n       *\n       * @example\n       *\n       *   Array.create()          -> []\n       *   Array.create(8)         -> [8]\n       *   Array.create('abc')     -> ['a','b','c']\n       *   Array.create([1,2,3])   -> [1, 2, 3]\n       *   Array.create(undefined) -> []\n       *\n       * @param {number|ArrayLike<T>} [obj]\n       * @param {boolean} [clone]\n       *\n       ***/\n      'create': function(obj, clone) {\n        return arrayCreate(obj, clone);\n      },\n  \n      /***\n       *\n       * @method construct(n, map)\n       * @returns Array\n       * @static\n       * @short Constructs an array of `n` length from the values of `map`.\n       * @extra This function is essentially a shortcut for using `Array.from` with\n       *        `new Array(n)`.\n       *\n       * @callback indexMapFn\n       *\n       *   i   The index of the current iteration.\n       *\n       * @example\n       *\n       *   Array.construct(4, function(i) {\n       *     return i * i;\n       *   }); -> [0, 1, 4]\n       *\n       * @param {number} n\n       * @param {indexMapFn} map\n       * @callbackParam {number} i\n       * @callbackReturns {any} indexMapFn\n       *\n       ***/\n      'construct': function(n, fn) {\n        n = coercePositiveInteger(n);\n        return Array.from(new Array(n), function(el, i) {\n          return fn && fn(i);\n        });\n      }\n  \n    });\n  \n    defineInstance(sugarArray, {\n  \n      /***\n       * @method isEmpty()\n       * @returns Boolean\n       * @short Returns true if the array has a length of zero.\n       *\n       * @example\n       *\n       *   [].isEmpty()    -> true\n       *   ['a'].isEmpty() -> false\n       *\n       ***/\n      'isEmpty': function(arr) {\n        return arr.length === 0;\n      },\n  \n      /***\n       * @method isEqual(arr)\n       * @returns Boolean\n       * @short Returns true if the array is equal to `arr`.\n       * @extra Objects in the array are considered equal if they are not obserably\n       *        distinguishable. This method is an instance alias for\n       *        `Object.isEqual()`.\n       *\n       * @example\n       *\n       *   ['a','b'].isEqual(['a','b']) -> true\n       *   ['a','b'].isEqual(['a','c']) -> false\n       *   [{a:'a'}].isEqual([{a:'a'}]) -> true\n       *   [5].isEqual([Object(5)])     -> false\n       *\n       * @param {Array} arr\n       *\n       ***/\n      'isEqual': function(a, b) {\n        return isEqual(a, b);\n      },\n  \n      /***\n       * @method clone()\n       * @returns Array\n       * @short Creates a shallow clone of the array.\n       *\n       * @example\n       *\n       *   [1,2,3].clone() -> [1,2,3]\n       *\n       ***/\n      'clone': function(arr) {\n        return arrayClone(arr);\n      },\n  \n      /***\n       * @method at(index, [loop] = false)\n       * @returns ArrayElement\n       * @short Gets the element(s) at `index`.\n       * @extra When [loop] is true, overshooting the end of the array will begin\n       *        counting from the other end. `index` may be negative. If `index` is\n       *        an array, multiple elements will be returned.\n       *\n       * @example\n       *\n       *   [1,2,3].at(0)       -> 1\n       *   [1,2,3].at(2)       -> 3\n       *   [1,2,3].at(4)       -> undefined\n       *   [1,2,3].at(4, true) -> 2\n       *   [1,2,3].at(-1)      -> 3\n       *   [1,2,3].at([0, 1])  -> [1, 2]\n       *\n       * @param {number|number[]} index\n       * @param {boolean} [loop]\n       *\n       ***/\n      'at': function(arr, index, loop) {\n        return getEntriesForIndexes(arr, index, loop);\n      },\n  \n      /***\n       * @method add(item, [index])\n       * @returns Array\n       * @short Adds `item` to the array and returns the result as a new array.\n       * @extra If `item` is also an array, it will be concatenated instead of\n       *        inserted. [index] will control where `item` is added. Use `append`\n       *        to modify the original array.\n       *\n       * @example\n       *\n       *   [1,2,3,4].add(5)       -> [1,2,3,4,5]\n       *   [1,2,3,4].add(8, 1)    -> [1,8,2,3,4]\n       *   [1,2,3,4].add([5,6,7]) -> [1,2,3,4,5,6,7]\n       *\n       * @param {ArrayElement|Array} item\n       * @param {number} [index]\n       *\n       ***/\n      'add': function(arr, item, index) {\n        return arrayAppend(arrayClone(arr), item, index);\n      },\n  \n      /***\n       * @method subtract(item)\n       * @returns Array\n       * @short Subtracts `item` from the array and returns the result as a new array.\n       * @extra If `item` is also an array, all elements in it will be removed. In\n       *        addition to primitives, this method will also deep-check objects for\n       *        equality.\n       *\n       * @example\n       *\n       *   [1,3,5].subtract([5,7,9])     -> [1,3]\n       *   ['a','b'].subtract(['b','c']) -> ['a']\n       *   [1,2,3].subtract(2)           -> [1,3]\n       *\n       * @param {ArrayElement|Array} item\n       *\n       ***/\n      'subtract': function(arr, item) {\n        return arrayIntersectOrSubtract(arr, item, true);\n      },\n  \n      /***\n       * @method append(item, [index])\n       * @returns Array\n       * @short Appends `item` to the array.\n       * @extra If `item` is also an array, it will be concatenated instead of\n       *        inserted. This method modifies the array! Use `add` to create a new\n       *        array. Additionally, `insert` is provided as an alias that reads\n       *        better when using an index.\n       *\n       * @example\n       *\n       *   [1,2,3,4].append(5)       -> [1,2,3,4,5]\n       *   [1,2,3,4].append([5,6,7]) -> [1,2,3,4,5,6,7]\n       *   [1,2,3,4].append(8, 1)    -> [1,8,2,3,4]\n       *\n       * @param {ArrayElement|Array} item\n       * @param {number} index\n       *\n       ***/\n      'append': function(arr, item, index) {\n        return arrayAppend(arr, item, index);\n      },\n  \n      /***\n       * @method removeAt(start, [end])\n       * @returns Array\n       * @short Removes element at `start`. If [end] is specified, removes the range\n       *        between `start` and [end]. This method will modify the array!\n       *\n       * @example\n       *\n       *   ['a','b','c'].removeAt(0) -> ['b','c']\n       *   [1,2,3,4].removeAt(1, 2)  -> [1, 4]\n       *\n       * @param {number} start\n       * @param {number} [end]\n       *\n       ***/\n      'removeAt': function(arr, start, end) {\n        if (isUndefined(start)) return arr;\n        if (isUndefined(end))   end = start;\n        arr.splice(start, end - start + 1);\n        return arr;\n      },\n  \n      /***\n       * @method unique([map])\n       * @returns Array\n       * @short Removes all duplicate elements in the array.\n       * @extra [map] may be a function returning the value to be uniqued or a\n       *        string acting as a shortcut. This is most commonly used when you\n       *        only need to check a single field that can ensure the object's\n       *        uniqueness (such as an `id` field). If [map] is not passed, then\n       *        objects will be deep checked for equality. Supports\n       *        `deep properties`.\n       *\n       * @callback mapFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   arr  A reference to the array.\n       *\n       * @example\n       *\n       *   [1,2,2,3].unique()            -> [1,2,3]\n       *   [{a:'a'},{a:'a'}].unique()    -> [{a:'a'}]\n       *\n       *   users.unique(function(user) {\n       *     return user.id;\n       *   }); -> users array uniqued by id\n       *\n       *   users.unique('id')            -> users array uniqued by id\n       *\n       * @param {string|mapFn} map\n       * @callbackParam {ArrayElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Array} arr\n       * @callbackReturns {NewArrayElement} mapFn\n       *\n       ***/\n      'unique': function(arr, map) {\n        return arrayUnique(arr, map);\n      },\n  \n      /***\n       * @method flatten([limit] = Infinity)\n       * @returns Array\n       * @short Returns a flattened, one-dimensional copy of the array.\n       * @extra You can optionally specify a [limit], which will only flatten to\n       *        that depth.\n       *\n       * @example\n       *\n       *   [[1], 2, [3]].flatten() -> [1,2,3]\n       *   [[1],[],2,3].flatten()  -> [1,2,3]\n       *\n       * @param {number} [limit]\n       *\n       ***/\n      'flatten': function(arr, limit) {\n        return arrayFlatten(arr, limit);\n      },\n  \n      /***\n       * @method first([num] = 1)\n       * @returns Mixed\n       * @short Returns the first element(s) in the array.\n       * @extra When `num` is passed, returns the first `num` elements in the array.\n       *\n       * @example\n       *\n       *   [1,2,3].first()  -> 1\n       *   [1,2,3].first(2) -> [1,2]\n       *\n       * @param {number} [num]\n       *\n       ***/\n      'first': function(arr, num) {\n        if (isUndefined(num)) return arr[0];\n        if (num < 0) num = 0;\n        return arr.slice(0, num);\n      },\n  \n      /***\n       * @method last([num] = 1)\n       * @returns Mixed\n       * @short Returns the last element(s) in the array.\n       * @extra When `num` is passed, returns the last `num` elements in the array.\n       *\n       * @example\n       *\n       *   [1,2,3].last()  -> 3\n       *   [1,2,3].last(2) -> [2,3]\n       *\n       * @param {number} [num]\n       *\n       ***/\n      'last': function(arr, num) {\n        if (isUndefined(num)) return arr[arr.length - 1];\n        var start = arr.length - num < 0 ? 0 : arr.length - num;\n        return arr.slice(start);\n      },\n  \n      /***\n       * @method from(index)\n       * @returns Array\n       * @short Returns a slice of the array from `index`.\n       *\n       * @example\n       *\n       *   ['a','b','c'].from(1) -> ['b','c']\n       *   ['a','b','c'].from(2) -> ['c']\n       *\n       * @param {number} [index]\n       *\n       ***/\n      'from': function(arr, num) {\n        return arr.slice(num);\n      },\n  \n      /***\n       * @method to(index)\n       * @returns Array\n       * @short Returns a slice of the array up to `index`.\n       *\n       * @example\n       *\n       *   ['a','b','c'].to(1) -> ['a']\n       *   ['a','b','c'].to(2) -> ['a','b']\n       *\n       * @param {number} [index]\n       *\n       ***/\n      'to': function(arr, num) {\n        if (isUndefined(num)) num = arr.length;\n        return arr.slice(0, num);\n      },\n  \n      /***\n       * @method compact([all] = false)\n       * @returns Array\n       * @short Removes all instances of `undefined`, `null`, and `NaN` from the array.\n       * @extra If [all] is `true`, all \"falsy\" elements will be removed. This\n       *        includes empty strings, `0`, and `false`.\n       *\n       * @example\n       *\n       *   [1,null,2,undefined,3].compact() -> [1,2,3]\n       *   [1,'',2,false,3].compact()       -> [1,'',2,false,3]\n       *   [1,'',2,false,3].compact(true)   -> [1,2,3]\n       *   [null, [null, 'bye']].compact()  -> ['hi', [null, 'bye']]\n       *\n       * @param {boolean} [all]\n       *\n       ***/\n      'compact': function(arr, all) {\n        return arrayCompact(arr, all);\n      },\n  \n      /***\n       * @method groupBy(map, [fn])\n       * @returns Object\n       * @short Groups the array by `map`.\n       * @extra Will return an object whose keys are the mapped from `map`, which\n       *        may be a mapping function, or a string acting as a shortcut. `map`\n       *        supports `deep properties`. Optionally calls [fn] for each group.\n       *\n       * @callback mapFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   arr  A reference to the array.\n       *\n       * @callback groupFn\n       *\n       *   arr  The current group as an array.\n       *   key  The unique key of the current group.\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   ['a','aa','aaa'].groupBy('length') -> { 1: ['a'], 2: ['aa'], 3: ['aaa'] }\n       *\n       *   users.groupBy(function(n) {\n       *     return n.age;\n       *   }); -> users array grouped by age\n       *\n       *   users.groupBy('age', function(age, users) {\n       *     // iterates each grouping\n       *   });\n       *\n       * @param {string|mapFn} map\n       * @param {groupFn} fn\n       * @callbackParam {ArrayElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Array} arr\n       * @callbackParam {string} key\n       * @callbackParam {Object} obj\n       * @callbackReturns {NewArrayElement} mapFn\n       *\n       ***/\n      'groupBy': function(arr, map, fn) {\n        return arrayGroupBy(arr, map, fn);\n      },\n  \n      /***\n       * @method inGroups(num, [padding])\n       * @returns Array\n       * @short Groups the array into `num` arrays.\n       * @extra If specified, [padding] will be added to the last array to be of\n       *        equal length.\n       *\n       * @example\n       *\n       *   [1,2,3,4,5,6,7].inGroups(3)    -> [[1,2,3],[4,5,6],[7]]\n       *   [1,2,3,4,5,6,7].inGroups(3, 0) -> [[1,2,3],[4,5,6],[7,0,0]]\n       *\n       * @param {number} num\n       * @param {any} [padding]\n       *\n       ***/\n      'inGroups': function(arr, num, padding) {\n        var pad = isDefined(padding);\n        var result = new Array(num);\n        var divisor = ceil(arr.length / num);\n        simpleRepeat(num, function(i) {\n          var index = i * divisor;\n          var group = arr.slice(index, index + divisor);\n          if (pad && group.length < divisor) {\n            simpleRepeat(divisor - group.length, function() {\n              group.push(padding);\n            });\n          }\n          result[i] = group;\n        });\n        return result;\n      },\n  \n      /***\n       * @method inGroupsOf(num, [padding] = null)\n       * @returns Array\n       * @short Groups the array into arrays of `num` elements each.\n       * @extra [padding] will be added to the last array to be of equal length.\n       *\n       * @example\n       *\n       *   [1,2,3,4,5,6,7].inGroupsOf(4)    -> [ [1,2,3,4], [5,6,7] ]\n       *   [1,2,3,4,5,6,7].inGroupsOf(4, 0) -> [ [1,2,3,4], [5,6,7,0] ]\n       *\n       * @param {number} num\n       * @param {any} [padding]\n       *\n       ***/\n      'inGroupsOf': function(arr, num, padding) {\n        var result = [], len = arr.length, group;\n        if (len === 0 || num === 0) return arr;\n        if (isUndefined(num)) num = 1;\n        if (isUndefined(padding)) padding = null;\n        simpleRepeat(ceil(len / num), function(i) {\n          group = arr.slice(num * i, num * i + num);\n          while(group.length < num) {\n            group.push(padding);\n          }\n          result.push(group);\n        });\n        return result;\n      },\n  \n      /***\n       * @method shuffle()\n       * @returns Array\n       * @short Returns a copy of the array with the elements randomized.\n       * @extra Uses Fisher-Yates algorithm.\n       *\n       * @example\n       *\n       *   [1,2,3,4].shuffle()  -> [?,?,?,?]\n       *\n       ***/\n      'shuffle': function(arr) {\n        return arrayShuffle(arr);\n      },\n  \n      /***\n       * @method sample([num] = 1, [remove] = false)\n       * @returns Mixed\n       * @short Returns a random element from the array.\n       * @extra If [num] is passed, will return an array of [num] elements. If\n       *        [remove] is true, sampled elements will also be removed from the\n       *        array. [remove] can also be passed in place of [num].\n       *\n       * @example\n       *\n       *   [1,2,3,4,5].sample()  -> // Random element\n       *   [1,2,3,4,5].sample(1) -> // Array of 1 random element\n       *   [1,2,3,4,5].sample(3) -> // Array of 3 random elements\n       *\n       * @param {number} [num]\n       * @param {boolean} [remove]\n       *\n       ***/\n      'sample': function(arr, arg1, arg2) {\n        var result = [], num, remove, single;\n        if (isBoolean(arg1)) {\n          remove = arg1;\n        } else {\n          num = arg1;\n          remove = arg2;\n        }\n        if (isUndefined(num)) {\n          num = 1;\n          single = true;\n        }\n        if (!remove) {\n          arr = arrayClone(arr);\n        }\n        num = min(num, arr.length);\n        for (var i = 0, index; i < num; i++) {\n          index = trunc(Math.random() * arr.length);\n          result.push(arr[index]);\n          arr.splice(index, 1);\n        }\n        return single ? result[0] : result;\n      },\n  \n      /***\n       * @method sortBy([map], [desc] = false)\n       * @returns Array\n       * @short Enhanced sorting function that will sort the array by `map`.\n       * @extra `map` may be a function, a string acting as a shortcut, an array\n       *        (comparison by multiple values), or blank (direct comparison of\n       *        array values). `map` supports `deep properties`. [desc] will sort\n       *        the array in descending order. When the field being sorted on is\n       *        a string, the resulting order will be determined by an internal\n       *        collation algorithm that is optimized for major Western languages,\n       *        but can be customized using sorting accessors such as `sortIgnore`.\n       *        This method will modify the array!\n       *\n       * @callback sortMapFn\n       *\n       *   el   An array element.\n       *\n       * @example\n       *\n       *   ['world','a','new'].sortBy('length')       -> ['a','new','world']\n       *   ['world','a','new'].sortBy('length', true) -> ['world','new','a']\n       *   users.sortBy(function(n) {\n       *     return n.age;\n       *   }); -> users array sorted by age\n       *   users.sortBy('age') -> users array sorted by age\n       *\n       * @param {string|sortMapFn} [map]\n       * @param {boolean} [desc]\n       * @callbackParam {ArrayElement} el\n       * @callbackReturns {NewArrayElement} sortMapFn\n       *\n       ***/\n      'sortBy': function(arr, map, desc) {\n        arr.sort(function(a, b) {\n          var aProperty = mapWithShortcuts(a, map, arr, [a]);\n          var bProperty = mapWithShortcuts(b, map, arr, [b]);\n          return compareValue(aProperty, bProperty) * (desc ? -1 : 1);\n        });\n        return arr;\n      },\n  \n      /***\n       * @method remove(search)\n       * @returns Array\n       * @short Removes any element in the array that matches `search`.\n       * @extra This method will modify the array! Use `exclude` for a\n       *        non-destructive alias. This method implements `enhanced matching`.\n       *\n       * @callback searchFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   arr  A reference to the array.\n       *\n       * @example\n       *\n       *   [1,2,3].remove(3)         -> [1,2]\n       *   ['a','b','c'].remove(/b/) -> ['a','c']\n       *   [{a:1},{b:2}].remove(function(n) {\n       *     return n['a'] == 1;\n       *   }); -> [{b:2}]\n       *\n       * @param {ArrayElement|searchFn} search\n       * @callbackParam {ArrayElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Array} arr\n       * @callbackReturns {boolean} searchFn\n       *\n       ***/\n      'remove': function(arr, f) {\n        return arrayRemove(arr, f);\n      },\n  \n      /***\n       * @method exclude(search)\n       * @returns Array\n       * @short Returns a new array with every element that does not match `search`.\n       * @extra This method can be thought of as the inverse of `Array#filter`. It\n       *        will not modify the original array, Use `remove` to modify the\n       *        array in place. Implements `enhanced matching`.\n       *\n       * @callback searchFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   arr  A reference to the array.\n       *\n       * @example\n       *\n       *   [1,2,3].exclude(3)         -> [1,2]\n       *   ['a','b','c'].exclude(/b/) -> ['a','c']\n       *   [{a:1},{b:2}].exclude(function(n) {\n       *     return n['a'] == 1;\n       *   }); -> [{b:2}]\n       *\n       * @param {ArrayElement|searchFn} search\n       * @callbackParam {ArrayElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Array} arr\n       * @callbackReturns {boolean} searchFn\n       *\n       ***/\n      'exclude': function(arr, f) {\n        return arrayExclude(arr, f);\n      },\n  \n      /***\n       * @method union(arr)\n       * @returns Array\n       * @short Returns a new array containing elements in both arrays with\n       *        duplicates removed.\n       * @extra In addition to primitives, this method will also deep-check objects\n       *        for equality.\n       *\n       * @example\n       *\n       *   [1,3,5].union([5,7,9])     -> [1,3,5,7,9]\n       *   ['a','b'].union(['b','c']) -> ['a','b','c']\n       *\n       * @param {Array} arr\n       *\n       ***/\n      'union': function(arr1, arr2) {\n        return arrayUnique(arrayConcat(arr1, arr2));\n      },\n  \n      /***\n       * @method intersect(arr)\n       * @returns Array\n       * @short Returns a new array containing any elements that both arrays have in\n       *        common.\n       * @extra In addition to primitives, this method will also deep-check objects\n       *        for equality.\n       *\n       * @example\n       *\n       *   [1,3,5].intersect([5,7,9])     -> [5]\n       *   ['a','b'].intersect(['b','c']) -> ['b']\n       *\n       * @param {Array} arr\n       *\n       ***/\n      'intersect': function(arr1, arr2) {\n        return arrayIntersectOrSubtract(arr1, arr2, false);\n      }\n  \n    });\n  \n    defineInstanceWithArguments(sugarArray, {\n  \n      /***\n       * @method zip([arr1], [arr2], ...)\n       * @returns Array\n       * @short Merges multiple arrays together.\n       * @extra This method \"zips up\" smaller arrays into one large whose elements\n       *        are \"all elements at index 0\", \"all elements at index 1\", etc.\n       *        Useful when you have associated data that is split over separated\n       *        arrays. If the arrays passed have more elements than the original\n       *        array, they will be discarded. If they have fewer elements, the\n       *        missing elements will filled with `null`.\n       *\n       * @example\n       *\n       *   [1,2,3].zip([4,5,6]) -> [[1,2], [3,4], [5,6]]\n       *\n       * @param {Array} arr1\n       * @param {Array} arr2\n       *\n       ***/\n      'zip': function(arr, args) {\n        return map(arr, function(el, i) {\n          return [el].concat(map(args, function(k) {\n            return (i in k) ? k[i] : null;\n          }));\n        });\n      }\n  \n    });\n  \n    /***\n     * @method insert(item, [index])\n     * @returns Array\n     * @short Appends `item` to the array at [index].\n     * @extra This method is simply a more readable alias for `append` when passing\n     *        an index. If `el` is an array it will be joined. This method modifies\n     *        the array! Use `add` as a non-destructive alias.\n     *\n     * @example\n     *\n     *   [1,3,4,5].insert(2, 1)     -> [1,2,3,4,5]\n     *   [1,4,5,6].insert([2,3], 1) -> [1,2,3,4,5,6]\n     *\n     * @param {ArrayElement|Array} item\n     * @param {number} [index]\n     *\n     ***/\n    alias(sugarArray, 'insert', 'append');\n  \n    setArrayChainableConstructor();\n  \n    /***\n     * @module Object\n     * @description Object creation, manipulation, comparison, type checking, and more.\n     *\n     * Much thanks to kangax for his informative aricle about how problems with\n     * instanceof and constructor: http://bit.ly/1Qds27W\n     *\n     ***/\n  \n    // Matches bracket-style query strings like user[name]\n    var DEEP_QUERY_STRING_REG = /^(.+?)(\\[.*\\])$/;\n  \n    // Matches any character not allowed in a decimal number.\n    var NON_DECIMAL_REG = /[^\\d.-]/;\n  \n    // Native methods for merging by descriptor when available.\n    var getOwnPropertyNames      = Object.getOwnPropertyNames;\n    var getOwnPropertySymbols    = Object.getOwnPropertySymbols;\n    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n  \n    // Basic Helpers\n  \n    function isArguments(obj, className) {\n      className = className || classToString(obj);\n      // .callee exists on Arguments objects in < IE8\n      return hasProperty(obj, 'length') && (className === '[object Arguments]' || !!obj.callee);\n    }\n  \n    // Query Strings | Creating\n  \n    function toQueryStringWithOptions(obj, opts) {\n      opts = opts || {};\n      if (isUndefined(opts.separator)) {\n        opts.separator = '_';\n      }\n      return toQueryString(obj, opts.deep, opts.transform, opts.prefix || '', opts.separator);\n    }\n  \n    function toQueryString(obj, deep, transform, prefix, separator) {\n      if (isArray(obj)) {\n        return collectArrayAsQueryString(obj, deep, transform, prefix, separator);\n      } else if (isObjectType(obj) && obj.toString === internalToString) {\n        return collectObjectAsQueryString(obj, deep, transform, prefix, separator);\n      } else if (prefix) {\n        return getURIComponentValue(obj, prefix, transform);\n      }\n      return '';\n    }\n  \n    function collectArrayAsQueryString(arr, deep, transform, prefix, separator) {\n      var el, qc, key, result = [];\n      // Intentionally treating sparse arrays as dense here by avoiding map,\n      // otherwise indexes will shift during the process of serialization.\n      for (var i = 0, len = arr.length; i < len; i++) {\n        el = arr[i];\n        key = prefix + (prefix && deep ? '[]' : '');\n        if (!key && !isObjectType(el)) {\n          // If there is no key, then the values of the array should be\n          // considered as null keys, so use them instead;\n          qc = sanitizeURIComponent(el);\n        } else {\n          qc = toQueryString(el, deep, transform, key, separator);\n        }\n        result.push(qc);\n      }\n      return result.join('&');\n    }\n  \n    function collectObjectAsQueryString(obj, deep, transform, prefix, separator) {\n      var result = [];\n      forEachProperty(obj, function(val, key) {\n        var fullKey;\n        if (prefix && deep) {\n          fullKey = prefix + '[' + key + ']';\n        } else if (prefix) {\n          fullKey = prefix + separator + key;\n        } else {\n          fullKey = key;\n        }\n        result.push(toQueryString(val, deep, transform, fullKey, separator));\n      });\n      return result.join('&');\n    }\n  \n    function getURIComponentValue(obj, prefix, transform) {\n      var value;\n      if (transform) {\n        value = transform(obj, prefix);\n      } else if (isDate(obj)) {\n        value = obj.getTime();\n      } else {\n        value = obj;\n      }\n      return sanitizeURIComponent(prefix) + '=' + sanitizeURIComponent(value);\n    }\n  \n    function sanitizeURIComponent(obj) {\n      // undefined, null, and NaN are represented as a blank string,\n      // while false and 0 are stringified.\n      return !obj && obj !== false && obj !== 0 ? '' : encodeURIComponent(obj);\n    }\n  \n  \n    // Query Strings | Parsing\n  \n    function fromQueryStringWithOptions(obj, opts) {\n      var str = String(obj || '').replace(/^.*?\\?/, ''), result = {}, auto;\n      opts = opts || {};\n      if (str) {\n        forEach(str.split('&'), function(p) {\n          var split = p.split('=');\n          var key = decodeURIComponent(split[0]);\n          var val = split.length === 2 ? decodeURIComponent(split[1]) : '';\n          auto = opts.auto !== false;\n          parseQueryComponent(result, key, val, opts.deep, auto, opts.separator, opts.transform);\n        });\n      }\n      return result;\n    }\n  \n    function parseQueryComponent(obj, key, val, deep, auto, separator, transform) {\n      var match;\n      if (separator) {\n        key = mapQuerySeparatorToKeys(key, separator);\n        deep = true;\n      }\n      if (deep === true && (match = key.match(DEEP_QUERY_STRING_REG))) {\n        parseDeepQueryComponent(obj, match, val, deep, auto, separator, transform);\n      } else {\n        setQueryProperty(obj, key, val, auto, transform);\n      }\n    }\n  \n    function parseDeepQueryComponent(obj, match, val, deep, auto, separator, transform) {\n      var key = match[1];\n      var inner = match[2].slice(1, -1).split('][');\n      forEach(inner, function(k) {\n        if (!hasOwn(obj, key)) {\n          obj[key] = k ? {} : [];\n        }\n        obj = getOwn(obj, key);\n        key = k ? k : obj.length.toString();\n      });\n      setQueryProperty(obj, key, val, auto, transform);\n    }\n  \n    function mapQuerySeparatorToKeys(key, separator) {\n      var split = key.split(separator), result = split[0];\n      for (var i = 1, len = split.length; i < len; i++) {\n        result += '[' + split[i] + ']';\n      }\n      return result;\n    }\n  \n    function setQueryProperty(obj, key, val, auto, transform) {\n      var fnValue;\n      if (transform) {\n        fnValue = transform(val, key, obj);\n      }\n      if (isDefined(fnValue)) {\n        val = fnValue;\n      } else if (auto) {\n        val = getQueryValueAuto(obj, key, val);\n      }\n      obj[key] = val;\n    }\n  \n    function getQueryValueAuto(obj, key, val) {\n      if (!val) {\n        return null;\n      } else if (val === 'true') {\n        return true;\n      } else if (val === 'false') {\n        return false;\n      }\n      var num = +val;\n      if (!isNaN(num) && stringIsDecimal(val)) {\n        return num;\n      }\n      var existing = getOwn(obj, key);\n      if (val && existing) {\n        return isArray(existing) ? existing.concat(val) : [existing, val];\n      }\n      return val;\n    }\n  \n    function stringIsDecimal(str) {\n      return str !== '' && !NON_DECIMAL_REG.test(str);\n    }\n  \n  \n    // Object Merging\n  \n    function mergeWithOptions(target, source, opts) {\n      opts = opts || {};\n      return objectMerge(target, source, opts.deep, opts.resolve, opts.hidden, opts.descriptor);\n    }\n  \n    function defaults(target, sources, opts) {\n      opts = opts || {};\n      opts.resolve = opts.resolve || false;\n      return mergeAll(target, sources, opts);\n    }\n  \n    function mergeAll(target, sources, opts) {\n      if (!isArray(sources)) {\n        sources = [sources];\n      }\n      forEach(sources, function(source) {\n        return mergeWithOptions(target, source, opts);\n      });\n      return target;\n    }\n  \n    function iterateOverProperties(hidden, obj, fn) {\n      if (getOwnPropertyNames && hidden) {\n        iterateOverKeys(getOwnPropertyNames, obj, fn, hidden);\n      } else {\n        forEachProperty(obj, fn);\n      }\n      if (getOwnPropertySymbols) {\n        iterateOverKeys(getOwnPropertySymbols, obj, fn, hidden);\n      }\n    }\n  \n    // \"keys\" may include symbols\n    function iterateOverKeys(getFn, obj, fn, hidden) {\n      var keys = getFn(obj), desc;\n      for (var i = 0, key; key = keys[i]; i++) {\n        desc = getOwnPropertyDescriptor(obj, key);\n        if (desc.enumerable || hidden) {\n          fn(obj[key], key);\n        }\n      }\n    }\n  \n    function mergeByPropertyDescriptor(target, source, prop, sourceVal) {\n      var descriptor = getOwnPropertyDescriptor(source, prop);\n      if (isDefined(descriptor.value)) {\n        descriptor.value = sourceVal;\n      }\n      defineProperty(target, prop, descriptor);\n    }\n  \n    function objectMerge(target, source, deep, resolve, hidden, descriptor) {\n      var resolveByFunction = isFunction(resolve), resolveConflicts = resolve !== false;\n  \n      if (isUndefined(target)) {\n        target = getNewObjectForMerge(source);\n      } else if (resolveConflicts && isDate(target) && isDate(source)) {\n        // A date's timestamp is a property that can only be reached through its\n        // methods, so actively set it up front if both are dates.\n        target.setTime(source.getTime());\n      }\n  \n      if (isPrimitive(target)) {\n        // Will not merge into a primitive type, so simply override.\n        return source;\n      }\n  \n      // If the source object is a primitive\n      // type then coerce it into an object.\n      if (isPrimitive(source)) {\n        source = coercePrimitiveToObject(source);\n      }\n  \n      iterateOverProperties(hidden, source, function(val, key) {\n        var sourceVal, targetVal, resolved, goDeep, result;\n  \n        sourceVal = source[key];\n  \n        // We are iterating over properties of the source, so hasOwnProperty on\n        // it is guaranteed to always be true. However, the target may happen to\n        // have properties in its prototype chain that should not be considered\n        // as conflicts.\n        targetVal = getOwn(target, key);\n  \n        if (resolveByFunction) {\n          result = resolve(key, targetVal, sourceVal, target, source);\n          if (isUndefined(result)) {\n            // Result is undefined so do not merge this property.\n            return;\n          } else if (isDefined(result) && result !== Sugar) {\n            // If the source returns anything except undefined, then the conflict\n            // has been resolved, so don't continue traversing into the object. If\n            // the returned value is the Sugar global object, then allowing Sugar\n            // to resolve the conflict, so continue on.\n            sourceVal = result;\n            resolved = true;\n          }\n        } else if (isUndefined(sourceVal)) {\n          // Will not merge undefined.\n          return;\n        }\n  \n        // Regex properties are read-only, so intentionally disallowing deep\n        // merging for now. Instead merge by reference even if deep.\n        goDeep = !resolved && deep && isObjectType(sourceVal) && !isRegExp(sourceVal);\n  \n        if (!goDeep && !resolveConflicts && isDefined(targetVal)) {\n          return;\n        }\n  \n        if (goDeep) {\n          sourceVal = objectMerge(targetVal, sourceVal, deep, resolve, hidden, descriptor);\n        }\n  \n        // getOwnPropertyNames is standing in as\n        // a test for property descriptor support\n        if (getOwnPropertyNames && descriptor) {\n          mergeByPropertyDescriptor(target, source, key, sourceVal);\n        } else {\n          target[key] = sourceVal;\n        }\n  \n      });\n      return target;\n    }\n  \n    function getNewObjectForMerge(source) {\n      var klass = classToString(source);\n      // Primitive types, dates, and regexes have no \"empty\" state. If they exist\n      // at all, then they have an associated value. As we are only creating new\n      // objects when they don't exist in the target, these values can come alone\n      // for the ride when created.\n      if (isArray(source, klass)) {\n        return [];\n      } else if (isPlainObject(source, klass)) {\n        return {};\n      } else if (isDate(source, klass)) {\n        return new Date(source.getTime());\n      } else if (isRegExp(source, klass)) {\n        return RegExp(source.source, getRegExpFlags(source));\n      } else if (isPrimitive(source && source.valueOf())) {\n        return source;\n      }\n      // If the object is not of a known type, then simply merging its\n      // properties into a plain object will result in something different\n      // (it will not respond to instanceof operator etc). Similarly we don't\n      // want to call a constructor here as we can't know for sure what the\n      // original constructor was called with (Events etc), so throw an\n      // error here instead. Non-standard types can be handled if either they\n      // already exist and simply have their properties merged, if the merge\n      // is not deep so their references will simply be copied over, or if a\n      // resolve function is used to assist the merge.\n      throw new TypeError('Must be a basic data type');\n    }\n  \n    function clone(source, deep) {\n      var target = getNewObjectForMerge(source);\n      return objectMerge(target, source, deep, true, true, true);\n    }\n  \n  \n    // Keys/Values\n  \n    function objectSize(obj) {\n      return getKeysWithObjectCoercion(obj).length;\n    }\n  \n    function getKeysWithObjectCoercion(obj) {\n      return getKeys(coercePrimitiveToObject(obj));\n    }\n  \n    function getValues(obj) {\n      var values = [];\n      forEachProperty(obj, function(val) {\n        values.push(val);\n      });\n      return values;\n    }\n  \n    function tap(obj, arg) {\n      var fn = arg;\n      if (!isFunction(arg)) {\n        fn = function() {\n          if (arg) obj[arg]();\n        };\n      }\n      fn.call(obj, obj);\n      return obj;\n    }\n  \n    // Select/Reject\n  \n    function objectSelect(obj, f) {\n      return selectFromObject(obj, f, true);\n    }\n  \n    function objectReject(obj, f) {\n      return selectFromObject(obj, f, false);\n    }\n  \n    function selectFromObject(obj, f, select) {\n      var match, result = {};\n      f = [].concat(f);\n      forEachProperty(obj, function(val, key) {\n        match = false;\n        for (var i = 0; i < f.length; i++) {\n          if (matchInObject(f[i], key)) {\n            match = true;\n          }\n        }\n        if (match === select) {\n          result[key] = val;\n        }\n      });\n      return result;\n    }\n  \n    function matchInObject(match, key) {\n      if (isRegExp(match)) {\n        return match.test(key);\n      } else if (isObjectType(match)) {\n        return key in match;\n      } else {\n        return key === String(match);\n      }\n    }\n  \n    // Remove/Exclude\n  \n    function objectRemove(obj, f) {\n      var matcher = getMatcher(f);\n      forEachProperty(obj, function(val, key) {\n        if (matcher(val, key, obj)) {\n          delete obj[key];\n        }\n      });\n      return obj;\n    }\n  \n    function objectExclude(obj, f) {\n      var result = {};\n      var matcher = getMatcher(f);\n      forEachProperty(obj, function(val, key) {\n        if (!matcher(val, key, obj)) {\n          result[key] = val;\n        }\n      });\n      return result;\n    }\n  \n    function objectIntersectOrSubtract(obj1, obj2, subtract) {\n      if (!isObjectType(obj1)) {\n        return subtract ? obj1 : {};\n      }\n      obj2 = coercePrimitiveToObject(obj2);\n      function resolve(key, val, val1) {\n        var exists = key in obj2 && isEqual(val1, obj2[key]);\n        if (exists !== subtract) {\n          return val1;\n        }\n      }\n      return objectMerge({}, obj1, false, resolve);\n    }\n  \n    /***\n     * @method is[Type]()\n     * @returns Boolean\n     * @short Returns true if the object is an object of that type.\n     *\n     * @set\n     *   isArray\n     *   isBoolean\n     *   isDate\n     *   isError\n     *   isFunction\n     *   isMap\n     *   isNumber\n     *   isRegExp\n     *   isSet\n     *   isString\n     *\n     * @example\n     *\n     *   Object.isArray([3]) -> true\n     *   Object.isNumber(3)  -> true\n     *   Object.isString(8)  -> false\n     *\n     ***/\n    function buildClassCheckMethods() {\n      var checks = [isBoolean, isNumber, isString, isDate, isRegExp, isFunction, isArray, isError, isSet, isMap];\n      defineInstanceAndStaticSimilar(sugarObject, NATIVE_TYPES, function(methods, name, i) {\n        methods['is' + name] = checks[i];\n      });\n    }\n  \n    defineStatic(sugarObject, {\n  \n      /***\n       * @method fromQueryString(str, [options])\n       * @returns Object\n       * @static\n       * @short Converts the query string of a URL into an object.\n       * @extra Options can be passed with [options] for more control over the result.\n       *\n       * @options\n       *\n       *   deep        If the string contains \"deep\" syntax `foo[]`, this will\n       *               be automatically converted to an array. (Default `false`)\n       *\n       *   auto        If `true`, booleans `\"true\"` and `\"false\"`, numbers, and arrays\n       *               (repeated keys) will be automatically cast to native\n       *               values. (Default `true`)\n       *\n       *   transform   A function whose return value becomes the final value. If\n       *               the function returns `undefined`, then the original value\n       *               will be used. This allows the function to intercept only\n       *               certain keys or values. (Default `undefined`)\n       *\n       *   separator   If passed, keys will be split on this string to extract\n       *               deep values. (Default `''`)\n       *\n       * @callback queryStringTransformFn\n       *\n       *   key   The key component of the query string (before `=`).\n       *   val   The value component of the query string (after `=`).\n       *   obj   A reference to the object being built.\n       *\n       * @example\n       *\n       *   Object.fromQueryString('a=1&b=2')                 -> {a:1,b:2}\n       *   Object.fromQueryString('a[]=1&a[]=2',{deep:true}) -> {a:['1','2']}\n       *   Object.fromQueryString('a_b=c',{separator:'_'})   -> {a:{b:'c'}}\n       *   Object.fromQueryString('id=123', {transform:idToNumber});\n       *\n       * @param {string} str\n       * @param {QueryStringParseOptions} options\n       * @callbackParam {string} key\n       * @callbackParam {Property} val\n       * @callbackParam {Object} obj\n       * @callbackReturns {NewProperty} queryStringTransformFn\n       * @option {boolean} [deep]\n       * @option {boolean} [auto]\n       * @option {string} [separator]\n       * @option {queryStringTransformFn} [transform]\n       *\n       ***/\n      'fromQueryString': function(obj, options) {\n        return fromQueryStringWithOptions(obj, options);\n      }\n  \n    });\n  \n    defineInstanceAndStatic(sugarObject, {\n  \n      /***\n       * @method has(key, [inherited] = false)\n       * @returns Boolean\n       * @short Checks if the object has property `key`.\n       * @extra Supports `deep properties`. If [inherited] is `true`,\n       *        properties defined in the prototype chain will also return `true`.\n       *        The default of `false` for this argument makes this method suited\n       *        to working with objects as data stores by default.\n       *\n       * @example\n       *\n       *   Object.has(usersByName, 'Harry')     -> true\n       *   Object.has(data, 'users[1].profile') -> true\n       *   Object.has([], 'forEach')            -> false\n       *   Object.has([], 'forEach', true)      -> true\n       *\n       * @param {string} key\n       * @param {boolean} [inherited]\n       *\n       ***/\n      'has': function(obj, key, any) {\n        return deepHasProperty(obj, key, any);\n      },\n  \n      /***\n       * @method get(key, [inherited] = false)\n       * @returns Mixed\n       * @short Gets a property of the object.\n       * @extra Supports `deep properties`. If [inherited] is `true`,\n       *        properties defined in the prototype chain will also be returned.\n       *        The default of `false` for this argument makes this method suited\n       *        to working with objects as data stores by default.\n       *\n       * @example\n       *\n       *   Object.get(Harry, 'name');           -> 'Harry'\n       *   Object.get(Harry, 'profile.likes');  -> Harry's likes\n       *   Object.get(data, 'users[3].name')    -> User 3's name\n       *   Object.get(data, 'users[1..2]')      -> Users 1 and 2\n       *   Object.get(data, 'users[1..2].name') -> Names of users 1 and 2\n       *   Object.get(data, 'users[-2..-1]')    -> Last 2 users\n       *\n       * @param {string} key\n       * @param {boolean} [inherited]\n       *\n       ***/\n      'get': function(obj, key, any) {\n        return deepGetProperty(obj, key, any);\n      },\n  \n      /***\n       * @method set(key, val)\n       * @returns Object\n       * @short Sets a property on the object.\n       * @extra Using a dot or square bracket in `key` is considered \"deep\" syntax,\n       *        and will attempt to traverse into the object to set the property,\n       *        creating properties that do not exist along the way. If the missing\n       *        property is referenced using square brackets, an empty array will be\n       *        created, otherwise an empty object. A special `[]` carries the\n       *        meaning of \"the last index + 1\", and will effectively push `val`\n       *        onto the end of the array. Lastly, a `..` separator inside the\n       *        brackets is \"range\" notation, and will set properties on all\n       *        elements in the specified range. Range members may be negative,\n       *        which will be offset from the end of the array.\n       *\n       * @example\n       *\n       *   Object.set({}, 'name', 'Harry');         -> {name:'Harry'}\n       *   Object.set({}, 'user.name', 'Harry');    -> {user:{name:'Harry'}}\n       *   Object.set({}, 'users[].name', 'Bob')    -> {users:[{name:'Bob'}}\n       *   Object.set({}, 'users[1].name','Bob')    -> {users:[undefined, {name:'Bob'}]}\n       *   Object.set({}, 'users[0..1].name','Bob') -> {users:[{name:'Bob'},{name:'Bob'}]}\n       *\n       * @param {string} key\n       * @param {Property} val\n       *\n       ***/\n      'set': function(obj, key, val) {\n        return deepSetProperty(obj, key, val);\n      },\n  \n      /***\n       * @method size()\n       * @returns Number\n       * @short Returns the number of properties in the object.\n       *\n       * @example\n       *\n       *   Object.size({foo:'bar'}) -> 1\n       *\n       ***/\n      'size': function(obj) {\n        return objectSize(obj);\n      },\n  \n      /***\n       * @method isEmpty()\n       * @returns Boolean\n       * @short Returns true if the number of properties in the object is zero.\n       *\n       * @example\n       *\n       *   Object.isEmpty({})    -> true\n       *   Object.isEmpty({a:1}) -> false\n       *\n       ***/\n      'isEmpty': function(obj) {\n        return objectSize(obj) === 0;\n      },\n  \n      /***\n       * @method toQueryString([options])\n       * @returns Object\n       * @short Converts the object into a query string.\n       * @extra Accepts deep objects and arrays. [options] can be passed for more\n       *        control over the result.\n       *\n       * @options\n       *\n       *   deep        If `true`, non-standard \"deep\" syntax `foo[]` will be\n       *               used for output. Note that `separator` will be ignored,\n       *               as this option overrides shallow syntax. (Default `false`)\n       *\n       *   prefix      If passed, this string will be prefixed to all keys,\n       *               separated by the `separator`. (Default `''`).\n       *\n       *   transform   A function whose return value becomes the final value\n       *               in the string. (Default `undefined`)\n       *\n       *   separator   A string that is used to separate keys, either for deep\n       *               objects, or when `prefix` is passed.(Default `_`).\n       *\n       * @callback queryStringTransformFn\n       *\n       *   key  The key of the current iteration.\n       *   val  The value of the current iteration.\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   Object.toQueryString({foo:'bar'})                  -> 'foo=bar'\n       *   Object.toQueryString({foo:['a','b']})              -> 'foo=a&foo=b'\n       *   Object.toQueryString({foo:['a','b']}, {deep:true}) -> 'foo[]=a&foo[]=b'\n       *\n       * @param {Object} obj\n       * @param {QueryStringOptions} [options]\n       * @callbackParam {string} key\n       * @callbackParam {Property} val\n       * @callbackParam {Object} obj\n       * @callbackReturns {NewProperty} queryStringTransformFn\n       * @option {boolean} [deep]\n       * @option {string} [prefix]\n       * @option {string} [separator]\n       * @option {queryStringTransformFn} [transform]\n       *\n       ***/\n      'toQueryString': function(obj, options) {\n        return toQueryStringWithOptions(obj, options);\n      },\n  \n      /***\n       * @method isEqual(obj)\n       * @returns Boolean\n       * @short Returns true if `obj` is equivalent to the object.\n       * @extra If both objects are built-in types, they will be considered\n       *        equivalent if they are not \"observably distinguishable\". This means\n       *        that primitives and object types, `0` and `-0`, and sparse and\n       *        dense arrays are all not equal. Functions and non-built-ins like\n       *        instances of user-defined classes and host objects like Element and\n       *        Event are strictly compared `===`, and will only be equal if they\n       *        are the same reference. Plain objects as well as Arrays will be\n       *        traversed into and deeply checked by their non-inherited, enumerable\n       *        properties. Other allowed types include Typed Arrays, Sets, Maps,\n       *        Arguments, Dates, Regexes, and Errors.\n       *\n       * @example\n       *\n       *   Object.isEqual({a:2}, {a:2})         -> true\n       *   Object.isEqual({a:2}, {a:3})         -> false\n       *   Object.isEqual(5, Object(5))         -> false\n       *   Object.isEqual(Object(5), Object(5)) -> true\n       *   Object.isEqual(NaN, NaN)             -> false\n       *\n       * @param {Object} obj\n       *\n       ***/\n      'isEqual': function(obj1, obj2) {\n        return isEqual(obj1, obj2);\n      },\n  \n      /***\n       * @method merge(source, [options])\n       * @returns Object\n       * @short Merges properties from `source` into the object.\n       * @extra This method will modify the object! Use `add` for a non-destructive\n       *        alias.\n       *\n       * @options\n       *\n       *   deep         If `true` deep properties are merged recursively.\n       *                (Default `false`)\n       *\n       *   hidden       If `true`, non-enumerable properties will be merged as well.\n       *                (Default `false`)\n       *\n       *   descriptor   If `true`, properties will be merged by property descriptor.\n       *                Use this option to merge getters or setters, or to preserve\n       *                `enumerable`, `configurable`, etc.\n       *                (Default `false`)\n       *\n       *   resolve      Determines which property wins in the case of conflicts.\n       *                If `true`, `source` wins. If `false`, the original property wins.\n       *                If a function is passed, its return value will decide the result.\n       *                Any non-undefined return value will resolve the conflict\n       *                for that property (will not continue if `deep`). Returning\n       *                `undefined` will do nothing (no merge). Finally, returning\n       *                the global object `Sugar` will allow Sugar to handle the\n       *                merge as normal. (Default `true`)\n       *\n       * @callback resolveFn\n       *\n       *   key        The key of the current iteration.\n       *   targetVal  The current value for the key in the target.\n       *   sourceVal  The current value for the key in `source`.\n       *   target     The target object.\n       *   source     The source object.\n       *\n       * @example\n       *\n       *   Object.merge({one:1},{two:2})                 -> {one:1,two:2}\n       *   Object.merge({one:1},{one:9,two:2})           -> {one:9,two:2}\n       *   Object.merge({x:{a:1}},{x:{b:2}},{deep:true}) -> {x:{a:1,b:2}}\n       *   Object.merge({a:1},{a:2},{resolve:mergeAdd})  -> {a:3}\n       *\n       * @param {Object} source\n       * @param {ObjectMergeOptions} [options]\n       * @callbackParam {string} key\n       * @callbackParam {Property} targetVal\n       * @callbackParam {Property} sourceVal\n       * @callbackParam {Object} target\n       * @callbackParam {Object} source\n       * @callbackReturns {boolean} resolveFn\n       * @option {boolean} [deep]\n       * @option {boolean} [hidden]\n       * @option {boolean} [descriptor]\n       * @option {boolean|resolveFn} [resolve]\n       *\n       ***/\n      'merge': function(target, source, opts) {\n        return mergeWithOptions(target, source, opts);\n      },\n  \n      /***\n       * @method add(obj, [options])\n       * @returns Object\n       * @short Adds properties in `obj` and returns a new object.\n       * @extra This method will not modify the original object. See `merge` for options.\n       *\n       * @example\n       *\n       *   Object.add({one:1},{two:2})                 -> {one:1,two:2}\n       *   Object.add({one:1},{one:9,two:2})           -> {one:9,two:2}\n       *   Object.add({x:{a:1}},{x:{b:2}},{deep:true}) -> {x:{a:1,b:2}}\n       *   Object.add({a:1},{a:2},{resolve:mergeAdd})  -> {a:3}\n       *\n       * @param {Object} obj\n       * @param {ObjectMergeOptions} [options]\n       *\n       ***/\n      'add': function(obj1, obj2, opts) {\n        return mergeWithOptions(clone(obj1), obj2, opts);\n      },\n  \n      /***\n       * @method mergeAll(sources, [options])\n       * @returns Object\n       * @short Merges properties from an array of `sources`.\n       * @extra This method will modify the object! Use `addAll` for a non-destructive\n       *        alias. See `merge` for options.\n       *\n       * @example\n       *\n       *   Object.mergeAll({one:1},[{two:2},{three:3}]) -> {one:1,two:2,three:3}\n       *   Object.mergeAll({x:{a:1}},[{x:{b:2}},{x:{c:3}}],{deep:true}) -> {x:{a:1,b:2,c:3}}\n       *\n       * @param {Array<Object>} sources\n       * @param {ObjectMergeOptions} [options]\n       *\n       ***/\n      'mergeAll': function(target, sources, opts) {\n        return mergeAll(target, sources, opts);\n      },\n  \n      /***\n       * @method addAll(sources, [options])\n       * @returns Object\n       * @short Adds properties from an array of `sources` and returns a new object.\n       * @extra This method will not modify the object. See `merge` for options.\n       *\n       * @example\n       *\n       *   Object.addAll({one:1},[{two:2},{three:3}]) -> {one:1,two:2,three:3}\n       *   Object.addAll({x:{a:1}},[{x:{b:2}},{x:{c:3}}],{deep:true}) -> {x:{a:1,b:2,c:3}}\n       *\n       * @param {Array<Object>} sources\n       * @param {ObjectMergeOptions} [options]\n       *\n       ***/\n      'addAll': function(obj, sources, opts) {\n        return mergeAll(clone(obj), sources, opts);\n      },\n  \n      /***\n       * @method defaults(sources, [options])\n       * @returns Object\n       * @short Merges properties from one or multiple `sources` while preserving\n       *        the object's defined properties.\n       * @extra This method modifies the object! See `merge` for options.\n       *\n       * @example\n       *\n       *   Object.defaults({one:1},[{one:9},{two:2}])                   -> {one:1,two:2}\n       *   Object.defaults({x:{a:1}},[{x:{a:9}},{x:{b:2}}],{deep:true}) -> {x:{a:1,b:2}}\n       *\n       * @param {Array<Object>} sources\n       * @param {ObjectMergeOptions} [options]\n       *\n       ***/\n      'defaults': function(target, sources, opts) {\n        return defaults(target, sources, opts);\n      },\n  \n      /***\n       * @method intersect(obj)\n       * @returns Object\n       * @short Returns a new object whose properties are those that the object has\n       *        in common both with `obj`.\n       * @extra If both key and value do not match, then the property will not be included.\n       *\n       * @example\n       *\n       *   Object.intersect({a:'a'},{b:'b'}) -> {}\n       *   Object.intersect({a:'a'},{a:'b'}) -> {}\n       *   Object.intersect({a:'a',b:'b'},{b:'b',z:'z'}) -> {b:'b'}\n       *\n       * @param {Object} obj\n       *\n       ***/\n      'intersect': function(obj1, obj2) {\n        return objectIntersectOrSubtract(obj1, obj2, false);\n      },\n  \n      /***\n       * @method subtract(obj)\n       * @returns Object\n       * @short Returns a clone of the object with any properties shared with `obj` excluded.\n       * @extra If both key and value do not match, then the property will not be excluded.\n       *\n       * @example\n       *\n       *   Object.subtract({a:'a',b:'b'},{b:'b'}) -> {a:'a'}\n       *   Object.subtract({a:'a',b:'b'},{a:'b'}) -> {a:'a',b:'b'}\n       *\n       * @param {Object} obj\n       *\n       ***/\n      'subtract': function(obj1, obj2) {\n        return objectIntersectOrSubtract(obj1, obj2, true);\n      },\n  \n      /***\n       * @method clone([deep] = false)\n       * @returns Object\n       * @short Creates a clone of the object.\n       * @extra Default is a shallow clone, unless [deep] is true.\n       *\n       * @example\n       *\n       *   Object.clone({foo:'bar'})       -> creates shallow clone\n       *   Object.clone({foo:'bar'}, true) -> creates a deep clone\n       *\n       * @param {boolean} [deep]\n       *\n       ***/\n      'clone': function(obj, deep) {\n        return clone(obj, deep);\n      },\n  \n      /***\n       * @method values()\n       * @returns Array\n       * @short Returns an array containing the values in the object.\n       * @extra Values are in no particular order. Does not include inherited or\n       *        non-enumerable properties.\n       *\n       * @example\n       *\n       *   Object.values({a:'a',b:'b'}) -> ['a','b']\n       *\n       ***/\n      'values': function(obj) {\n        return getValues(obj);\n      },\n  \n      /***\n       * @method invert([multi] = false)\n       * @returns Object\n       * @short Creates a new object with the keys and values swapped.\n       * @extra If [multi] is true, values will be an array of all keys, othewise\n       *        collisions will be overwritten.\n       *\n       * @example\n       *\n       *   Object.invert({foo:'bar'})     -> {bar:'foo'}\n       *   Object.invert({a:1,b:1}, true) -> {1:['a','b']}\n       *\n       * @param {boolean} [multi]\n       *\n       ***/\n      'invert': function(obj, multi) {\n        var result = {};\n        multi = multi === true;\n        forEachProperty(obj, function(val, key) {\n          if (hasOwn(result, val) && multi) {\n            result[val].push(key);\n          } else if (multi) {\n            result[val] = [key];\n          } else {\n            result[val] = key;\n          }\n        });\n        return result;\n      },\n  \n      /***\n       * @method tap(fn)\n       * @returns Object\n       * @short Runs `fn` and returns the object.\n       * @extra A string can also be used as a shortcut to a method. This method is\n       *        designed to run an intermediary function that \"taps into\" a method\n       *        chain. As such, it is fairly useless as a static method. However it\n       *        can be quite useful when combined with chainables.\n       *\n       * @callback tapFn\n       *\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   Sugar.Array([1,4,9]).map(Math.sqrt).tap('pop') -> [1,2]\n       *   Sugar.Object({a:'a'}).tap(logArgs).merge({b:'b'})  -> {a:'a',b:'b'}\n       *\n       * @param {tapFn} fn\n       * @callbackParam {Object} obj\n       * @callbackReturns {any} tapFn\n       *\n       ***/\n      'tap': function(obj, arg) {\n        return tap(obj, arg);\n      },\n  \n      /***\n       * @method isArguments()\n       * @returns Boolean\n       * @short Returns true if the object is an arguments object.\n       *\n       * @example\n       *\n       *   Object.isArguments([1]) -> false\n       *\n       ***/\n      'isArguments': function(obj) {\n        return isArguments(obj);\n      },\n  \n      /***\n       * @method isObject()\n       * @returns Boolean\n       * @short Returns true if the object is a \"plain\" object.\n       * @extra Plain objects do not include instances of classes or \"host\" objects,\n       *        such as Elements, Events, etc.\n       *\n       * @example\n       *\n       *   Object.isObject({ broken:'wear' }) -> true\n       *\n       ***/\n      'isObject': function(obj) {\n        return isPlainObject(obj);\n      },\n  \n      /***\n       * @method remove(search)\n       * @returns Object\n       * @short Deletes all properties in the object matching `search`.\n       * @extra This method will modify the object!. Implements `enhanced matching`.\n       *\n       * @callback searchFn\n       *\n       *   key  The key of the current iteration.\n       *   val  The value of the current iteration.\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   Object.remove({a:'a',b:'b'}, 'a');           -> {b:'b'}\n       *   Object.remove({a:'a',b:'b',z:'z'}, /[a-f]/); -> {z:'z'}\n       *\n       * @param {Property|searchFn} search\n       * @callbackParam {Property} val\n       * @callbackParam {string} key\n       * @callbackParam {Object} obj\n       * @callbackReturns {boolean} searchFn\n       *\n       ***/\n      'remove': function(obj, f) {\n        return objectRemove(obj, f);\n      },\n  \n      /***\n       * @method exclude(search)\n       * @returns Object\n       * @short Returns a new object with all properties matching `search` removed.\n       * @extra This is a non-destructive version of `remove` and will not modify\n       *        the object. Implements `enhanced matching`.\n       *\n       * @callback searchFn\n       *\n       *   key  The key of the current iteration.\n       *   val  The value of the current iteration.\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   Object.exclude({a:'a',b:'b'}, 'a');           -> {b:'b'}\n       *   Object.exclude({a:'a',b:'b',z:'z'}, /[a-f]/); -> {z:'z'}\n       *\n       * @param {Property|searchFn} search\n       * @callbackParam {Property} val\n       * @callbackParam {string} key\n       * @callbackParam {Object} obj\n       * @callbackReturns {boolean} searchFn\n       *\n       ***/\n      'exclude': function(obj, f) {\n        return objectExclude(obj, f);\n      },\n  \n      /***\n       * @method select(find)\n       * @returns Object\n       * @short Builds a new object containing the keys specified in `find`.\n       * @extra When `find` is a string, a single key will be selected. Arrays or\n       *        objects match multiple keys, and a regex will match keys by regex.\n       *\n       * @example\n       *\n       *   Object.select({a:1,b:2}, 'a')           -> {a:1}\n       *   Object.select({a:1,b:2}, ['a', 'b'])    -> {a:1,b:2}\n       *   Object.select({a:1,b:2}, /[a-z]/)       -> {a:1,b:2}\n       *   Object.select({a:1,b:2}, {a:'a',b:'b'}) -> {a:1,b:2}\n       *\n       * @param {string|RegExp|Array<string>|Object} find\n       *\n       ***/\n      'select': function(obj, f) {\n        return objectSelect(obj, f);\n      },\n  \n      /***\n       * @method reject(find)\n       * @returns Object\n       * @short Builds a new object containing all keys except those in `find`.\n       * @extra When `find` is a string, a single key will be rejected. Arrays or\n       *        objects match multiple keys, and a regex will match keys by regex.\n       *\n       * @example\n       *\n       *   Object.reject({a:1,b:2}, 'a')        -> {b:2}\n       *   Object.reject({a:1,b:2}, /[a-z]/)    -> {}\n       *   Object.reject({a:1,b:2}, {a:'a'})    -> {b:2}\n       *   Object.reject({a:1,b:2}, ['a', 'b']) -> {}\n       *\n       * @param {string|RegExp|Array<string>|Object} find\n       *\n       ***/\n      'reject': function(obj, f) {\n        return objectReject(obj, f);\n      }\n  \n    });\n  \n    // TODO: why is this here?\n    defineInstance(sugarObject, {\n  \n      /***\n       * @method keys()\n       * @returns Array\n       * @polyfill ES5\n       * @short Returns an array containing the keys of all of the non-inherited,\n       *        enumerable properties of the object.\n       *\n       * @example\n       *\n       *   Object.keys({a:'a',b:'b'}) -> ['a','b']\n       *\n       ***/\n      'keys': function(obj) {\n        return getKeys(obj);\n      }\n  \n    });\n  \n    buildClassCheckMethods();\n  \n    /***\n     * @module Enumerable\n     * @description Counting, mapping, and finding methods on both arrays and objects.\n     *\n     ***/\n  \n    function sum(obj, map) {\n      var sum = 0;\n      enumerateWithMapping(obj, map, function(val) {\n        sum += val;\n      });\n      return sum;\n    }\n  \n    function average(obj, map) {\n      var sum = 0, count = 0;\n      enumerateWithMapping(obj, map, function(val) {\n        sum += val;\n        count++;\n      });\n      // Prevent divide by 0\n      return sum / (count || 1);\n    }\n  \n    function median(obj, map) {\n      var result = [], middle, len;\n      enumerateWithMapping(obj, map, function(val) {\n        result.push(val);\n      });\n      len = result.length;\n      if (!len) return 0;\n      result.sort(function(a, b) {\n        // IE7 will throw errors on non-numbers!\n        return (a || 0) - (b || 0);\n      });\n      middle = trunc(len / 2);\n      return len % 2 ? result[middle] : (result[middle - 1] + result[middle]) / 2;\n    }\n  \n    function getMinOrMax(obj, arg1, arg2, max, asObject) {\n      var result = [], pushVal, edge, all, map;\n      if (isBoolean(arg1)) {\n        all = arg1;\n        map = arg2;\n      } else {\n        map = arg1;\n      }\n      enumerateWithMapping(obj, map, function(val, key) {\n        if (isUndefined(val)) {\n          throw new TypeError('Cannot compare with undefined');\n        }\n        pushVal = asObject ? key : obj[key];\n        if (val === edge) {\n          result.push(pushVal);\n        } else if (isUndefined(edge) || (max && val > edge) || (!max && val < edge)) {\n          result = [pushVal];\n          edge = val;\n        }\n      });\n      return getReducedMinMaxResult(result, obj, all, asObject);\n    }\n  \n    function getLeastOrMost(obj, arg1, arg2, most, asObject) {\n      var group = {}, refs = [], minMaxResult, result, all, map;\n      if (isBoolean(arg1)) {\n        all = arg1;\n        map = arg2;\n      } else {\n        map = arg1;\n      }\n      enumerateWithMapping(obj, map, function(val, key) {\n        var groupKey = serializeInternal(val, refs);\n        var arr = getOwn(group, groupKey) || [];\n        arr.push(asObject ? key : obj[key]);\n        group[groupKey] = arr;\n      });\n      minMaxResult = getMinOrMax(group, !!all, 'length', most, true);\n      if (all) {\n        result = [];\n        // Flatten result\n        forEachProperty(minMaxResult, function(val) {\n          result = result.concat(val);\n        });\n      } else {\n        result = getOwn(group, minMaxResult);\n      }\n      return getReducedMinMaxResult(result, obj, all, asObject);\n    }\n  \n  \n    // Support\n  \n    function getReducedMinMaxResult(result, obj, all, asObject) {\n      if (asObject && all) {\n        // The method has returned an array of keys so use this array\n        // to build up the resulting object in the form we want it in.\n        return result.reduce(function(o, key) {\n          o[key] = obj[key];\n          return o;\n        }, {});\n      } else if (result && !all) {\n        result = result[0];\n      }\n      return result;\n    }\n  \n    function enumerateWithMapping(obj, map, fn) {\n      var arrayIndexes = isArray(obj);\n      forEachProperty(obj, function(val, key) {\n        if (arrayIndexes) {\n          if (!isArrayIndex(key)) {\n            return;\n          }\n          key = +key;\n        }\n        var mapped = mapWithShortcuts(val, map, obj, [val, key, obj]);\n        fn(mapped, key);\n      });\n    }\n  \n    /*** @namespace Array ***/\n  \n    // Flag allowing native array methods to be enhanced\n    var ARRAY_ENHANCEMENTS_FLAG = 'enhanceArray';\n  \n    // Enhanced map function\n    var enhancedMap = buildEnhancedMapping('map');\n  \n    // Enhanced matcher methods\n    var enhancedFind      = buildEnhancedMatching('find'),\n        enhancedSome      = buildEnhancedMatching('some'),\n        enhancedEvery     = buildEnhancedMatching('every'),\n        enhancedFilter    = buildEnhancedMatching('filter'),\n        enhancedFindIndex = buildEnhancedMatching('findIndex');\n  \n    function arrayNone() {\n      return !enhancedSome.apply(this, arguments);\n    }\n  \n    function arrayCount(arr, f) {\n      if (isUndefined(f)) {\n        return arr.length;\n      }\n      return enhancedFilter.apply(this, arguments).length;\n    }\n  \n    // Enhanced methods\n  \n    function buildEnhancedMapping(name) {\n      return wrapNativeArrayMethod(name, enhancedMapping);\n    }\n  \n  \n    function buildEnhancedMatching(name) {\n      return wrapNativeArrayMethod(name, enhancedMatching);\n    }\n  \n    function enhancedMapping(map, context) {\n      if (isFunction(map)) {\n        return map;\n      } else if (map) {\n        return function(el, i, arr) {\n          return mapWithShortcuts(el, map, context, [el, i, arr]);\n        };\n      }\n    }\n  \n    function enhancedMatching(f) {\n      var matcher;\n      if (isFunction(f)) {\n        return f;\n      }\n      matcher = getMatcher(f);\n      return function(el, i, arr) {\n        return matcher(el, i, arr);\n      };\n    }\n  \n    function wrapNativeArrayMethod(methodName, wrapper) {\n      var nativeFn = Array.prototype[methodName];\n      return function(arr, f, context, argsLen) {\n        var args = new Array(2);\n        assertArgument(argsLen > 0);\n        args[0] = wrapper(f, context);\n        args[1] = context;\n        return nativeFn.apply(arr, args);\n      };\n    }\n  \n  \n    /***\n     * @method [fn]FromIndex(startIndex, [loop], ...)\n     * @returns Mixed\n     * @short Runs native array functions beginning from `startIndex`.\n     * @extra If [loop] is `true`, once the end of the array has been reached,\n     *        iteration will continue from the start of the array up to\n     *        `startIndex - 1`. If [loop] is false it can be omitted. Standard\n     *        arguments are then passed which will be forwarded to the native\n     *        methods. When available, methods are always `enhanced`. This includes\n     *        `deep properties` for `map`, and `enhanced matching` for `some`,\n     *        `every`, `filter`, `find`, and `findIndex`. Note also that\n     *        `forEachFromIndex` is optimized for sparse arrays and may be faster\n     *        than native `forEach`.\n     *\n     * @set\n     *   mapFromIndex\n     *   forEachFromIndex\n     *   filterFromIndex\n     *   someFromIndex\n     *   everyFromIndex\n     *   reduceFromIndex\n     *   reduceRightFromIndex\n     *   findFromIndex\n     *   findIndexFromIndex\n     *\n     * @example\n     *\n     *   users.mapFromIndex(2, 'name');\n     *   users.mapFromIndex(2, true, 'name');\n     *   names.forEachFromIndex(10, log);\n     *   names.everyFromIndex(15, /^[A-F]/);\n     *\n     * @signature [fn]FromIndex(startIndex, ...)\n     * @param {number} startIndex\n     * @param {boolean} loop\n     *\n     ***/\n    function buildFromIndexMethods() {\n  \n      var methods = {\n        'forEach': {\n          base: forEachAsNative\n        },\n        'map': {\n          wrapper: enhancedMapping\n        },\n        'some every': {\n          wrapper: enhancedMatching\n        },\n        'findIndex': {\n          wrapper: enhancedMatching,\n          result: indexResult\n        },\n        'reduce': {\n          apply: applyReduce\n        },\n        'filter find': {\n          wrapper: enhancedMatching\n        },\n        'reduceRight': {\n          apply: applyReduce,\n          slice: sliceArrayFromRight,\n          clamp: clampStartIndexFromRight\n        }\n      };\n  \n      forEachProperty(methods, function(opts, key) {\n        forEach(spaceSplit(key), function(baseName) {\n          var methodName = baseName + 'FromIndex';\n          var fn = createFromIndexWithOptions(baseName, opts);\n          defineInstanceWithArguments(sugarArray, methodName, fn);\n        });\n      });\n  \n      function forEachAsNative(fn) {\n        forEach(this, fn);\n      }\n  \n      // Methods like filter and find have a direct association between the value\n      // returned by the callback and the element of the current iteration. This\n      // means that when looping, array elements must match the actual index for\n      // which they are being called, so the array must be sliced. This is not the\n      // case for methods like forEach and map, which either do not use return\n      // values or use them in a way that simply getting the element at a shifted\n      // index will not affect the final return value. However, these methods will\n      // still fail on sparse arrays, so always slicing them here. For example, if\n      // \"forEachFromIndex\" were to be called on [1,,2] from index 1, although the\n      // actual index 1 would itself would be skipped, when the array loops back to\n      // index 0, shifting it by adding 1 would result in the element for that\n      // iteration being undefined. For shifting to work, all gaps in the array\n      // between the actual index and the shifted index would have to be accounted\n      // for. This is infeasible and is easily solved by simply slicing the actual\n      // array instead so that gaps align. Note also that in the case of forEach,\n      // we are using the internal function which handles sparse arrays in a way\n      // that does not increment the index, and so is highly optimized compared to\n      // the others here, which are simply going through the native implementation.\n      function sliceArrayFromLeft(arr, startIndex, loop) {\n        var result = arr;\n        if (startIndex) {\n          result = arr.slice(startIndex);\n          if (loop) {\n            result = result.concat(arr.slice(0, startIndex));\n          }\n        }\n        return result;\n      }\n  \n      // When iterating from the right, indexes are effectively shifted by 1.\n      // For example, iterating from the right from index 2 in an array of 3\n      // should also include the last element in the array. This matches the\n      // \"lastIndexOf\" method which also iterates from the right.\n      function sliceArrayFromRight(arr, startIndex, loop) {\n        if (!loop) {\n          startIndex += 1;\n          arr = arr.slice(0, max(0, startIndex));\n        }\n        return arr;\n      }\n  \n      function clampStartIndex(startIndex, len) {\n        return min(len, max(0, startIndex));\n      }\n  \n      // As indexes are shifted by 1 when starting from the right, clamping has to\n      // go down to -1 to accommodate the full range of the sliced array.\n      function clampStartIndexFromRight(startIndex, len) {\n        return min(len, max(-1, startIndex));\n      }\n  \n      function applyReduce(arr, startIndex, fn, context, len, loop) {\n        return function(acc, val, i) {\n          i = getNormalizedIndex(i + startIndex, len, loop);\n          return fn.call(arr, acc, val, i, arr);\n        };\n      }\n  \n      function applyEach(arr, startIndex, fn, context, len, loop) {\n        return function(el, i) {\n          i = getNormalizedIndex(i + startIndex, len, loop);\n          return fn.call(context, arr[i], i, arr);\n        };\n      }\n  \n      function indexResult(result, startIndex, len) {\n        if (result !== -1) {\n          result = (result + startIndex) % len;\n        }\n        return result;\n      }\n  \n      function createFromIndexWithOptions(methodName, opts) {\n  \n        var baseFn = opts.base || Array.prototype[methodName],\n            applyCallback = opts.apply || applyEach,\n            sliceArray = opts.slice || sliceArrayFromLeft,\n            clampIndex = opts.clamp || clampStartIndex,\n            getResult = opts.result,\n            wrapper = opts.wrapper;\n  \n        return function(arr, startIndex, args) {\n          var callArgs = [], argIndex = 0, lastArg, result, len, loop, fn;\n          len = arr.length;\n          if (isBoolean(args[0])) {\n            loop = args[argIndex++];\n          }\n          fn = args[argIndex++];\n          lastArg = args[argIndex];\n          if (startIndex < 0) {\n            startIndex += len;\n          }\n          startIndex = clampIndex(startIndex, len);\n          assertArgument(args.length);\n          fn = wrapper ? wrapper(fn, lastArg) : fn;\n          callArgs.push(applyCallback(arr, startIndex, fn, lastArg, len, loop));\n          if (lastArg) {\n            callArgs.push(lastArg);\n          }\n          result = baseFn.apply(sliceArray(arr, startIndex, loop), callArgs);\n          if (getResult) {\n            result = getResult(result, startIndex, len);\n          }\n          return result;\n        };\n      }\n    }\n  \n    defineInstance(sugarArray, {\n  \n      /***\n       * @method map(map, [context])\n       * @returns New Array\n       * @polyfill ES5\n       * @short Maps the array to another array whose elements are the values\n       *        returned by the `map` callback.\n       * @extra [context] is the `this` object. Sugar enhances this method to accept\n       *        a string for `map`, which is a shortcut for a function that gets\n       *        a property or invokes a function on each element.\n       *        Supports `deep properties`.\n       *\n       * @callback mapFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   arr  A reference to the array.\n       *\n       * @example\n       *\n       *   [1,2,3].map(function(n) {\n       *     return n * 3;\n       *   }); -> [3,6,9]\n       *\n       *   ['a','aa','aaa'].map('length') -> [1,2,3]\n       *   ['A','B','C'].map('toLowerCase') -> ['a','b','c']\n       *   users.map('name') -> array of user names\n       *\n       * @param {string|mapFn} map\n       * @param {any} context\n       * @callbackParam {ArrayElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Array} arr\n       * @callbackReturns {NewArrayElement} mapFn\n       *\n       ***/\n      'map': fixArgumentLength(enhancedMap),\n  \n      /***\n       * @method some(search, [context])\n       * @returns Boolean\n       * @polyfill ES5\n       * @short Returns true if `search` is true for any element in the array.\n       * @extra [context] is the `this` object. Implements `enhanced matching`.\n       *\n       * @callback searchFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   arr  A reference to the array.\n       *\n       * @example\n       *\n       *   ['a','b','c'].some(function(n) {\n       *     return n == 'a';\n       *   });\n       *   ['a','b','c'].some(function(n) {\n       *     return n == 'd';\n       *   });\n       *   ['a','b','c'].some('a')    -> true\n       *   [{a:2},{b:5}].some({a:2})  -> true\n       *   users.some({ name: /^H/ }) -> true if any have a name starting with H\n       *\n       * @param {ArrayElement|searchFn} search\n       * @param {any} context\n       * @callbackParam {ArrayElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Array} arr\n       * @callbackReturns {boolean} searchFn\n       *\n       ***/\n      'some': fixArgumentLength(enhancedSome),\n  \n      /***\n       * @method every(search, [context])\n       * @returns Boolean\n       * @polyfill ES5\n       * @short Returns true if `search` is true for all elements of the array.\n       * @extra [context] is the `this` object. Implements `enhanced matching`.\n       *\n       * @callback searchFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   arr  A reference to the array.\n       *\n       * @example\n       *\n       *   ['a','a','a'].every(function(n) {\n       *     return n == 'a';\n       *   });\n       *   ['a','a','a'].every('a')   -> true\n       *   [{a:2},{a:2}].every({a:2}) -> true\n       *   users.every({ name: /^H/ }) -> true if all have a name starting with H\n       *\n       * @param {ArrayElement|searchFn} search\n       * @param {any} context\n       * @callbackParam {ArrayElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Array} arr\n       * @callbackReturns {boolean} searchFn\n       *\n       ***/\n      'every': fixArgumentLength(enhancedEvery),\n  \n      /***\n       * @method filter(search, [context])\n       * @returns Array\n       * @polyfill ES5\n       * @short Returns any elements in the array that match `search`.\n       * @extra [context] is the `this` object. Implements `enhanced matching`.\n       *\n       * @callback searchFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   arr  A reference to the array.\n       *\n       * @example\n       *\n       *   [1,2,3].filter(function(n) {\n       *     return n > 1;\n       *   });\n       *   [1,2,2,4].filter(2) -> 2\n       *   users.filter({ name: /^H/ }) -> all users with a name starting with H\n       *\n       * @param {ArrayElement|searchFn} search\n       * @param {any} context\n       * @callbackParam {ArrayElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Array} arr\n       * @callbackReturns {boolean} searchFn\n       *\n       ***/\n      'filter': fixArgumentLength(enhancedFilter),\n  \n      /***\n       * @method find(search, [context])\n       * @returns Mixed\n       * @polyfill ES6\n       * @short Returns the first element in the array that matches `search`.\n       * @extra Implements `enhanced matching`.\n       *\n       * @callback searchFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   arr  A reference to the array.\n       *\n       * @example\n       *\n       *   users.find(function(user) {\n       *     return user.name = 'Harry';\n       *   }); -> harry!\n       *\n       *   users.find({ name: 'Harry' }); -> harry!\n       *   users.find({ name: /^[A-H]/ });  -> First user with name starting with A-H\n       *   users.find({ titles: ['Ms', 'Dr'] }); -> not harry!\n       *\n       * @param {ArrayElement|searchFn} search\n       * @param {any} context\n       * @callbackParam {ArrayElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Array} arr\n       * @callbackReturns {boolean} searchFn\n       *\n       ***/\n      'find': fixArgumentLength(enhancedFind),\n  \n      /***\n       * @method findIndex(search, [context])\n       * @returns Number\n       * @polyfill ES6\n       * @short Returns the index of the first element in the array that matches\n       *        `search`, or `-1` if none.\n       * @extra [context] is the `this` object. Implements `enhanced matching`.\n       *\n       * @callback searchFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   arr  A reference to the array.\n       *\n       * @example\n       *\n       *   [1,2,3,4].findIndex(function(n) {\n       *     return n % 2 == 0;\n       *   }); -> 1\n       *   ['a','b','c'].findIndex('c');        -> 2\n       *   ['cuba','japan','canada'].find(/^c/) -> 0\n       *\n       * @param {ArrayElement|searchFn} search\n       * @param {any} context\n       * @callbackParam {ArrayElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Array} arr\n       * @callbackReturns {boolean} searchFn\n       *\n       ***/\n      'findIndex': fixArgumentLength(enhancedFindIndex)\n  \n    }, [ENHANCEMENTS_FLAG, ARRAY_ENHANCEMENTS_FLAG]);\n  \n  \n    defineInstance(sugarArray, {\n  \n      /***\n       * @method none(search, [context])\n       *\n       * @returns Boolean\n       * @short Returns true if none of the elements in the array match `search`.\n       * @extra [context] is the `this` object. Implements `enhanced matching`.\n       *\n       * @callback searchFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   arr  A reference to the array.\n       *\n       * @example\n       *\n       *   [1,2,3].none(5)         -> true\n       *   ['a','b','c'].none(/b/) -> false\n       *   users.none(function(user) {\n       *     return user.name == 'Wolverine';\n       *   }); -> probably true\n       *   users.none({ name: 'Wolverine' }); -> same as above\n       *\n       * @param {ArrayElement|searchFn} search\n       * @param {any} context\n       * @callbackParam {ArrayElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Array} arr\n       * @callbackReturns {boolean} searchFn\n       *\n       ***/\n      'none': fixArgumentLength(arrayNone),\n  \n      /***\n       * @method count(search, [context])\n       * @returns Number\n       * @short Counts all elements in the array that match `search`.\n       * @extra Implements `enhanced matching`.\n       *\n       * @callback searchFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   arr  A reference to the array.\n       *\n       * @example\n       *\n       *   ['a','b','a'].count('a') -> 2\n       *   ['a','b','c'].count(/b/) -> 1\n       *   users.count(function(user) {\n       *     return user.age > 30;\n       *   }); -> number of users older than 30\n       *\n       * @param {ArrayElement|searchFn} search\n       * @param {any} context\n       * @callbackParam {ArrayElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Array} arr\n       * @callbackReturns {boolean} searchFn\n       *\n       ***/\n      'count': fixArgumentLength(arrayCount),\n  \n      /***\n       * @method min([all] = false, [map])\n       * @returns Mixed\n       * @short Returns the element in the array with the lowest value.\n       * @extra [map] may be passed in place of [all], and is a function mapping the\n       *        value to be checked or a string acting as a shortcut. If [all] is\n       *        true, multiple elements will be returned. Supports `deep properties`.\n       *\n       * @callback mapFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   arr  A reference to the array.\n       *\n       * @example\n       *\n       *   [1,2,3].min()                          -> 1\n       *   ['fee','fo','fum'].min('length')       -> 'fo'\n       *   ['fee','fo','fum'].min(true, 'length') -> ['fo']\n       *   users.min('age')                       -> youngest guy!\n       *\n       *   ['fee','fo','fum'].min(true, function(n) {\n       *     return n.length;\n       *   }); -> ['fo']\n       *\n       * @signature min([map])\n       * @param {string|mapFn} map\n       * @param {boolean} all\n       * @callbackParam {ArrayElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Array} arr\n       * @callbackReturns {NewArrayElement} mapFn\n       *\n       ***/\n      'min': function(arr, all, map) {\n        return getMinOrMax(arr, all, map);\n      },\n  \n      /***\n       * @method max([all] = false, [map])\n       * @returns Mixed\n       * @short Returns the element in the array with the greatest value.\n       * @extra [map] may be passed in place of [all], and is a function mapping the\n       *        value to be checked or a string acting as a shortcut. If [all] is\n       *        true, multiple elements will be returned. Supports `deep properties`.\n       *\n       * @callback mapFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   arr  A reference to the array.\n       *\n       * @example\n       *\n       *   [1,2,3].max()                          -> 3\n       *   ['fee','fo','fum'].max('length')       -> 'fee'\n       *   ['fee','fo','fum'].max(true, 'length') -> ['fee','fum']\n       *   users.max('age')                       -> oldest guy!\n       *\n       *   ['fee','fo','fum'].max(true, function(n) {\n       *     return n.length;\n       *   }); -> ['fee', 'fum']\n       *\n       * @signature max([map])\n       * @param {string|mapFn} map\n       * @param {boolean} all\n       * @callbackParam {ArrayElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Array} arr\n       * @callbackReturns {NewArrayElement} mapFn\n       *\n       ***/\n      'max': function(arr, all, map) {\n        return getMinOrMax(arr, all, map, true);\n      },\n  \n      /***\n       * @method least([all] = false, [map])\n       * @returns Array\n       * @short Returns the elements in the array with the least commonly occuring value.\n       * @extra [map] may be passed in place of [all], and is a function mapping the\n       *        value to be checked or a string acting as a shortcut. If [all] is\n       *        true, will return multiple values in an array.\n       *        Supports `deep properties`.\n       *\n       * @callback mapFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   arr  A reference to the array.\n       *\n       * @example\n       *\n       *   [3,2,2].least() -> 3\n       *   ['fe','fo','fum'].least(true, 'length') -> ['fum']\n       *   users.least('profile.type')             -> (user with least commonly occurring type)\n       *   users.least(true, 'profile.type')       -> (users with least commonly occurring type)\n       *\n       * @signature least([map])\n       * @param {string|mapFn} map\n       * @param {boolean} all\n       * @callbackParam {ArrayElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Array} arr\n       * @callbackReturns {NewArrayElement} mapFn\n       *\n       ***/\n      'least': function(arr, all, map) {\n        return getLeastOrMost(arr, all, map);\n      },\n  \n      /***\n       * @method most([all] = false, [map])\n       * @returns Array\n       * @short Returns the elements in the array with the most commonly occuring value.\n       * @extra [map] may be passed in place of [all], and is a function mapping the\n       *        value to be checked or a string acting as a shortcut. If [all] is\n       *        true, will return multiple values in an array.\n       *        Supports `deep properties`.\n       *\n       * @callback mapFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   arr  A reference to the array.\n       *\n       * @example\n       *\n       *   [3,2,2].most(2) -> 2\n       *   ['fe','fo','fum'].most(true, 'length') -> ['fe','fo']\n       *   users.most('profile.type')             -> (user with most commonly occurring type)\n       *   users.most(true, 'profile.type')       -> (users with most commonly occurring type)\n       *\n       * @signature most([map])\n       * @param {string|mapFn} map\n       * @param {boolean} all\n       * @callbackParam {ArrayElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Array} arr\n       * @callbackReturns {NewArrayElement} mapFn\n       *\n       ***/\n      'most': function(arr, all, map) {\n        return getLeastOrMost(arr, all, map, true);\n      },\n  \n      /***\n       * @method sum([map])\n       * @returns Number\n       * @short Sums all values in the array.\n       * @extra [map] may be a function mapping the value to be summed or a string\n       *        acting as a shortcut.\n       *\n       * @callback mapFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   arr  A reference to the array.\n       *\n       * @example\n       *\n       *   [1,2,2].sum() -> 5\n       *   users.sum(function(user) {\n       *     return user.votes;\n       *   }); -> total votes!\n       *   users.sum('votes') -> total votes!\n       *\n       * @param {string|mapFn} map\n       * @callbackParam {ArrayElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Array} arr\n       * @callbackReturns {NewArrayElement} mapFn\n       *\n       ***/\n      'sum': function(arr, map) {\n        return sum(arr, map);\n      },\n  \n      /***\n       * @method average([map])\n       * @returns Number\n       * @short Gets the mean average for all values in the array.\n       * @extra [map] may be a function mapping the value to be averaged or a string\n       *        acting as a shortcut. Supports `deep properties`.\n       *\n       * @callback mapFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   arr  A reference to the array.\n       *\n       * @example\n       *\n       *   [1,2,3,4].average() -> 2\n       *   users.average(function(user) {\n       *     return user.age;\n       *   }); -> average user age\n       *   users.average('age') -> average user age\n       *   users.average('currencies.usd.balance') -> average USD balance\n       *\n       * @param {string|mapFn} map\n       * @callbackParam {ArrayElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Array} arr\n       * @callbackReturns {NewArrayElement} mapFn\n       *\n       ***/\n      'average': function(arr, map) {\n        return average(arr, map);\n      },\n  \n      /***\n       * @method median([map])\n       * @returns Number\n       * @short Gets the median average for all values in the array.\n       * @extra [map] may be a function mapping the value to be averaged or a string\n       *        acting as a shortcut.\n       *\n       * @callback mapFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   arr  A reference to the array.\n       *\n       * @example\n       *\n       *   [1,2,2].median() -> 2\n       *   [{a:1},{a:2},{a:2}].median('a') -> 2\n       *   users.median('age') -> median user age\n       *   users.median('currencies.usd.balance') -> median USD balance\n       *\n       * @param {string|mapFn} map\n       * @callbackParam {ArrayElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Array} arr\n       * @callbackReturns {NewArrayElement} mapFn\n       *\n       ***/\n      'median': function(arr, map) {\n        return median(arr, map);\n      }\n  \n    });\n  \n  \n    /*** @namespace Object ***/\n  \n    // Object matchers\n    var objectSome  = wrapObjectMatcher('some'),\n        objectFind  = wrapObjectMatcher('find'),\n        objectEvery = wrapObjectMatcher('every');\n  \n    function objectForEach(obj, fn) {\n      assertCallable(fn);\n      forEachProperty(obj, function(val, key) {\n        fn(val, key, obj);\n      });\n      return obj;\n    }\n  \n    function objectMap(obj, map) {\n      var result = {};\n      forEachProperty(obj, function(val, key) {\n        result[key] = mapWithShortcuts(val, map, obj, [val, key, obj]);\n      });\n      return result;\n    }\n  \n    function objectReduce(obj, fn, acc) {\n      var init = isDefined(acc);\n      forEachProperty(obj, function(val, key) {\n        if (!init) {\n          acc = val;\n          init = true;\n          return;\n        }\n        acc = fn(acc, val, key, obj);\n      });\n      return acc;\n    }\n  \n    function objectNone(obj, f) {\n      return !objectSome(obj, f);\n    }\n  \n    function objectFilter(obj, f) {\n      var matcher = getMatcher(f), result = {};\n      forEachProperty(obj, function(val, key) {\n        if (matcher(val, key, obj)) {\n          result[key] = val;\n        }\n      });\n      return result;\n    }\n  \n    function objectCount(obj, f) {\n      var matcher = getMatcher(f), count = 0;\n      forEachProperty(obj, function(val, key) {\n        if (matcher(val, key, obj)) {\n          count++;\n        }\n      });\n      return count;\n    }\n  \n    // Support\n  \n    function wrapObjectMatcher(name) {\n      var nativeFn = Array.prototype[name];\n      return function(obj, f) {\n        var matcher = getMatcher(f);\n        return nativeFn.call(getKeys(obj), function(key) {\n          return matcher(obj[key], key, obj);\n        });\n      };\n    }\n  \n    defineInstanceAndStatic(sugarObject, {\n  \n      /***\n       * @method forEach(fn)\n       * @returns Object\n       * @short Runs `fn` against each property in the object.\n       * @extra Does not iterate over inherited or non-enumerable properties.\n       *\n       * @callback eachFn\n       *\n       *   val  The value of the current iteration.\n       *   key  The key of the current iteration.\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   Object.forEach({a:'b'}, function(val, key) {\n       *     // val = 'b', key = a\n       *   });\n       *\n       * @param {eachFn} fn\n       * @callbackParam {Property} val\n       * @callbackParam {string} key\n       * @callbackParam {Object} obj\n       *\n       ***/\n      'forEach': function(obj, fn) {\n        return objectForEach(obj, fn);\n      },\n  \n      /***\n       * @method map(map)\n       * @returns Object\n       * @short Maps the object to another object whose properties are the values\n       *        returned by `map`.\n       * @extra `map` can also be a string, which is a shortcut for a function that\n       *        gets that property (or invokes a function) on each element.\n       *        Supports `deep properties`.\n       *\n       * @callback mapFn\n       *\n       *   val  The value of the current property.\n       *   key  The key of the current property.\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   data.map(function(val, key) {\n       *     return key;\n       *   }); -> {a:'b'}\n       *   users.map('age');\n       *\n       * @param {string|mapFn} map\n       * @callbackParam {Property} val\n       * @callbackParam {string} key\n       * @callbackParam {Object} obj\n       * @callbackReturns {NewProperty} mapFn\n       *\n       ***/\n      'map': function(obj, map) {\n        return objectMap(obj, map);\n      },\n  \n      /***\n       * @method some(search)\n       * @returns Boolean\n       * @short Returns true if `search` is true for any property in the object.\n       * @extra Implements `enhanced matching`.\n       *\n       * @callback searchFn\n       *\n       *   val  The value of the current iteration.\n       *   key  The key of the current iteration.\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   Object.some({a:1,b:2}, function(val) {\n       *     return val == 1;\n       *   }); -> true\n       *   Object.some({a:1,b:2}, 1); -> true\n       *\n       * @param {Property|searchFn} search\n       * @callbackParam {Property} val\n       * @callbackParam {string} key\n       * @callbackParam {Object} obj\n       * @callbackReturns {boolean} searchFn\n       *\n       ***/\n      'some': objectSome,\n  \n      /***\n       * @method every(search)\n       * @returns Boolean\n       * @short Returns true if `search` is true for all properties in the object.\n       * @extra Implements `enhanced matching`.\n       *\n       * @callback searchFn\n       *\n       *   val  The value of the current iteration.\n       *   key  The key of the current iteration.\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   Object.every({a:1,b:2}, function(val) {\n       *     return val > 0;\n       *   }); -> true\n       *   Object.every({a:'a',b:'b'}, /[a-z]/); -> true\n       *\n       * @param {Property|searchFn} search\n       * @callbackParam {Property} val\n       * @callbackParam {string} key\n       * @callbackParam {Object} obj\n       * @callbackReturns {boolean} searchFn\n       *\n       ***/\n      'every': objectEvery,\n  \n      /***\n       * @method filter(search)\n       * @returns Array\n       * @short Returns a new object with properties that match `search`.\n       * @extra Implements `enhanced matching`.\n       *\n       * @callback searchFn\n       *\n       *   val  The value of the current iteration.\n       *   key  The key of the current iteration.\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   Object.filter({a:1,b:2}, function(val) {\n       *     return val == 1;\n       *   }); -> {a:1}\n       *   Object.filter({a:'a',z:'z'}, /[a-f]/); -> {a:'a'}\n       *   Object.filter(usersByName, /^H/); -> all users with names starting with H\n       *\n       * @param {Property|searchFn} search\n       * @callbackParam {Property} val\n       * @callbackParam {string} key\n       * @callbackParam {Object} obj\n       * @callbackReturns {boolean} searchFn\n       *\n       ***/\n      'filter': function(obj, f) {\n        return objectFilter(obj, f);\n      },\n  \n      /***\n       * @method reduce(reduceFn, [init])\n       * @returns Mixed\n       * @short Reduces the object to a single result.\n       * @extra This operation is sometimes called \"accumulation\", as it takes the\n       *        result of the last iteration of `fn` and passes it as the first\n       *        argument to the next iteration, \"accumulating\" that value as it goes.\n       *        The return value of this method will be the return value of the final\n       *        iteration of `fn`. If [init] is passed, it will be the initial\n       *        \"accumulator\" (the first argument). If [init] is not passed, then a\n       *        property of the object will be used instead and `fn` will not be\n       *        called for that property. Note that object properties have no order,\n       *        and this may lead to bugs (for example if performing division or\n       *        subtraction operations on a value). If order is important, use an\n       *        array instead!\n       *\n       * @callback reduceFn\n       *\n       *   acc  The \"accumulator\", either [init], the result of the last iteration\n       *        of `fn`, or a property of `obj`.\n       *   val  The value of the current property called for `fn`.\n       *   key  The key of the current property called for `fn`.\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   Object.reduce({a:2,b:4}, function(a, b) {\n       *     return a * b;\n       *   }); -> 8\n       *\n       *   Object.reduce({a:2,b:4}, function(a, b) {\n       *     return a * b;\n       *   }, 10); -> 80\n       *\n       *\n       * @param {reduceFn} reduceFn\n       * @param {any} [init]\n       * @callbackParam {Property} acc\n       * @callbackParam {Property} val\n       * @callbackParam {string} key\n       * @callbackParam {Object} obj\n       *\n       ***/\n      'reduce': function(obj, fn, init) {\n        return objectReduce(obj, fn, init);\n      },\n  \n      /***\n       * @method find(search)\n       * @returns Boolean\n       * @short Returns the first key whose value matches `search`.\n       * @extra Implements `enhanced matching`. Note that \"first\" is\n       *        implementation-dependent. If order is important an array should be\n       *        used instead.\n       *\n       * @callback searchFn\n       *\n       *   val  The value of the current iteration.\n       *   key  The key of the current iteration.\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   Object.find({a:1,b:2}, function(val) {\n       *     return val == 2;\n       *   }); -> 'b'\n       *   Object.find({a:'a',b:'b'}, /[a-z]/); -> 'a'\n       *\n       * @param {Property|searchFn} search\n       * @callbackParam {Property} val\n       * @callbackParam {string} key\n       * @callbackParam {Object} obj\n       * @callbackReturns {boolean} searchFn\n       *\n       ***/\n      'find': objectFind,\n  \n      /***\n       * @method count(search)\n       * @returns Number\n       * @short Counts all properties in the object that match `search`.\n       * @extra Implements `enhanced matching`.\n       *\n       * @callback searchFn\n       *\n       *   val  The value of the current iteration.\n       *   key  The key of the current iteration.\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   Object.count({a:'a',b:'b',c:'a'}, 'a') -> 2\n       *   Object.count(usersByName, function(user) {\n       *     return user.age > 30;\n       *   }); -> number of users older than 30\n       *   Object.count(usersByName, { name: /^[H-Z]/ });\n       *\n       * @param {Property|searchFn} search\n       * @callbackParam {Property} val\n       * @callbackParam {string} key\n       * @callbackParam {Object} obj\n       * @callbackReturns {boolean} searchFn\n       *\n       ***/\n      'count': function(obj, f) {\n        return objectCount(obj, f);\n      },\n  \n      /***\n       * @method none(search)\n       * @returns Boolean\n       * @short Returns true if none of the properties in the object match `search`.\n       * @extra Implements `enhanced matching`.\n       *\n       * @callback searchFn\n       *\n       *   val  The value of the current iteration.\n       *   key  The key of the current iteration.\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   Object.none({a:1,b:2}, 3); -> true\n       *   Object.none(usersByName, function(user) {\n       *     return user.name == 'Wolverine';\n       *   }); -> probably true\n       *\n       * @param {Property|searchFn} search\n       * @callbackParam {Property} val\n       * @callbackParam {string} key\n       * @callbackParam {Object} obj\n       * @callbackReturns {boolean} searchFn\n       *\n       ***/\n      'none': function(obj, f) {\n        return objectNone(obj, f);\n      },\n  \n      /***\n       * @method sum([map])\n       * @returns Number\n       * @short Sums all properties in the object.\n       * @extra [map] may be a function mapping the value to be summed or a string\n       *        acting as a shortcut.\n       *\n       * @callback mapFn\n       *\n       *   val  The value of the current iteration.\n       *   key  The key of the current iteration.\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   Object.sum({a:35,b:13}); -> 48\n       *   Object.sum(usersByName, function(user) {\n       *     return user.votes;\n       *   }); -> total user votes\n       *\n       * @param {string|mapFn} map\n       * @callbackParam {Property} val\n       * @callbackParam {string} key\n       * @callbackParam {Object} obj\n       * @callbackReturns {NewProperty} mapFn\n       *\n       ***/\n      'sum': function(obj, map) {\n        return sum(obj, map);\n      },\n  \n      /***\n       * @method average([map])\n       * @returns Number\n       * @short Gets the mean average of all properties in the object.\n       * @extra [map] may be a function mapping the value to be averaged or a string\n       *        acting as a shortcut.\n       *\n       * @callback mapFn\n       *\n       *   val  The value of the current iteration.\n       *   key  The key of the current iteration.\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   Object.average({a:35,b:11}); -> 23\n       *   Object.average(usersByName, 'age'); -> average user age\n       *   Object.average(usersByName, 'currencies.usd.balance'); -> USD mean balance\n       *\n       * @param {string|mapFn} map\n       * @callbackParam {Property} val\n       * @callbackParam {string} key\n       * @callbackParam {Object} obj\n       * @callbackReturns {NewProperty} mapFn\n       *\n       ***/\n      'average': function(obj, map) {\n        return average(obj, map);\n      },\n  \n      /***\n       * @method median([map])\n       * @returns Number\n       * @short Gets the median average of all properties in the object.\n       * @extra [map] may be a function mapping the value to be averaged or a string\n       *        acting as a shortcut.\n       *\n       * @callback mapFn\n       *\n       *   val  The value of the current iteration.\n       *   key  The key of the current iteration.\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   Object.median({a:1,b:2,c:2}) -> 2\n       *   Object.median(usersByName, 'age'); -> median user age\n       *   Object.median(usersByName, 'currencies.usd.balance'); -> USD median balance\n       *\n       * @param {string|mapFn} map\n       * @callbackParam {Property} val\n       * @callbackParam {string} key\n       * @callbackParam {Object} obj\n       * @callbackReturns {NewProperty} mapFn\n       *\n       ***/\n      'median': function(obj, map) {\n        return median(obj, map);\n      },\n  \n      /***\n       * @method min([all] = false, [map])\n       * @returns Mixed\n       * @short Returns the key of the property in the object with the lowest value.\n       * @extra If [all] is true, will return an object with all properties in the\n       *        object with the lowest value. [map] may be passed in place of [all]\n       *        and is a function mapping the value to be checked or a string acting\n       *        as a shortcut.\n       *\n       * @callback mapFn\n       *\n       *   val  The value of the current iteration.\n       *   key  The key of the current iteration.\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   Object.min({a:1,b:2,c:3})                    -> 'a'\n       *   Object.min({a:'aaa',b:'bb',c:'c'}, 'length') -> 'c'\n       *   Object.min({a:1,b:1,c:3}, true)              -> {a:1,b:1}\n       *\n       * @signature min([map])\n       * @param {string|mapFn} map\n       * @param {boolean} [all]\n       * @callbackParam {Property} val\n       * @callbackParam {string} key\n       * @callbackParam {Object} obj\n       * @callbackReturns {NewProperty} mapFn\n       *\n       ***/\n      'min': function(obj, all, map) {\n        return getMinOrMax(obj, all, map, false, true);\n      },\n  \n      /***\n       * @method max([all] = false, [map])\n       * @returns Mixed\n       * @short Returns the key of the property in the object with the highest value.\n       * @extra If [all] is true, will return an object with all properties in the\n       *        object with the highest value. [map] may be passed in place of [all]\n       *        and is a function mapping the value to be checked or a string acting\n       *        as a shortcut.\n       *\n       * @callback mapFn\n       *\n       *   val  The value of the current iteration.\n       *   key  The key of the current iteration.\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   Object.max({a:1,b:2,c:3})                    -> 'c'\n       *   Object.max({a:'aaa',b:'bb',c:'c'}, 'length') -> 'a'\n       *   Object.max({a:1,b:3,c:3}, true)              -> {b:3,c:3}\n       *\n       * @signature max([map])\n       * @param {string|mapFn} map\n       * @param {boolean} [all]\n       * @callbackParam {Property} val\n       * @callbackParam {string} key\n       * @callbackParam {Object} obj\n       * @callbackReturns {NewProperty} mapFn\n       *\n       ***/\n      'max': function(obj, all, map) {\n        return getMinOrMax(obj, all, map, true, true);\n      },\n  \n      /***\n       * @method least([all] = false, [map])\n       * @returns Mixed\n       * @short Returns the key of the property in the object with the least commonly\n       *        occuring value.\n       * @extra If [all] is true, will return an object with all properties in the\n       *        object with the least common value. [map] may be passed in place of\n       *        [all] and is a function mapping the value to be checked or a string\n       *        acting as a shortcut.\n       *\n       * @callback mapFn\n       *\n       *   val  The value of the current iteration.\n       *   key  The key of the current iteration.\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   Object.least({a:1,b:3,c:3})                   -> 'a'\n       *   Object.least({a:'aa',b:'bb',c:'c'}, 'length') -> 'c'\n       *   Object.least({a:1,b:3,c:3}, true)             -> {a:1}\n       *\n       * @signature least([map])\n       * @param {string|mapFn} map\n       * @param {boolean} [all]\n       * @callbackParam {Property} val\n       * @callbackParam {string} key\n       * @callbackParam {Object} obj\n       * @callbackReturns {NewProperty} mapFn\n       *\n       ***/\n      'least': function(obj, all, map) {\n        return getLeastOrMost(obj, all, map, false, true);\n      },\n  \n      /***\n       * @method most([all] = false, [map])\n       * @returns Mixed\n       * @short Returns the key of the property in the object with the most commonly\n       *        occuring value.\n       * @extra If [all] is true, will return an object with all properties in the\n       *        object with the most common value. [map] may be passed in place of\n       *        [all] and is a function mapping the value to be checked or a string\n       *        acting as a shortcut.\n       *\n       * @callback mapFn\n       *\n       *   val  The value of the current iteration.\n       *   key  The key of the current iteration.\n       *   obj  A reference to the object.\n       *\n       * @example\n       *\n       *   Object.most({a:1,b:3,c:3})                   -> 'b'\n       *   Object.most({a:'aa',b:'bb',c:'c'}, 'length') -> 'a'\n       *   Object.most({a:1,b:3,c:3}, true)             -> {b:3,c:3}\n       *\n       * @signature most([map])\n       * @param {string|mapFn} map\n       * @param {boolean} [all]\n       * @callbackParam {Property} val\n       * @callbackParam {string} key\n       * @callbackParam {Object} obj\n       * @callbackReturns {NewProperty} mapFn\n       *\n       ***/\n      'most': function(obj, all, map) {\n        return getLeastOrMost(obj, all, map, true, true);\n      }\n  \n    });\n  \n  \n    buildFromIndexMethods();\n  \n    /***\n     * @module Number\n     * @description Number formatting, precision rounding, Math aliases, and more.\n     *\n     ***/\n  \n  \n    var NUMBER_OPTIONS = {\n      'decimal': HALF_WIDTH_PERIOD,\n      'thousands': HALF_WIDTH_COMMA\n    };\n  \n    // Abbreviation Units\n    var BASIC_UNITS         = '|kmbt',\n        MEMORY_UNITS        = '|KMGTPE',\n        MEMORY_BINARY_UNITS = '|,Ki,Mi,Gi,Ti,Pi,Ei',\n        METRIC_UNITS_SHORT  = 'nμm|k',\n        METRIC_UNITS_FULL   = 'yzafpnμm|KMGTPEZY';\n  \n  \n    /***\n     * @method getOption(name)\n     * @returns Mixed\n     * @accessor\n     * @short Gets an option used interally by Number.\n     * @example\n     *\n     *   Sugar.Number.getOption('thousands');\n     *\n     * @param {string} name\n     *\n     ***\n     * @method setOption(name, value)\n     * @accessor\n     * @short Sets an option used interally by Number.\n     * @extra If `value` is `null`, the default value will be restored.\n     * @options\n     *\n     *   decimal     A string used as the decimal marker by `format`, `abbr`,\n     *               `metric`, and `bytes`. Default is `.`.\n     *\n     *   thousands   A string used as the thousands marker by `format`, `abbr`,\n     *               `metric`, and `bytes`. Default is `,`.\n     *\n     *\n     * @example\n     *\n     *   Sugar.Number.setOption('decimal', ',');\n     *   Sugar.Number.setOption('thousands', ' ');\n     *\n     * @signature setOption(options)\n     * @param {NumberOptions} options\n     * @param {string} name\n     * @param {any} value\n     * @option {string} decimal\n     * @option {string} thousands\n     *\n     ***/\n    var _numberOptions = defineOptionsAccessor(sugarNumber, NUMBER_OPTIONS);\n  \n  \n    function abbreviateNumber(num, precision, ustr, bytes) {\n      var fixed        = num.toFixed(20),\n          decimalPlace = fixed.search(/\\./),\n          numeralPlace = fixed.search(/[1-9]/),\n          significant  = decimalPlace - numeralPlace,\n          units, unit, mid, i, divisor;\n      if (significant > 0) {\n        significant -= 1;\n      }\n      units = commaSplit(ustr);\n      if (units.length === 1) {\n        units = ustr.split('');\n      }\n      mid = units.indexOf('|');\n      if (mid === -1) {\n        // Skipping the placeholder means the units should start from zero,\n        // otherwise assume they end at zero.\n        mid = units[0] === '_' ? 0 : units.length;\n      }\n      i = max(min(floor(significant / 3), units.length - mid - 1), -mid);\n      unit = units[i + mid];\n      while (unit === '_') {\n        i += i < 0 ? -1 : 1;\n        unit = units[i + mid];\n      }\n      if (unit === '|') {\n        unit = '';\n      }\n      if (significant < -9) {\n        precision = abs(significant) - 9;\n      }\n      divisor = bytes ? pow(2, 10 * i) : pow(10, i * 3);\n      return numberFormat(withPrecision(num / divisor, precision || 0)) + unit;\n    }\n  \n    function numberFormat(num, place) {\n      var result = '', thousands, decimal, fraction, integer, split, str;\n  \n      decimal   = _numberOptions('decimal');\n      thousands = _numberOptions('thousands');\n  \n      if (isNumber(place)) {\n        str = withPrecision(num, place || 0).toFixed(max(place, 0));\n      } else {\n        str = num.toString();\n      }\n  \n      str = str.replace(/^-/, '');\n      split    = periodSplit(str);\n      integer  = split[0];\n      fraction = split[1];\n      if (/e/.test(str)) {\n        result = str;\n      } else {\n        for(var i = integer.length; i > 0; i -= 3) {\n          if (i < integer.length) {\n            result = thousands + result;\n          }\n          result = integer.slice(max(0, i - 3), i) + result;\n        }\n      }\n      if (fraction) {\n        result += decimal + repeatString('0', (place || 0) - fraction.length) + fraction;\n      }\n      return (num < 0 ? '-' : '') + result;\n    }\n  \n    function isInteger(n) {\n      return n % 1 === 0;\n    }\n  \n    function isMultipleOf(n1, n2) {\n      return n1 % n2 === 0;\n    }\n  \n    function createRoundingFunction(fn) {\n      return function(n, precision) {\n        return precision ? withPrecision(n, precision, fn) : fn(n);\n      };\n    }\n  \n    defineStatic(sugarNumber, {\n  \n      /***\n       * @method random([n1], [n2])\n       * @returns Number\n       * @static\n       * @short Returns a random integer from [n1] to [n2] (both inclusive).\n       * @extra If only 1 number is passed, the other will be 0. If none are passed,\n       *        the number will be either 0 or 1.\n       *\n       * @example\n       *\n       *   Number.random(50, 100) -> ex. 85\n       *   Number.random(50)      -> ex. 27\n       *   Number.random()        -> ex. 0\n       *\n       * @param {number} [n1]\n       * @param {number} [n2]\n       *\n       ***/\n      'random': function(n1, n2) {\n        var minNum, maxNum;\n        if (arguments.length == 1) n2 = n1, n1 = 0;\n        minNum = min(n1 || 0, isUndefined(n2) ? 1 : n2);\n        maxNum = max(n1 || 0, isUndefined(n2) ? 1 : n2) + 1;\n        return trunc((Math.random() * (maxNum - minNum)) + minNum);\n      }\n  \n    });\n  \n    defineInstance(sugarNumber, {\n  \n      /***\n       * @method isInteger()\n       * @returns Boolean\n       * @short Returns true if the number has no trailing decimal.\n       *\n       * @example\n       *\n       *   (420).isInteger() -> true\n       *   (4.5).isInteger() -> false\n       *\n       ***/\n      'isInteger': function(n) {\n        return isInteger(n);\n      },\n  \n      /***\n       * @method isOdd()\n       * @returns Boolean\n       * @short Returns true if the number is odd.\n       *\n       * @example\n       *\n       *   (3).isOdd()  -> true\n       *   (18).isOdd() -> false\n       *\n       ***/\n      'isOdd': function(n) {\n        return isInteger(n) && !isMultipleOf(n, 2);\n      },\n  \n      /***\n       * @method isEven()\n       * @returns Boolean\n       * @short Returns true if the number is even.\n       *\n       * @example\n       *\n       *   (6).isEven()  -> true\n       *   (17).isEven() -> false\n       *\n       ***/\n      'isEven': function(n) {\n        return isMultipleOf(n, 2);\n      },\n  \n      /***\n       * @method isMultipleOf(num)\n       * @returns Boolean\n       * @short Returns true if the number is a multiple of `num`.\n       *\n       * @example\n       *\n       *   (6).isMultipleOf(2)  -> true\n       *   (17).isMultipleOf(2) -> false\n       *   (32).isMultipleOf(4) -> true\n       *   (34).isMultipleOf(4) -> false\n       *\n       * @param {number} num\n       *\n       ***/\n      'isMultipleOf': function(n, num) {\n        return isMultipleOf(n, num);\n      },\n  \n      /***\n       * @method log([base] = Math.E)\n       * @returns Number\n       * @short Returns the logarithm of the number with `base`, or the natural\n       *        logarithm of the number if `base` is undefined.\n       *\n       * @example\n       *\n       *   (64).log(2) -> 6\n       *   (9).log(3)  -> 2\n       *   (5).log()   -> 1.6094379124341003\n       *\n       * @param {number} [base]\n       *\n       ***/\n      'log': function(n, base) {\n        return Math.log(n) / (base ? Math.log(base) : 1);\n      },\n  \n      /***\n       * @method abbr([precision] = 0)\n       * @returns String\n       * @short Returns an abbreviated form of the number (\"k\" for thousand, \"m\"\n       *        for million, etc).\n       * @extra [precision] will round to the given precision. `thousands` and\n       *        `decimal` allow custom separators to be used.\n       *\n       * @example\n       *\n       *   (1000).abbr()    -> \"1k\"\n       *   (1000000).abbr() -> \"1m\"\n       *   (1280).abbr(1)   -> \"1.3k\"\n       *\n       * @param {number} [precision]\n       *\n       ***/\n      'abbr': function(n, precision) {\n        return abbreviateNumber(n, precision, BASIC_UNITS);\n      },\n  \n      /***\n       * @method metric([precision] = 0, [units] = \"nμm|k\")\n       * @returns String\n       * @short Returns the number as a string in metric notation.\n       * @extra [precision] will round to the given precision (can be negative).\n       *        [units] is a string that determines both the unit notation and the\n       *        min/max unit allowed. The default is natural notation for common\n       *        units (meters, grams, etc). \"all\" can be passed for [units] and is a\n       *        shortcut to all standard SI units. The token `,` if present separates\n       *        units, otherwise each character is a unit. The token `|` if present\n       *        marks where fractional units end, otherwise no fractional units are\n       *        used. Finally, the token `_` if present is a placeholder for no unit.\n       *\n       * @example\n       *\n       *   (1000).metric()        -> \"1k\"\n       *   (1000000).metric()     -> \"1,000k\"\n       *   (1249).metric(2) + 'g' -> \"1.25kg\"\n       *   (0.025).metric() + 'm' -> \"25mm\"\n       *   (1000000).metric(0, 'nμm|kM') -> \"1M\"\n       *\n       * @param {number} [precision]\n       * @param {string} [units]\n       *\n       ***/\n      'metric': function(n, precision, units) {\n        if (units === 'all') {\n          units = METRIC_UNITS_FULL;\n        } else if (!units) {\n          units = METRIC_UNITS_SHORT;\n        }\n        return abbreviateNumber(n, precision, units);\n      },\n  \n      /***\n       * @method bytes([precision] = 0, [binary] = false, [units] = 'si')\n       * @returns String\n       * @short Returns an abbreviated form of the number, with 'B' on the end for \"bytes\".\n       * @extra [precision] will round to the given precision. If [binary] is `true`,\n       *        powers of 1024 will be used instead of 1000, and units will default\n       *        to the binary units \"KiB\", \"MiB\", etc. Units can be overridden by\n       *        passing \"si\" or \"binary\" for [units], or further customized by\n       *        passing a unit string. See `metric` for more.\n       *\n       * @example\n       *\n       *   (1000).bytes()                 -> \"1KB\"\n       *   (1289).bytes(2)                -> \"1.29KB\"\n       *   (1000).bytes(2, true)          -> \"0.98KiB\"\n       *   (1000).bytes(2, true, 'si')    -> \"0.98KB\"\n       *\n       * @param {number} [precision]\n       * @param {boolean} [binary]\n       * @param {string} [units]\n       *\n       ***/\n      'bytes': function(n, precision, binary, units) {\n        if (units === 'binary' || (!units && binary)) {\n          units = MEMORY_BINARY_UNITS;\n        } else if(units === 'si' || !units) {\n          units = MEMORY_UNITS;\n        }\n        return abbreviateNumber(n, precision, units, binary) + 'B';\n      },\n  \n      /***\n       * @method format([place] = 0)\n       * @returns String\n       * @short Formats the number to a readable string.\n       * @extra If [place] is `undefined`, the place will automatically be determined.\n       *        `thousands` and `decimal` allow custom markers to be used.\n       *\n       * @example\n       *\n       *   (56782).format()    -> '56,782'\n       *   (56782).format(2)   -> '56,782.00'\n       *   (4388.43).format(2) -> '4,388.43'\n       *\n       * @param {number} [place]\n       *\n       ***/\n      'format': function(n, place) {\n        return numberFormat(n, place);\n      },\n  \n      /***\n       * @method hex([pad] = 1)\n       * @returns String\n       * @short Converts the number to hexidecimal.\n       * @extra [pad] will pad the resulting string to that many places.\n       *\n       * @example\n       *\n       *   (255).hex()   -> 'ff';\n       *   (255).hex(4)  -> '00ff';\n       *   (23654).hex() -> '5c66';\n       *\n       * @param {number} [pad]\n       *\n       ***/\n      'hex': function(n, pad) {\n        return padNumber(n, pad || 1, false, 16);\n      },\n  \n      /***\n       * @method times(fn)\n       * @returns Mixed\n       * @short Calls `fn` a number of times equivalent to the number.\n       * @extra Any non-undefined return values of `fn` will be collected and\n       *        returned in an array.\n       *\n       * @callback indexMapFn\n       *\n       *   i   The index of the current iteration.\n       *\n       * @example\n       *\n       *   (8).times(logHello) -> logs \"hello\" 8 times\n       *   (7).times(function(n) {\n       *     return Math.pow(2, n);\n       *   });\n       *\n       * @callbackParam {number} i\n       * @callbackReturns {any} indexMapFn\n       * @param {indexMapFn} fn\n       *\n       ***/\n      'times': function(n, fn) {\n        var arr, result;\n        for(var i = 0; i < n; i++) {\n          result = fn.call(n, i);\n          if (isDefined(result)) {\n            if (!arr) {\n              arr = [];\n            }\n            arr.push(result);\n          }\n        }\n        return arr;\n      },\n  \n      /***\n       * @method chr()\n       * @returns String\n       * @short Returns a string at the code point of the number.\n       *\n       * @example\n       *\n       *   (65).chr() -> \"A\"\n       *   (75).chr() -> \"K\"\n       *\n       ***/\n      'chr': function(n) {\n        return chr(n);\n      },\n  \n      /***\n       * @method pad([place] = 0, [sign] = false, [base] = 10)\n       * @returns String\n       * @short Pads a number with \"0\" to `place`.\n       * @extra [sign] allows you to force the sign as well (+05, etc). [base] can\n       *        change the base for numeral conversion.\n       *\n       * @example\n       *\n       *   (5).pad(2)        -> '05'\n       *   (-5).pad(4)       -> '-0005'\n       *   (82).pad(3, true) -> '+082'\n       *\n       * @param {number} place\n       * @param {boolean} [sign]\n       * @param {number} [base]\n       *\n       ***/\n      'pad': function(n, place, sign, base) {\n        return padNumber(n, place, sign, base);\n      },\n  \n      /***\n       * @method ordinalize()\n       * @returns String\n       * @short Returns an ordinalized English string, i.e. \"1st\", \"2nd\", etc.\n       *\n       * @example\n       *\n       *   (1).ordinalize() -> '1st';\n       *   (2).ordinalize() -> '2nd';\n       *   (8).ordinalize() -> '8th';\n       *\n       ***/\n      'ordinalize': function(n) {\n        var num = abs(n), last = +num.toString().slice(-2);\n        return n + getOrdinalSuffix(last);\n      },\n  \n      /***\n       * @method toNumber()\n       * @returns Number\n       * @short Identity function for compatibilty.\n       *\n       * @example\n       *\n       *   (420).toNumber() -> 420\n       *\n       ***/\n      'toNumber': function(n) {\n        return n.valueOf();\n      },\n  \n      /***\n       * @method round([precision] = 0)\n       * @returns Number\n       * @short Shortcut for `Math.round` that also allows a `precision`.\n       *\n       * @example\n       *\n       *   (3.241).round()  -> 3\n       *   (-3.841).round() -> -4\n       *   (3.241).round(2) -> 3.24\n       *   (3748).round(-2) -> 3800\n       *\n       * @param {number} [precision]\n       *\n       ***/\n      'round': createRoundingFunction(round),\n  \n      /***\n       * @method ceil([precision] = 0)\n       * @returns Number\n       * @short Shortcut for `Math.ceil` that also allows a `precision`.\n       *\n       * @example\n       *\n       *   (3.241).ceil()  -> 4\n       *   (-3.241).ceil() -> -3\n       *   (3.241).ceil(2) -> 3.25\n       *   (3748).ceil(-2) -> 3800\n       *\n       * @param {number} [precision]\n       *\n       ***/\n      'ceil': createRoundingFunction(ceil),\n  \n      /***\n       * @method floor([precision] = 0)\n       * @returns Number\n       * @short Shortcut for `Math.floor` that also allows a `precision`.\n       *\n       * @example\n       *\n       *   (3.241).floor()  -> 3\n       *   (-3.841).floor() -> -4\n       *   (3.241).floor(2) -> 3.24\n       *   (3748).floor(-2) -> 3700\n       *\n       * @param {number} [precision]\n       *\n       ***/\n      'floor': createRoundingFunction(floor)\n  \n    });\n  \n    /***\n     * @method [math]()\n     * @returns Number\n     * @short Math related functions are mapped as shortcuts to numbers and are\n     *        identical. Note that `log` provides some special defaults.\n     *\n     * @set\n     *   abs\n     *   sin\n     *   asin\n     *   cos\n     *   acos\n     *   tan\n     *   atan\n     *   sqrt\n     *   exp\n     *   pow\n     *\n     * @example\n     *\n     *   (3).pow(3) -> 27\n     *   (-3).abs() -> 3\n     *   (1024).sqrt() -> 32\n     *\n     ***/\n    function buildMathAliases() {\n      defineInstanceSimilar(sugarNumber, 'abs pow sin asin cos acos tan atan exp pow sqrt', function(methods, name) {\n        methods[name] = function(n, arg) {\n          // Note that .valueOf() here is only required due to a\n          // very strange bug in iOS7 that only occurs occasionally\n          // in which Math.abs() called on non-primitive numbers\n          // returns a completely different number (Issue #400)\n          return Math[name](n.valueOf(), arg);\n        };\n      });\n    }\n  \n    buildMathAliases();\n  \n    /***\n     * @module Function\n     * @description Lazy, throttled, and memoized functions, delayed functions and\n     *              handling of timers, argument currying.\n     *\n     ***/\n  \n    var _lock     = privatePropertyAccessor('lock');\n    var _timers   = privatePropertyAccessor('timers');\n    var _partial  = privatePropertyAccessor('partial');\n    var _canceled = privatePropertyAccessor('canceled');\n  \n    var createInstanceFromPrototype = Object.create || function(prototype) {\n      var ctor = function() {};\n      ctor.prototype = prototype;\n      return new ctor;\n    };\n  \n    function setDelay(fn, ms, after, scope, args) {\n      // Delay of infinity is never called of course...\n      ms = coercePositiveInteger(ms || 0);\n      if (!_timers(fn)) {\n        _timers(fn, []);\n      }\n      // This is a workaround for <= IE8, which apparently has the\n      // ability to call timeouts in the queue on the same tick (ms?)\n      // even if functionally they have already been cleared.\n      _canceled(fn, false);\n      _timers(fn).push(setTimeout(function() {\n        if (!_canceled(fn)) {\n          after.apply(scope, args || []);\n        }\n      }, ms));\n    }\n  \n    function cancelFunction(fn) {\n      var timers = _timers(fn), timer;\n      if (isArray(timers)) {\n        while(timer = timers.shift()) {\n          clearTimeout(timer);\n        }\n      }\n      _canceled(fn, true);\n      return fn;\n    }\n  \n    function createLazyFunction(fn, ms, immediate, limit) {\n      var queue = [], locked = false, execute, rounded, perExecution, result;\n      ms = ms || 1;\n      limit = limit || Infinity;\n      rounded = ceil(ms);\n      perExecution = round(rounded / ms) || 1;\n      execute = function() {\n        var queueLength = queue.length, maxPerRound;\n        if (queueLength == 0) return;\n        // Allow fractions of a millisecond by calling\n        // multiple times per actual timeout execution\n        maxPerRound = max(queueLength - perExecution, 0);\n        while(queueLength > maxPerRound) {\n          // Getting uber-meta here...\n          result = Function.prototype.apply.apply(fn, queue.shift());\n          queueLength--;\n        }\n        setDelay(lazy, rounded, function() {\n          locked = false;\n          execute();\n        });\n      };\n      function lazy() {\n        // If the execution has locked and it's immediate, then\n        // allow 1 less in the queue as 1 call has already taken place.\n        if (queue.length < limit - (locked && immediate ? 1 : 0)) {\n          // Optimized: no leaking arguments\n          var args = []; for(var $i = 0, $len = arguments.length; $i < $len; $i++) args.push(arguments[$i]);\n          queue.push([this, args]);\n        }\n        if (!locked) {\n          locked = true;\n          if (immediate) {\n            execute();\n          } else {\n            setDelay(lazy, rounded, execute);\n          }\n        }\n        // Return the memoized result\n        return result;\n      }\n      return lazy;\n    }\n  \n    // Collecting arguments in an array instead of\n    // passing back the arguments object which will\n    // deopt this function in V8.\n    function collectArguments() {\n      var args = arguments, i = args.length, arr = new Array(i);\n      while (i--) {\n        arr[i] = args[i];\n      }\n      return arr;\n    }\n  \n    function createHashedMemoizeFunction(fn, hashFn, limit) {\n      var map = {}, refs = [], counter = 0;\n      return function() {\n        var hashObj = hashFn.apply(this, arguments);\n        var key = serializeInternal(hashObj, refs);\n        if (hasOwn(map, key)) {\n          return getOwn(map, key);\n        }\n        if (counter === limit) {\n          map = {};\n          refs = [];\n          counter = 0;\n        }\n        counter++;\n        return map[key] = fn.apply(this, arguments);\n      };\n    }\n  \n    defineInstance(sugarFunction, {\n  \n      /***\n       * @method lazy([ms] = 1, [immediate] = false, [limit] = Infinity)\n       * @returns Function\n       * @short Creates a lazy function that, when called repeatedly, will queue\n       *        execution and wait [ms] milliseconds to execute.\n       * @extra If [immediate] is `true`, first execution will happen immediately,\n       *        then lock. If [limit] is a fininte number, calls past [limit] will\n       *        be ignored while execution is locked. Compare this to `throttle`,\n       *        which will execute only once per [ms] milliseconds. Note that [ms]\n       *        can also be a fraction. Calling `cancel` on a lazy function will\n       *        clear the entire queue.\n       *\n       * @example\n       *\n       *   var fn = logHello.lazy(250);\n       *   runTenTimes(fn); -> Logs 10 times each time 250ms later\n       *\n       *   var fn = logHello.lazy(250, false, 5);\n       *   runTenTimes(fn); -> Logs 5 times each time 250ms later\n       *\n       * @param {number} [ms]\n       * @param {number} [limit]\n       * @param {boolean} [immediate]\n       *\n       ***/\n      'lazy': function(fn, ms, immediate, limit) {\n        return createLazyFunction(fn, ms, immediate, limit);\n      },\n  \n      /***\n       * @method throttle([ms] = 1)\n       * @returns Function\n       * @short Creates a \"throttled\" version of the function that will only be\n       *        executed once per `ms` milliseconds.\n       * @extra This is functionally equivalent to calling `lazy` with a [limit] of\n       *        `1` and [immediate] as `true`. `throttle` is appropriate when you\n       *        want to make sure a function is only executed at most once for a\n       *        given duration.\n       *\n       * @example\n       *\n       *   var fn = logHello.throttle(50);\n       *   runTenTimes(fn);\n       *\n       * @param {number} [ms]\n       *\n       ***/\n      'throttle': function(fn, ms) {\n        return createLazyFunction(fn, ms, true, 1);\n      },\n  \n      /***\n       * @method debounce([ms] = 1)\n       * @returns Function\n       * @short Creates a \"debounced\" function that postpones its execution until\n       *        after `ms` milliseconds have passed.\n       * @extra This method is useful to execute a function after things have\n       *        \"settled down\". A good example of this is when a user tabs quickly\n       *        through form fields, execution of a heavy operation should happen\n       *        after a few milliseconds when they have \"settled\" on a field.\n       *\n       * @example\n       *\n       *   var fn = logHello.debounce(250)\n       *   runTenTimes(fn); -> called once 250ms later\n       *\n       * @param {number} [ms]\n       *\n       ***/\n      'debounce': function(fn, ms) {\n        function debounced() {\n          // Optimized: no leaking arguments\n          var args = []; for(var $i = 0, $len = arguments.length; $i < $len; $i++) args.push(arguments[$i]);\n          cancelFunction(debounced);\n          setDelay(debounced, ms, fn, this, args);\n        }\n        return debounced;\n      },\n  \n      /***\n       * @method cancel()\n       * @returns Function\n       * @short Cancels a delayed function scheduled to be run.\n       * @extra `delay`, `lazy`, `throttle`, and `debounce` can all set delays.\n       *\n       * @example\n       *\n       *   logHello.delay(500).cancel() -> never logs\n       *\n       ***/\n      'cancel': function(fn) {\n        return cancelFunction(fn);\n      },\n  \n      /***\n       * @method after(n)\n       * @returns Function\n       * @short Creates a function that will execute after `n` calls.\n       * @extra `after` is useful for running a final callback after a specific\n       *        number of operations, often when the order in which the operations\n       *        will complete is unknown. The created function will be passed an\n       *        array of the arguments that it has collected from each after `n`.\n       *        Note that the function will execute on every call after `n`.\n       *        Use `once` in conjunction with this method to prevent being\n       *        triggered by subsequent calls.\n       *\n       * @example\n       *\n       *   var fn = logHello.after(5);\n       *   runTenTimes(fn); -> logs 6 times\n       *\n       *   var fn = logHello.once().after(5)\n       *   runTenTimes(fn); -> logs once\n       *\n       * @param {number} [n]\n       *\n       ***/\n      'after': function(fn, num) {\n        var count = 0, collectedArgs = [];\n        num = coercePositiveInteger(num);\n        return function() {\n          // Optimized: no leaking arguments\n          var args = []; for(var $i = 0, $len = arguments.length; $i < $len; $i++) args.push(arguments[$i]);\n          collectedArgs.push(args);\n          count++;\n          if (count >= num) {\n            return fn.call(this, collectedArgs);\n          }\n        };\n      },\n  \n      /***\n       * @method once()\n       * @returns Function\n       * @short Creates a function that will execute only once and store the result.\n       * @extra `once` is useful for creating functions that will cache the result\n       *        of an expensive operation and use it on subsequent calls. Also it\n       *        can be useful for creating initialization functions that only need\n       *        to be run once.\n       *\n       * @example\n       *\n       *   var fn = logHello.once();\n       *   runTenTimes(fn); -> logs once\n       *\n       ***/\n      'once': function(fn) {\n        var called = false, val;\n        return function() {\n          if (called) {\n            return val;\n          }\n          called = true;\n          return val = fn.apply(this, arguments);\n        };\n      },\n  \n      /***\n       * @method memoize([hashFn], [limit])\n       * @returns Function\n       * @short Creates a function that will memoize results for unique calls.\n       * @extra `memoize` can be thought of as a more powerful `once`. Where `once`\n       *        will only call a function once ever, memoized functions will be\n       *        called once per unique call. A \"unique call\" is determined by the\n       *        return value of [hashFn], which is passed the arguments of each call.\n       *        If [hashFn] is undefined, it will deeply serialize all arguments,\n       *        such that any different argument signature will result in a unique\n       *        call. [hashFn] may be a string (allows `deep properties`) that acts\n       *        as a shortcut to return a property of the first argument passed.\n       *        [limit] sets an upper limit on memoized results. The default is no\n       *        limit, meaning that unique calls will continue to memoize results.\n       *        For most use cases this is fine, however [limit] is useful for more\n       *        persistent (often server-side) applications for whom memory leaks\n       *        are a concern.\n       *\n       * @example\n       *\n       *   var fn = logHello.memoize();\n       *   fn(1); fn(1); fn(2); -> logs twice, memoizing once\n       *\n       *   var fn = calculateUserBalance.memoize('id');\n       *   fn(Harry); fn(Mark); fn(Mark); -> logs twice, memoizing once\n       *\n       * @param {string|Function} [hashFn]\n       * @param {number} [limit]\n       *\n       ***/\n      'memoize': function(fn, arg1, arg2) {\n        var hashFn, limit, prop;\n        if (isNumber(arg1)) {\n          limit = arg1;\n        } else {\n          hashFn = arg1;\n          limit  = arg2;\n        }\n        if (isString(hashFn)) {\n          prop = hashFn;\n          hashFn = function(obj) {\n            return deepGetProperty(obj, prop);\n          };\n        } else if (!hashFn) {\n          hashFn = collectArguments;\n        }\n        return createHashedMemoizeFunction(fn, hashFn, limit);\n      },\n  \n      /***\n       * @method lock([n])\n       * @returns Function\n       * @short Locks the number of arguments accepted by the function.\n       * @extra If not passed, [n] will be the length of the function. This method\n       *        can be called on functions created by `partial`, in which case it\n       *        will lock the total arguments during execution.\n       *\n       * @example\n       *\n       *   logArgs.lock(2)(1,2,3)      -> logs 1,2\n       *\n       * @param {number} [n]\n       *\n       ***/\n      'lock': function(fn, n) {\n        var lockedFn;\n        if (_partial(fn)) {\n          _lock(fn, isNumber(n) ? n : null);\n          return fn;\n        }\n        lockedFn = function() {\n          arguments.length = min(_lock(lockedFn), arguments.length);\n          return fn.apply(this, arguments);\n        };\n        _lock(lockedFn, isNumber(n) ? n : fn.length);\n        return lockedFn;\n      }\n  \n    });\n  \n    defineInstanceWithArguments(sugarFunction, {\n  \n      /***\n       * @method partial([arg1], [arg2], ...)\n       * @returns Function\n       * @short Returns a new version of the function which has part of its arguments\n       *        pre-emptively filled in, also known as \"currying\".\n       * @extra `undefined` can be passed as any argument, and is a placeholder that\n       *        will be replaced with arguments passed when the function is executed.\n       *        This allows currying of arguments even when they occur toward the end\n       *        of an argument list (the example demonstrates this more clearly).\n       *\n       * @example\n       *\n       *   logArgs.partial(undefined, 'b')('a') -> logs a, b\n       *\n       * @param {any} [arg1]\n       * @param {any} [arg2]\n       *\n       ***/\n      'partial': function(fn, curriedArgs) {\n        var curriedLen = curriedArgs.length;\n        var partialFn = function() {\n          var argIndex = 0, applyArgs = [], self = this, lock = _lock(partialFn), result, i;\n          for (i = 0; i < curriedLen; i++) {\n            var arg = curriedArgs[i];\n            if (isDefined(arg)) {\n              applyArgs[i] = arg;\n            } else {\n              applyArgs[i] = arguments[argIndex++];\n            }\n          }\n          for (i = argIndex; i < arguments.length; i++) {\n            applyArgs.push(arguments[i]);\n          }\n          if (lock === null) {\n            lock = curriedLen;\n          }\n          if (isNumber(lock)) {\n            applyArgs.length = min(applyArgs.length, lock);\n          }\n          // If the bound \"this\" object is an instance of the partialed\n          // function, then \"new\" was used, so preserve the prototype\n          // so that constructor functions can also be partialed.\n          if (self instanceof partialFn) {\n            self = createInstanceFromPrototype(fn.prototype);\n            result = fn.apply(self, applyArgs);\n            // An explicit return value is allowed from constructors\n            // as long as they are of \"object\" type, so return the\n            // correct result here accordingly.\n            return isObjectType(result) ? result : self;\n          }\n          return fn.apply(self, applyArgs);\n        };\n        _partial(partialFn, true);\n        return partialFn;\n      },\n  \n      /***\n       * @method delay([ms] = 1, [arg1], [arg2], ...)\n       * @returns Function\n       * @short Executes the function after `ms` milliseconds.\n       * @extra Returns a reference to itself. `delay` is also a way to execute non-\n       *        blocking operations that will wait until the CPU is free. Delayed\n       *        functions can be canceled using the `cancel` method. Can also curry\n       *        arguments passed in after `ms`.\n       *\n       * @example\n       *\n       *   logHello.delay(500)     -> logs after 500ms\n       *   logArgs.delay(500, 'a') -> logs \"a\" after 500ms\n       *\n       * @param {number} [ms]\n       * @param {any} [arg1]\n       * @param {any} [arg2]\n       *\n       ***/\n      'delay': function(fn, ms, args) {\n        setDelay(fn, ms, fn, fn, args);\n        return fn;\n      },\n  \n      /***\n       * @method every([ms] = 1, [arg1], [arg2], ...)\n       * @returns Function\n       * @short Executes the function every `ms` milliseconds.\n       * @extra Returns a reference to itself. `every` uses `setTimeout`, which\n       *        means that you are guaranteed a period of idle time equal to [ms]\n       *        after execution has finished. Compare this to `setInterval` which\n       *        will try to run a function every [ms], even when execution itself\n       *        takes up a portion of that time. In most cases avoiding `setInterval`\n       *        is better as calls won't \"back up\" when the CPU is under strain,\n       *        however this also means that calls are less likely to happen at\n       *        exact intervals of [ms], so the use case here should be considered.\n       *        Additionally, `every` can curry arguments passed in after [ms], and\n       *        also be canceled with `cancel`.\n       *\n       * @example\n       *\n       *   logHello.every(1000)        -> logs every second\n       *   logArgs.every(1000, 'Hola') -> logs 'hola' every second\n       *\n       * @param {number} [ms]\n       * @param {any} [arg1]\n       * @param {any} [arg2]\n       *\n       ***/\n      'every': function(fn, ms, args) {\n        function execute () {\n          // Set the delay first here, so that cancel\n          // can be called within the executing function.\n          setDelay(fn, ms, execute);\n          fn.apply(fn, args);\n        }\n        setDelay(fn, ms, execute);\n        return fn;\n      }\n  \n    });\n  \n    /***\n     * @module RegExp\n     * @description RegExp escaping and flag manipulation.\n     *\n     * Note here that methods on the RegExp class like .exec and .test will fail in\n     * the current version of SpiderMonkey being used by CouchDB when using\n     * shorthand regex notation like /foo/. This is the reason for the intermixed\n     * use of shorthand and compiled regexes here. If you're using JS in CouchDB, it\n     * is safer to ALWAYS compile your regexes from a string.\n     *\n     ***/\n  \n    defineStatic(sugarRegExp, {\n  \n      /***\n       * @method escape([str] = '')\n       * @returns String\n       * @static\n       * @short Escapes all RegExp tokens in a string.\n       *\n       * @example\n       *\n       *   RegExp.escape('really?')      -> 'really\\?'\n       *   RegExp.escape('yes.')         -> 'yes\\.'\n       *   RegExp.escape('(not really)') -> '\\(not really\\)'\n       *\n       * @param {string} str\n       *\n       ***/\n      'escape': function(str) {\n        return escapeRegExp(str);\n      }\n  \n    });\n  \n    defineInstance(sugarRegExp, {\n  \n      /***\n       * @method getFlags()\n       * @returns String\n       * @short Returns the flags of the regex as a string.\n       *\n       * @example\n       *\n       *   /texty/gim.getFlags() -> 'gim'\n       *\n       ***/\n      'getFlags': function(r) {\n        return getRegExpFlags(r);\n      },\n  \n      /***\n       * @method setFlags(flags)\n       * @returns RegExp\n       * @short Creates a copy of the regex with `flags` set.\n       *\n       * @example\n       *\n       *   /texty/.setFlags('gim') -> now has global, ignoreCase, and multiline set\n       *\n       * @param {string} flags\n       *\n       ***/\n      'setFlags': function(r, flags) {\n        return RegExp(r.source, flags);\n      },\n  \n      /***\n       * @method addFlags(flags)\n       * @returns RegExp\n       * @short Creates a copy of the regex with `flags` added.\n       *\n       * @example\n       *\n       *   /texty/.addFlags('g')  -> /texty/g\n       *   /texty/.addFlags('im') -> /texty/im\n       *\n       * @param {string} flags\n       *\n       ***/\n      'addFlags': function(r, flags) {\n        return RegExp(r.source, getRegExpFlags(r, flags));\n      },\n  \n      /***\n       * @method removeFlags(flags)\n       * @returns RegExp\n       * @short Creates a copy of the regex with `flags` removed.\n       *\n       * @example\n       *\n       *   /texty/gim.removeFlags('g')  -> /texty/im\n       *   /texty/gim.removeFlags('im') -> /texty/g\n       *\n       * @param {string} flags\n       *\n       ***/\n      'removeFlags': function(r, flags) {\n        var reg = allCharsReg(flags);\n        return RegExp(r.source, getRegExpFlags(r).replace(reg, ''));\n      }\n  \n    });\n  \n    /***\n     * @module Range\n     * @description Date, Number, and String ranges that can be manipulated and compared,\n     *              or enumerate over specific points within the range.\n     *\n     ***/\n  \n    var DURATION_UNITS = 'year|month|week|day|hour|minute|second|millisecond';\n    var DURATION_REG   = RegExp('(\\\\d+)?\\\\s*('+ DURATION_UNITS +')s?', 'i');\n  \n    var MULTIPLIERS = {\n      'Hours': 60 * 60 * 1000,\n      'Minutes': 60 * 1000,\n      'Seconds': 1000,\n      'Milliseconds': 1\n    };\n  \n    var PrimitiveRangeConstructor = function(start, end) {\n      return new Range(start, end);\n    };\n  \n    function Range(start, end) {\n      this.start = cloneRangeMember(start);\n      this.end   = cloneRangeMember(end);\n    }\n  \n    function getRangeMemberNumericValue(m) {\n      return isString(m) ? m.charCodeAt(0) : m;\n    }\n  \n    function getRangeMemberPrimitiveValue(m) {\n      if (m == null) return m;\n      return isDate(m) ? m.getTime() : m.valueOf();\n    }\n  \n    function getPrecision(n) {\n      var split = periodSplit(n.toString());\n      return split[1] ? split[1].length : 0;\n    }\n  \n    function getGreaterPrecision(n1, n2) {\n      return max(getPrecision(n1), getPrecision(n2));\n    }\n  \n    function cloneRangeMember(m) {\n      if (isDate(m)) {\n        return new Date(m.getTime());\n      } else {\n        return getRangeMemberPrimitiveValue(m);\n      }\n    }\n  \n    function isValidRangeMember(m) {\n      var val = getRangeMemberPrimitiveValue(m);\n      return (!!val || val === 0) && valueIsNotInfinite(m);\n    }\n  \n    function valueIsNotInfinite(m) {\n      return m !== -Infinity && m !== Infinity;\n    }\n  \n    function rangeIsValid(range) {\n      return isValidRangeMember(range.start) &&\n             isValidRangeMember(range.end) &&\n             typeof range.start === typeof range.end;\n    }\n  \n    function rangeEvery(range, step, countOnly, fn) {\n      var increment,\n          precision,\n          dio,\n          unit,\n          start   = range.start,\n          end     = range.end,\n          inverse = end < start,\n          current = start,\n          index   = 0,\n          result  = [];\n  \n      if (!rangeIsValid(range)) {\n        return countOnly ? NaN : [];\n      }\n      if (isFunction(step)) {\n        fn = step;\n        step = null;\n      }\n      step = step || 1;\n      if (isNumber(start)) {\n        precision = getGreaterPrecision(start, step);\n        increment = function() {\n          return incrementNumber(current, step, precision);\n        };\n      } else if (isString(start)) {\n        increment = function() {\n          return incrementString(current, step);\n        };\n      } else if (isDate(start)) {\n        dio  = getDateIncrementObject(step);\n        step = dio[0];\n        unit = dio[1];\n        increment = function() {\n          return incrementDate(current, step, unit);\n        };\n      }\n      // Avoiding infinite loops\n      if (inverse && step > 0) {\n        step *= -1;\n      }\n      while(inverse ? current >= end : current <= end) {\n        if (!countOnly) {\n          result.push(current);\n        }\n        if (fn) {\n          fn(current, index, range);\n        }\n        current = increment();\n        index++;\n      }\n      return countOnly ? index - 1 : result;\n    }\n  \n    function getDateIncrementObject(amt) {\n      var match, val, unit;\n      if (isNumber(amt)) {\n        return [amt, 'Milliseconds'];\n      }\n      match = amt.match(DURATION_REG);\n      val = +match[1] || 1;\n      unit = simpleCapitalize(match[2].toLowerCase());\n      if (unit.match(/hour|minute|second/i)) {\n        unit += 's';\n      } else if (unit === 'Year') {\n        unit = 'FullYear';\n      } else if (unit === 'Week') {\n        unit = 'Date';\n        val *= 7;\n      } else if (unit === 'Day') {\n        unit = 'Date';\n      }\n      return [val, unit];\n    }\n  \n    function incrementDate(src, amount, unit) {\n      var mult = MULTIPLIERS[unit], d;\n      if (mult) {\n        d = new Date(src.getTime() + (amount * mult));\n      } else {\n        d = new Date(src);\n        callDateSet(d, unit, callDateGet(src, unit) + amount);\n      }\n      return d;\n    }\n  \n    function incrementString(current, amount) {\n      return chr(current.charCodeAt(0) + amount);\n    }\n  \n    function incrementNumber(current, amount, precision) {\n      return withPrecision(current + amount, precision);\n    }\n  \n    function rangeClamp(range, obj) {\n      var clamped,\n          start = range.start,\n          end = range.end,\n          min = end < start ? end : start,\n          max = start > end ? start : end;\n      if (obj < min) {\n        clamped = min;\n      } else if (obj > max) {\n        clamped = max;\n      } else {\n        clamped = obj;\n      }\n      return cloneRangeMember(clamped);\n    }\n  \n    defineOnPrototype(Range, {\n  \n      /***\n       * @method toString()\n       * @returns String\n       * @short Returns a string representation of the range.\n       *\n       * @example\n       *\n       *   Number.range(1, 5).toString() -> 1..5\n       *   janToMay.toString()           -> January 1, xxxx..May 1, xxxx\n       *\n       ***/\n      'toString': function() {\n        return rangeIsValid(this) ? this.start + '..' + this.end : 'Invalid Range';\n      },\n  \n      /***\n       * @method isValid()\n       * @returns Boolean\n       * @short Returns true if the range is valid, false otherwise.\n       *\n       * @example\n       *\n       *   janToMay.isValid() -> true\n       *   Number.range(NaN, NaN).isValid()                           -> false\n       *\n       ***/\n      'isValid': function() {\n        return rangeIsValid(this);\n      },\n  \n      /***\n       * @method span()\n       * @returns Number\n       * @short Returns the span of the range. If the range is a date range, the\n       *        value is in milliseconds.\n       * @extra The span includes both the start and the end.\n       *\n       * @example\n       *\n       *   Number.range(5, 10).span()  -> 6\n       *   Number.range(40, 25).span() -> 16\n       *   janToMay.span()             -> 10368000001 (or more depending on leap year)\n       *\n       ***/\n      'span': function() {\n        var n = getRangeMemberNumericValue(this.end) - getRangeMemberNumericValue(this.start);\n        return rangeIsValid(this) ? abs(n) + 1 : NaN;\n      },\n  \n      /***\n       * @method contains(el)\n       * @returns Boolean\n       * @short Returns true if `el` is contained inside the range. `el` may be a\n       *        value or another range.\n       *\n       * @example\n       *\n       *   Number.range(5, 10).contains(7)         -> true\n       *   Number.range(5, 10).contains(2)         -> false\n       *   janToMay.contains(mar)                  -> true\n       *   janToMay.contains(marToAug)             -> false\n       *   janToMay.contains(febToApr)             -> true\n       *\n       * @param {RangeElement} el\n       *\n       ***/\n      'contains': function(el) {\n        if (el == null) return false;\n        if (el.start && el.end) {\n          return el.start >= this.start && el.start <= this.end &&\n                 el.end   >= this.start && el.end   <= this.end;\n        } else {\n          return el >= this.start && el <= this.end;\n        }\n      },\n  \n      /***\n       * @method every(amount, [fn])\n       * @returns Array\n       * @short Iterates through the range by `amount`, calling [fn] for each step.\n       * @extra Returns an array of each increment visited. For date ranges,\n       *        `amount` can also be a string like `\"2 days\"`. This will step\n       *        through the range by incrementing a date object by that specific\n       *        unit, and so is generally preferable for vague units such as\n       *        `\"2 months\"`.\n       *\n       * @callback rangeEveryFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   r    A reference to the range.\n       *\n       * @example\n       *\n       *   Number.range(2, 8).every(2) -> [2,4,6,8]\n       *   janToMay.every('2 months')  -> [Jan 1, Mar 1, May 1]\n       *\n       *   sepToOct.every('week', function() {\n       *     // Will be called every week from September to October\n       *   })\n       *\n       * @param {string|number} amount\n       * @param {rangeEveryFn} [fn]\n       * @callbackParam {RangeElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Range} r\n       *\n       ***/\n      'every': function(amount, fn) {\n        return rangeEvery(this, amount, false, fn);\n      },\n  \n      /***\n       * @method toArray()\n       * @returns Array\n       * @short Creates an array from the range.\n       * @extra If the range is a date range, every millisecond between the start\n       *        and end dates will be returned. To control this use `every` instead.\n       *\n       * @example\n       *\n       *   Number.range(1, 5).toArray() -> [1,2,3,4,5]\n       *   Date.range('1 millisecond ago', 'now').toArray() -> [1ms ago, now]\n       *\n       ***/\n      'toArray': function() {\n        return rangeEvery(this);\n      },\n  \n      /***\n       * @method union(range)\n       * @returns Range\n       * @short Returns a new range with the earliest starting point as its start,\n       *        and the latest ending point as its end. If the two ranges do not\n       *        intersect this will effectively remove the \"gap\" between them.\n       *\n       * @example\n       *\n       *   oneToTen.union(fiveToTwenty) -> 1..20\n       *   janToMay.union(marToAug)     -> Jan 1, xxxx..Aug 1, xxxx\n       *\n       * @param {Range} range\n       *\n       ***/\n      'union': function(range) {\n        return new Range(\n          this.start < range.start ? this.start : range.start,\n          this.end   > range.end   ? this.end   : range.end\n        );\n      },\n  \n      /***\n       * @method intersect(range)\n       * @returns Range\n       * @short Returns a new range with the latest starting point as its start,\n       *        and the earliest ending point as its end. If the two ranges do not\n       *        intersect this will effectively produce an invalid range.\n       *\n       * @example\n       *\n       *   oneToTen.intersect(fiveToTwenty) -> 5..10\n       *   janToMay.intersect(marToAug)     -> Mar 1, xxxx..May 1, xxxx\n       *\n       * @param {Range} range\n       *\n       ***/\n      'intersect': function(range) {\n        if (range.start > this.end || range.end < this.start) {\n          return new Range(NaN, NaN);\n        }\n        return new Range(\n          this.start > range.start ? this.start : range.start,\n          this.end   < range.end   ? this.end   : range.end\n        );\n      },\n  \n      /***\n       * @method clone()\n       * @returns Range\n       * @short Clones the range.\n       * @extra Members of the range will also be cloned.\n       *\n       * @example\n       *\n       *   Number.range(1, 5).clone() -> Returns a copy of the range.\n       *\n       ***/\n      'clone': function() {\n        return new Range(this.start, this.end);\n      },\n  \n      /***\n       * @method clamp(el)\n       * @returns Mixed\n       * @short Clamps `el` to be within the range if it falls outside.\n       *\n       * @example\n       *\n       *   Number.range(1, 5).clamp(8)     -> 5\n       *   janToMay.clamp(aug) -> May 1, xxxx\n       *\n       * @param {RangeElement} el\n       *\n       ***/\n      'clamp': function(el) {\n        return rangeClamp(this, el);\n      }\n  \n    });\n  \n  \n    /*** @namespace Number ***/\n  \n    defineStatic(sugarNumber, {\n  \n      /***\n       * @method range([start], [end])\n       * @returns Range\n       * @static\n       * @short Creates a new number range between [start] and [end]. See `ranges`\n       *        for more.\n       *\n       * @example\n       *\n       *   Number.range(5, 10)\n       *   Number.range(20, 15)\n       *\n       * @param {number} [start]\n       * @param {number} [end]\n       *\n       ***/\n      'range': PrimitiveRangeConstructor\n  \n    });\n  \n    defineInstance(sugarNumber, {\n  \n      /***\n       * @method upto(num, [step] = 1, [fn])\n       * @returns Array\n       * @short Returns an array containing numbers from the number up to `num`.\n       * @extra Optionally calls [fn] for each number in that array. [step] allows\n       *        multiples other than 1. [fn] can be passed in place of [step].\n       *\n       * @callback rangeEveryFn\n       *\n       *   el   The element of the current iteration.\n       *   i    The index of the current iteration.\n       *   r    A reference to the range.\n       *\n       * @example\n       *\n       *   (2).upto(6) -> [2, 3, 4, 5, 6]\n       *   (2).upto(6, function(n) {\n       *     // This function is called 5 times receiving n as the value.\n       *   });\n       *   (2).upto(8, 2) -> [2, 4, 6, 8]\n       *\n       * @signature upto(num, [fn])\n       * @param {number} num\n       * @param {number} [step]\n       * @param {rangeEveryFn} [fn]\n       * @callbackParam {RangeElement} el\n       * @callbackParam {number} i\n       * @callbackParam {Range} r\n       *\n       ***/\n      'upto': function(n, num, step, fn) {\n        return rangeEvery(new Range(n, num), step, false, fn);\n      },\n  \n      /***\n       * @method clamp([start] = Infinity, [end] = Infinity)\n       * @returns Number\n       * @short Constrains the number so that it falls on or between [start] and\n       *        [end].\n       * @extra This will build a range object that has an equivalent `clamp` method.\n       *\n       * @example\n       *\n       *   (3).clamp(50, 100)  -> 50\n       *   (85).clamp(50, 100) -> 85\n       *\n       * @param {number} [start]\n       * @param {number} [end]\n       *\n       ***/\n      'clamp': function(n, start, end) {\n        return rangeClamp(new Range(start, end), n);\n      },\n  \n      /***\n       * @method cap([max] = Infinity)\n       * @returns Number\n       * @short Constrains the number so that it is no greater than [max].\n       * @extra This will build a range object that has an equivalent `cap` method.\n       *\n       * @example\n       *\n       *   (100).cap(80) -> 80\n       *\n       * @param {number} [max]\n       *\n       ***/\n      'cap': function(n, max) {\n        return rangeClamp(new Range(undefined, max), n);\n      }\n  \n    });\n  \n    /***\n     * @method downto(num, [step] = 1, [fn])\n     * @returns Array\n     * @short Returns an array containing numbers from the number down to `num`.\n     * @extra Optionally calls [fn] for each number in that array. [step] allows\n     *        multiples other than 1. [fn] can be passed in place of [step].\n     *\n     * @callback rangeEveryFn\n     *\n     *   el   The element of the current iteration.\n     *   i    The index of the current iteration.\n     *   r    A reference to the range.\n     *\n     * @example\n     *\n     *   (8).downto(3) -> [8, 7, 6, 5, 4, 3]\n     *   (8).downto(3, function(n) {\n     *     // This function is called 6 times receiving n as the value.\n     *   });\n     *   (8).downto(2, 2) -> [8, 6, 4, 2]\n     *\n     * @signature upto(num, [fn])\n     * @param {number} num\n     * @param {number} [step]\n     * @param {rangeEveryFn} [fn]\n     * @callbackParam {RangeElement} el\n     * @callbackParam {number} i\n     * @callbackParam {Range} r\n     *\n     ***/\n    alias(sugarNumber, 'downto', 'upto');\n  \n  \n    /*** @namespace String ***/\n  \n    defineStatic(sugarString, {\n  \n      /***\n       * @method range([start], [end])\n       * @returns Range\n       * @static\n       * @short Creates a new string range between [start] and [end]. See `ranges`\n       *        for more.\n       *\n       * @example\n       *\n       *   String.range('a', 'z')\n       *   String.range('t', 'm')\n       *\n       * @param {string} [start]\n       * @param {string} [end]\n       *\n       ***/\n      'range': PrimitiveRangeConstructor\n  \n    });\n  \n  \n    /*** @namespace Date ***/\n  \n  \n    var FULL_CAPTURED_DURATION = '((?:\\\\d+)?\\\\s*(?:' + DURATION_UNITS + '))s?';\n  \n    // Duration text formats\n    var RANGE_REG_FROM_TO        = /(?:from)?\\s*(.+)\\s+(?:to|until)\\s+(.+)$/i,\n        RANGE_REG_REAR_DURATION  = RegExp('(.+)\\\\s*for\\\\s*' + FULL_CAPTURED_DURATION, 'i'),\n        RANGE_REG_FRONT_DURATION = RegExp('(?:for)?\\\\s*'+ FULL_CAPTURED_DURATION +'\\\\s*(?:starting)?\\\\s(?:at\\\\s)?(.+)', 'i');\n  \n    var DateRangeConstructor = function(start, end) {\n      if (arguments.length === 1 && isString(start)) {\n        return createDateRangeFromString(start);\n      }\n      return new Range(getDateForRange(start), getDateForRange(end));\n    };\n  \n    function createDateRangeFromString(str) {\n      var match, datetime, duration, dio, start, end;\n      if (sugarDate.get && (match = str.match(RANGE_REG_FROM_TO))) {\n        start = getDateForRange(match[1].replace('from', 'at'));\n        end = sugarDate.get(start, match[2]);\n        return new Range(start, end);\n      }\n      if (match = str.match(RANGE_REG_FRONT_DURATION)) {\n        duration = match[1];\n        datetime = match[2];\n      }\n      if (match = str.match(RANGE_REG_REAR_DURATION)) {\n        datetime = match[1];\n        duration = match[2];\n      }\n      if (datetime && duration) {\n        start = getDateForRange(datetime);\n        dio = getDateIncrementObject(duration);\n        end = incrementDate(start, dio[0], dio[1]);\n      } else {\n        start = str;\n      }\n      return new Range(getDateForRange(start), getDateForRange(end));\n    }\n  \n    function getDateForRange(d) {\n      if (isDate(d)) {\n        return d;\n      } else if (d == null) {\n        return new Date();\n      } else if (sugarDate.create) {\n        return sugarDate.create(d);\n      }\n      return new Date(d);\n    }\n  \n    /***\n     * @method [dateUnit]()\n     * @returns Number\n     * @namespace Range\n     * @short Returns the span of a date range in the given unit.\n     * @extra Higher order units (\"days\" and greater) walk the date to avoid\n     *        discrepancies with ambiguity. Lower order units simply subtract the\n     *        start from the end.\n     *\n     * @set\n     *   milliseconds\n     *   seconds\n     *   minutes\n     *   hours\n     *   days\n     *   weeks\n     *   months\n     *   years\n     *\n     * @example\n     *\n     *   janToMay.months()  -> 4\n     *   janToMay.days()    -> 121\n     *   janToMay.hours()   -> 2904\n     *   janToMay.minutes() -> 220320\n     *\n     ***/\n    function buildDateRangeUnits() {\n      var methods = {};\n      forEach(DURATION_UNITS.split('|'), function(unit, i) {\n        var name = unit + 's', mult, fn;\n        if (i < 4) {\n          fn = function() {\n            return rangeEvery(this, unit, true);\n          };\n        } else {\n          mult = MULTIPLIERS[simpleCapitalize(name)];\n          fn = function() {\n            return trunc((this.end - this.start) / mult);\n          };\n        }\n        methods[name] = fn;\n      });\n      defineOnPrototype(Range, methods);\n    }\n  \n    defineStatic(sugarDate,   {\n  \n      /***\n       * @method range([start], [end])\n       * @returns Range\n       * @namespace Date\n       * @static\n       * @short Creates a new date range between [start] and [end].\n       * @extra Arguments may be either dates or strings which will be forwarded to\n       *        the date constructor (`create` will be used if present in the build).\n       *        If either [start] or [end] are undefined, they will default to the\n       *        current date. This method also accepts an alternate syntax of a\n       *        single string describing the range in natural language. See `ranges`\n       *        for more.\n       *\n       * @example\n       *\n       *   Date.range(jan, may)\n       *   Date.range('today', 'tomorrow')\n       *   Date.range('now', '5 days ago')\n       *   Date.range('last Monday')\n       *   Date.range('Monday to Friday')\n       *   Date.range('tomorrow from 3pm to 5pm')\n       *   Date.range('1 hour starting at 5pm Tuesday')\n       *\n       * @param {string|Date} [start]\n       * @param {string|Date} [end]\n       *\n       ***/\n      'range': DateRangeConstructor\n  \n    });\n  \n    buildDateRangeUnits();\n  \n  }).call(this);"],"names":["Sugar","SUGAR_GLOBAL","STATIC","INSTANCE","PROPERTY_DESCRIPTOR_SUPPORT","Object","defineProperty","defineProperties","globalContext","global","this","hasExports","module","exports","allowObjectPrototype","namespacesByName","namespacesByClassString","obj","prop","descriptor","value","DefaultChainable","getNewChainableClass","createNamespace","name","sugarNamespace","isObject","defineWithOptionCollect","methodName","instance","args","setProperty","arg1","arg2","arg3","type","flags","opts","collectDefineOptions","methods","last","forEachProperty","method","staticMethod","wrapMethodWithArguments","fn","length","a","b","c","d","setMethod","active","extend","extendNative","prototype","defineChainableMethod","source","methodsByName","nativeClass","nativeProto","staticMethods","instanceMethods","arrayOptionExists","field","val","arr","el","i","namespaceIsExcepted","canExtend","target","objectPrototype","hasOwn","mapNativeToChainable","setObjectChainableOnNamespace","toString","startCollect","collectedArgs","push","len","Math","max","arguments","apply","polyfill","override","arg","constructor","raw","wrapped","existing","collision","classToString","disambiguate","TypeError","dcp","proto","methodNames","ownPropertyNames","e","getOwnPropertyNames","internalToString","internalHasOwnProperty","hasOwnProperty","key","call","enumerable","configurable","writable","getOwn","split","isSerializable","isBoolean","isNumber","isString","isDate","isRegExp","isFunction","isArray","isSet","isMap","isError","ENHANCEMENTS_FLAG","NATIVE_TYPES","NO_KEYS_IN_STRING_OBJECTS","PRIVATE_PROP_PREFIX","PROPERTY_RANGE_REG","TRIM_CHARS","STRING_FORMAT_REG","HALF_WIDTH_ZERO","FULL_WIDTH_ZERO","HALF_WIDTH_PERIOD","FULL_WIDTH_PERIOD","HALF_WIDTH_COMMA","OPEN_BRACE","CLOSE_BRACE","sugarObject","sugarArray","Array","sugarDate","Date","sugarString","String","sugarNumber","Number","sugarFunction","Function","sugarRegExp","RegExp","isClass","className","str","wrapNamespace","alias","defineStatic","defineInstance","defineStaticPolyfill","defineInstancePolyfill","defineInstanceAndStatic","defineInstanceWithArguments","defineInstanceSimilar","set","collectSimilarMethods","forEach","spaceSplit","fixArgumentLength","staticFn","defineAccessor","namespace","defineOptionsAccessor","defaults","simpleClone","getOption","options","defineOnPrototype","ctor","assertArgument","exists","assertCallable","coercePositiveInteger","n","isFinite","RangeError","trunc","isDefined","o","undefined","isUndefined","privatePropertyAccessor","privateKey","setChainableConstructor","createFn","getMatcher","f","isPrimitive","reg","test","ms","getTime","isPlainObject","matchers","matched","isObjectType","isEqual","getKeys","keys","deepGetProperty","any","handleDeepProperty","has","fill","fillLast","bs","isLast","nextIsIndex","ns","indexOf","handleArrayIndexRange","end","leading","trailing","match","start","slice","charAt","map","blen","ps","j","plen","periodSplit","isIndex","cbi","assertWritable","getOwnKey","hasToString","hasConstructor","objectProto","simpleRepeat","simpleMerge","coercePrimitiveToObject","forceStringCoercion","chr","stack","aClass","bClass","objectIsEqual","propsEqual","count","valueOf","iterateWithCyclicCheck","cyc","size","setToArray","mapToArray","serializeInternal","refs","result","isRealNaN","Infinity","ref","sortedKeys","next","pop","sort","isArrayIndex","iterateOverSparseArray","fromIndex","loop","index","indexes","fromRight","aLoop","getEntriesForIndexes","find","entryAtIndex","getNormalizedIndex","mapWithShortcuts","context","mapArgs","m","commaSplit","filter","fullWidthNumberReg","fullWidthNumberMap","fullWidthNumbers","ceil","floor","withPrecision","precision","multiplier","pow","abs","round","padNumber","num","place","sign","base","replacement","repeatString","replace","getOrdinalSuffix","stringToNumber","isDecimal","sanitized","parseFloat","parseInt","min","fromCharCode","trim","simpleCapitalize","toUpperCase","createFormatMatcher","bracketMatcher","percentMatcher","precheck","memo","counter","compileMemoized","format","lastIndex","exec","getSubstring","get","token","literal","bKey","pLit","pKey","assertPassesPrecheck","bt","pt","opt","INTERNAL_MEMOIZE_LIMIT","sub","assertNoUnmatched","Inflections","getAcronym","acronyms","allCharsReg","src","getRegExpFlags","add","checkFlag","flag","ignoreCase","multiline","sticky","escapeRegExp","_utc","callDateGet","callDateSet","safe","knownTypes","addKnownType","buildClassCheck","globalObject","ctorStr","buildPrimitiveClassCheck","toLowerCase","t","names","Set","Map","fwp","hwp","hwc","fwn","digit","getCoercedStringSubject","getCoercedSearchString","includes","searchString","pos","startsWith","searchLength","position","substr","endsWith","endPosition","repeat","isNaN","from","findIndex","search","ldmlTokens","strfTokens","dateFormatMatcher","English","localeManager","LOCALE_ARRAY_FIELDS","TIMEZONE_ABBREVIATION_REG","MINUTES","HOURS_INDEX","DAY_INDEX","WEEK_INDEX","MONTH_INDEX","YEAR_INDEX","ISO_FIRST_DAY_OF_WEEK","ISO_FIRST_DAY_OF_WEEK_YEAR","ParsingTokens","yyyy","param","MM","dd","hh","mm","ss","yy","y","yearSign","tzHour","tzMinute","tzSign","ihh","imm","GMT","Z","timestamp","LocalizedParsingTokens","year","requiresSuffix","month","date","hour","requiresSuffixOr","minute","second","requiresNumerals","CoreParsingFormats","time","mdy","CoreOutputFormats","ISO8601","RFC1123","RFC1036","FormatTokensBase","ldml","strf","lowerToken","localeCode","getWeekdayName","getWeekday","allowAlternates","alternate","getMonthName","getMonth","getYear","strfPadding","ldmlPaddedToken","ordinalToken","getDate","getHours","s","setUnitAndLowerToEdge","cloneDate","getTimeDistanceForUnit","DateUnits","getMeridiemToken","getWeekNumber","loc","getFirstDayOfWeek","getFirstDayOfWeekYear","ldmlTwoDigitToken","getWeekYear","strfTwoDigitToken","getUTCOffset","ambiguous","getDaysInMonth","_dateOptions","newDateInternal","getNewDate","clone","dateIsValid","assertDateIsValid","setDate","setWeekday","dow","dir","currentWeekday","offset","ndir","iso","tzOffset","colon","getTimezoneOffset","collectDateArguments","allowDuration","params","walkUnitDown","unit","iterateOverDateUnits","startIndex","endIndex","unitIndex","getLowerUnitIndex","iterateOverDateParams","run","getDateParamKey","advanceDate","reset","updateDate","advanceDateWithArgs","resetTime","moveToBeginningOfWeek","firstDayOfWeek","moveToEndOfWeek","moveToBeginningOfUnit","moveToEndOfUnit","stopIndex","d1","d2","tmp","fwd","setISOWeekNumber","isoWeek","moveToFirstDayOfWeekYear","allowPrevious","firstDayOfWeekYear","week","dateRelative","dRelative","adu","getAdjustedUnit","u","concat","dateFormat","getRelativeFormat","hours","ampm","fullCompareDate","margin","compareDay","weekdayMap","monthMap","compareDate","loMargin","hiMargin","fromUTC","setUTC","p","getExtendedDate","specificity","edge","shift","compareEdges","timezoneShift","comp","createDate","forceClone","createDateWithContext","contextDate","afterCallbacks","relative","weekdayDir","getFormatParams","dif","to","prefer","delta","bool","getTokenValue","cloneDateByFlag","afterDateSet","parseStringDate","compiledFormats","cacheFormat","utc","weekday","setOrdinalWeekday","midday","day","half","setTime","NaN","handleEdge","units","weekdayOfMonth","edgeIndex","unitName","locale","advance","upperUnitIndex","setUpperUnit","setUnit","checkMonth","fraction","lowerUnit","targetMonth","millisecond","getEnglishVariant","v","EnglishLocaleBaseDefinition","arrayToRegAlternates","joined","join","getRegNonCapturing","getArrayWithOffset","getNewLocale","def","Locale","init","monthSuffix","months","weekdays","getNumber","numeralMap","getNumeralValue","lastWasPlace","numeral","isPlace","getOrdinal","ordinalSuffix","convertAdjustedToFormat","getDuration","mult","plural","full","splice","unshift","addFormat","getTokenSrc","suffix","nc","parsingAliases","replaceParsingTokens","tokens","parsingTokens","mod","addRawFormat","buildValueArray","setMap","all","alt","idx","forEachAlternate","suffixes","addFormatSet","allowTime","timeFront","getFormatWithTime","baseFormat","timeBefore","localized","markers","timeMarkers","timeMarkerOptional","ampmFront","numeralUnits","numerals","placeholders","articles","allowsFullWidth","timeSuffixes","modifiers","modifier","mapKey","df","create","getLocale","code","getAllLocales","getAll","getAllLocaleCodes","setLocale","addLocale","removeLocale","remove","rewind","setISOWeek","getISOWeek","beginningOfISOWeek","endOfISOWeek","on","isUTC","isValid","isAfter","isBefore","isBetween","t1","t2","lo","hi","isLeapYear","daysInMonth","relativeTo","is","toISOString","getUTCWeekday","getUTCDay","duration","past","future","parse","timeParse","timeFrontParse","AmericanEnglishDefinition","short","medium","long","stamp","BritishEnglishDefinition","CanadianEnglishDefinition","LazyLoadedLocales","en-US","en-GB","en-AU","en-CA","LocaleManager","locales","addFormats","buildLowercase","buildPadded","padding","buildTwoDigits","buildAlias","buildAlternates","getIdentityFormat","fallback","current","getPadded","caps","after","before","special","together","HTMLToEntityMap","encodeBase64","decodeBase64","base64reg","encodeAscii","decodeAscii","CAPITALIZE_REG","CAMELIZE_REG","HTML_ENTITY_REG","HTML_ESCAPE_REG","HTMLFromEntityMap","lt","gt","amp","nbsp","quot","apos","DOWNCASED_WORDS","HTML_VOID_ELEMENTS","LEFT_TRIM_REG","RIGHT_TRIM_REG","TRUNC_REG","nativeIncludes","stringFormatMatcher","padString","truncateString","ellipsis","len1","len2","truncateOnWord","stringEach","chunks","lastLastIndex","r","chunk","stringCodes","codes","charCodeAt","stringUnderscore","areg","acronym","stringSpacify","stringCapitalize","downcase","stringTitleize","lastHadPunctuation","fullStopPunctuation","human","runRules","word","words","first","hasPunctuation","isFirstOrLast","reverseString","reverse","limit","fromLeft","tagIsVoid","tag","stringReplaceAll","replaceTags","strip","runTagReplacements","fullString","currentIndex","openTagName","openTagAttributes","openTagCount","processTag","tagName","attributes","tagLength","isVoid","content","isClosingTag","isSelfClosing","isOpeningTag","isSameAsCurrent","numberOrIndex","catchEncodingError","at","escapeURL","encodeURIComponent","encodeURI","unescapeURL","decodeURI","decodeURIComponent","escapeHTML","unescapeHTML","hex","stripTags","removeTags","chars","lines","isBlank","isEmpty","insert","removeAll","compact","whitespace","dasherize","underscore","camelize","upper","pre","cap","spacify","titleize","parameterize","separator","truncate","pad","front","back","padLeft","padRight","toNumber","capitalize","trimLeft","trimRight","replaceAll","Buffer","btoa","atob","chr2","chr3","enc1","enc2","enc3","enc4","output","chr1","input","unescape","escape","equivalents","HALF_WIDTH_NINE","FULL_WIDTH_NINE","HAS_CONCAT_BUG","ARRAY_OPTIONS","sortIgnore","sortNatural","sortIgnoreCase","sortOrder","sortCollate","aValue","bValue","aEquiv","bEquiv","tiebreaker","_arrayOptions","sortEquivalents","getCollationReadyString","aChar","getCollationCharacter","bChar","getSortOrderIndex","codeIsNumeral","arrayCreate","arrayClone","arrayConcat","arr1","arr2","arrayAppend","spliceArgs","arrayUnique","arrayIntersectOrSubtract","subtract","construct","item","append","removeAt","unique","flatten","arrayFlatten","level","groupBy","inGroups","divisor","group","inGroupsOf","shuffle","arrayShuffle","x","random","sample","single","sortBy","desc","compareValue","aVal","bVal","cmp","arrayRemove","matcher","exclude","arrayExclude","union","intersect","zip","k","checks","DEEP_QUERY_STRING_REG","NON_DECIMAL_REG","getOwnPropertySymbols","getOwnPropertyDescriptor","isArguments","callee","toQueryString","deep","transform","prefix","collectArrayAsQueryString","qc","sanitizeURIComponent","fullKey","fromQueryStringWithOptions","auto","setQueryProperty","fnValue","mergeWithOptions","objectMerge","resolve","hidden","mergeAll","sources","iterateOverKeys","getFn","resolveByFunction","resolveConflicts","getNewObjectForMerge","sourceVal","targetVal","resolved","goDeep","klass","objectSize","selectFromObject","select","objectIntersectOrSubtract","obj1","obj2","val1","sum","enumerateWithMapping","average","median","middle","getMinOrMax","asObject","pushVal","getReducedMinMaxResult","getLeastOrMost","most","groupKey","minMaxResult","reduce","arrayIndexes","mapped","fromQueryString","merge","addAll","values","invert","multi","tap","reject","enhancedMap","wrapNativeArrayMethod","enhancedMapping","enhancedFind","buildEnhancedMatching","enhancedSome","enhancedEvery","enhancedFilter","enhancedFindIndex","enhancedMatching","wrapper","nativeFn","argsLen","some","every","none","least","objectSome","wrapObjectMatcher","objectFind","objectEvery","sliceArrayFromLeft","clampStartIndex","applyReduce","acc","applyEach","some every","filter find","reduceRight","clamp","baseName","baseFn","applyCallback","sliceArray","clampIndex","getResult","callArgs","argIndex","lastArg","_numberOptions","decimal","thousands","abbreviateNumber","ustr","bytes","mid","fixed","toFixed","significant","numberFormat","integer","isInteger","createRoundingFunction","n1","n2","minNum","maxNum","isOdd","isEven","isMultipleOf","log","abbr","metric","binary","times","ordinalize","_lock","_timers","_partial","_canceled","createInstanceFromPrototype","setDelay","scope","setTimeout","cancelFunction","timer","timers","clearTimeout","createLazyFunction","immediate","execute","rounded","perExecution","queue","locked","lazy","$i","$len","maxPerRound","queueLength","collectArguments","throttle","debounce","debounced","cancel","once","called","memoize","hashFn","lock","lockedFn","partial","curriedArgs","partialFn","applyArgs","self","curriedLen","delay","getFlags","setFlags","addFlags","removeFlags","PrimitiveRangeConstructor","Range","DURATION_UNITS","DURATION_REG","MULTIPLIERS","Hours","Minutes","Seconds","Milliseconds","cloneRangeMember","getRangeMemberNumericValue","getRangeMemberPrimitiveValue","getPrecision","isValidRangeMember","rangeIsValid","range","rangeEvery","step","countOnly","increment","inverse","amount","dio","getDateIncrementObject","incrementDate","amt","rangeClamp","clamped","span","contains","toArray","upto","FULL_CAPTURED_DURATION","RANGE_REG_FROM_TO","RANGE_REG_REAR_DURATION","RANGE_REG_FRONT_DURATION","getDateForRange","datetime"],"mappings":"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"}