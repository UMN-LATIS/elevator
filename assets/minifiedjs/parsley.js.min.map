{"version":3,"sources":["parsley.js"],"names":["$","Validator","options","this","messages","defaultMessage","type","email","url","urlstrict","number","digits","dateIso","alphanum","phone","notnull","notblank","required","regexp","min","max","range","minlength","maxlength","rangelength","mincheck","maxcheck","rangecheck","equalto","init","prototype","constructor","validators","validate","val","length","priority","replace","that","i","regExp","RegExp","test","self","regexpFlag","arrayRange","Number","elem","validateIfUnchanged","remote","result","data","dataType","$element","attr","remoteDatatype","manage","isConstraintValid","message","UI","ulError","remove","listeners","onFieldError","element","constraints","onFieldSuccess","updtConstraint","name","valid","manageValidationResult","handleResponse","response","parseJSON","err","manageErrorMessage","error","ajax","extend","remoteMethod","success","obj","key","customValidators","customMessages","addValidator","addMessage","formatMesssage","args","fn","Error","window","console","warn","ParsleyUI","ParsleyInstance","hash","errorClassHandler","errors","classHandler","isRadioOrCheckbox","ulErrorManagement","ulTemplate","errorsWrapper","addClass","removeError","constraintName","liError","animate","fadeOut","animateDuration","children","removeErrors","addError","constraint","liTemplate","errorElem","append","html","hide","fadeIn","updateError","reset","validatedOnce","removeClass","successClass","errorClass","manageError","manageErrorContainer","getVal","isRequired","liClass","errorMessage","requirements","errorContainer","container","css","parent","after","ParsleyField","generateHash","useHtml5Constraints","bindHtml5Constraints","addConstraints","hasConstraints","bindValidationEvents","setParent","$parent","getParent","hasClass","addConstraint","doNotUpdateValidationEvents","sort","toLowerCase","addCustomConstraintMessage","updateConstraint","removeConstraint","customMessage","charAt","toUpperCase","substr","off","trigger","triggers","is","on","split","join","proxy","eventValidation","Math","random","substring","getHash","domApi","namespace","event","getLength","validationMinlength","hasOwnProperty","isValid","errorBubbling","excluded","onFieldValidate","needsValidation","applyValidators","showErrors","push","priorityEnabled","maxPriority","errorArr","addListener","object","listener","destroy","removeData","ParsleyFieldMultiple","initMultiple","inherit","group","getName","siblings","isRadio","isCheckbox","clone","property","values","each","ParsleyForm","items","find","inputs","addItem","item","parsley","removeItem","parsleyItem","splice","focusedField","focus","scrollDuration","top","offset","height","scrollTop","onFormValidate","option","bind","parsleyInstance","apply","defaults","ParsleyConfig","newInstance","Array","slice","call","arguments","attribute","regex","attributes","specified","camelize","deserializeValue","value","num","isNaN","e","str","match","chr","isFormValid","jQuery","Zepto"],"mappings":"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","file":"parsley.js","sourcesContent":["/*\n * Parsley.js allows you to verify your form inputs frontend side, without writing a line of javascript. Or so..\n *\n * Author: Guillaume Potier - @guillaumepotier\n*/\n\n!function ($) {\n\n  'use strict';\n\n  /**\n  * Validator class stores all constraints functions and associated messages.\n  * Provides public interface to add, remove or modify them\n  *\n  * @class Validator\n  * @constructor\n  */\n  var Validator = function ( options ) {\n    /**\n    * Error messages\n    *\n    * @property messages\n    * @type {Object}\n    */\n    this.messages = {\n        defaultMessage: \"This value seems to be invalid.\"\n      , type: {\n            email:      \"This value should be a valid email.\"\n          , url:        \"This value should be a valid url.\"\n          , urlstrict:  \"This value should be a valid url.\"\n          , number:     \"This value should be a valid number.\"\n          , digits:     \"This value should be digits.\"\n          , dateIso:    \"This value should be a valid date (YYYY-MM-DD).\"\n          , alphanum:   \"This value should be alphanumeric.\"\n          , phone:      \"This value should be a valid phone number.\"\n        }\n      , notnull:        \"This value should not be null.\"\n      , notblank:       \"This value should not be blank.\"\n      , required:       \"This value is required.\"\n      , regexp:         \"This value seems to be invalid.\"\n      , min:            \"This value should be greater than or equal to %s.\"\n      , max:            \"This value should be lower than or equal to %s.\"\n      , range:          \"This value should be between %s and %s.\"\n      , minlength:      \"This value is too short. It should have %s characters or more.\"\n      , maxlength:      \"This value is too long. It should have %s characters or less.\"\n      , rangelength:    \"This value length is invalid. It should be between %s and %s characters long.\"\n      , mincheck:       \"You must select at least %s choices.\"\n      , maxcheck:       \"You must select %s choices or less.\"\n      , rangecheck:     \"You must select between %s and %s choices.\"\n      , equalto:        \"This value should be the same.\"\n    },\n\n    this.init( options );\n  };\n\n  Validator.prototype = {\n\n    constructor: Validator\n\n    /**\n    * Validator list. Built-in validators functions\n    *\n    * @property validators\n    * @type {Object}\n    */\n    , validators: {\n      notnull: function () {\n        return {\n          validate: function ( val ) {\n            return val.length > 0;\n          }\n          , priority: 2\n        }\n      }\n      , notblank: function () {\n        return {\n          validate: function ( val ) {\n            return 'string' === typeof val && '' !== val.replace( /^\\s+/g, '' ).replace( /\\s+$/g, '' );\n          }\n          , priority: 2\n        }\n      }\n      , required: function () {\n        var that = this;\n        return {\n          validate: function ( val ) {\n            // for checkboxes and select multiples. Check there is at least one required value\n            if ( 'object' === typeof val ) {\n              for ( var i in val ) {\n                if ( that.required().validate( val[ i ] ) ) {\n                  return true;\n                }\n              }\n\n              return false;\n            }\n\n            return that.notnull().validate( val ) && that.notblank().validate( val );\n          }\n          , priority: 512\n        }\n      }\n      , type: function () {\n        return {\n          validate: function ( val, type ) {\n            var regExp;\n\n            switch ( type ) {\n              case 'number':\n                regExp = /^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/;\n                break;\n              case 'digits':\n                regExp = /^\\d+$/;\n                break;\n              case 'alphanum':\n                regExp = /^\\w+$/;\n                break;\n              case 'email':\n                regExp = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))){2,6}$/i;\n                break;\n              case 'url':\n                val = new RegExp( '(https?|s?ftp|git)', 'i' ).test( val ) ? val : 'http://' + val;\n                /* falls through */\n              case 'urlstrict':\n                regExp = /^(https?|s?ftp|git):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i;\n                break;\n              case 'dateIso':\n                regExp = /^(\\d{4})\\D?(0[1-9]|1[0-2])\\D?([12]\\d|0[1-9]|3[01])$/;\n                break;\n              case 'phone':\n                regExp = /^((\\+\\d{1,3}(-| )?\\(?\\d\\)?(-| )?\\d{1,5})|(\\(?\\d{2,6}\\)?))(-| )?(\\d{3,4})(-| )?(\\d{4})(( x| ext)\\d{1,5}){0,1}$/;\n                break;\n              default:\n                return false;\n            }\n\n            // test regExp if not null\n            return '' !== val ? regExp.test( val ) : false;\n          }\n          , priority: 256\n        }\n      }\n      , regexp: function () {\n        return {\n          validate: function ( val, regExp, self ) {\n            return new RegExp( regExp, self.options.regexpFlag || '' ).test( val );\n          }\n          , priority: 64\n        }\n      }\n      , minlength: function () {\n        return {\n          validate: function ( val, min ) {\n            return val.length >= min;\n          }\n          , priority: 32\n        }\n      }\n      , maxlength: function () {\n        return {\n          validate: function ( val, max ) {\n            return val.length <= max;\n          }\n          , priority: 32\n        }\n      }\n      , rangelength: function () {\n        var that = this;\n        return {\n          validate: function ( val, arrayRange ) {\n            return that.minlength().validate( val, arrayRange[ 0 ] ) && that.maxlength().validate( val, arrayRange[ 1 ] );\n          }\n          , priority: 32\n        }\n      }\n      , min: function () {\n        return {\n          validate: function ( val, min ) {\n            return Number( val ) >= min;\n          }\n          , priority: 32\n        }\n      }\n      , max: function () {\n        return {\n          validate: function ( val, max ) {\n            return Number( val ) <= max;\n          }\n          , priority: 32\n        }\n      }\n      , range: function () {\n        var that = this;\n        return {\n          validate: function ( val, arrayRange ) {\n            return that.min().validate( val, arrayRange[ 0 ] ) && that.max().validate( val, arrayRange[ 1 ] );\n          }\n          , priority: 32\n        }\n      }\n      , equalto: function () {\n        return {\n          validate: function ( val, elem, self ) {\n            self.options.validateIfUnchanged = true;\n            return val === $( elem ).val();\n          }\n          , priority: 64\n        }\n      }\n      , remote: function () {\n        return {\n          validate: function ( val, url, self ) {\n            var result = null\n              , data = {}\n              , dataType = {};\n\n            data[ self.$element.attr( 'name' ) ] = val;\n\n            if ( 'undefined' !== typeof self.options.remoteDatatype )\n              dataType = { dataType: self.options.remoteDatatype };\n\n            var manage = function ( isConstraintValid, message ) {\n              // remove error message if we got a server message, different from previous message\n              if ( 'undefined' !== typeof message && 'undefined' !== typeof self.Validator.messages.remote && message !== self.Validator.messages.remote ) {\n                $( self.UI.ulError + ' .remote' ).remove();\n              }\n\n              if (false === isConstraintValid) {\n                  self.options.listeners.onFieldError( self.element, self.constraints, self );\n              } else if (true === isConstraintValid && false === self.options.listeners.onFieldSuccess( self.element, self.constraints, self )) {\n                  // if onFieldSuccess returns (bool) false, consider that field is invalid\n                  isConstraintValid = false;\n              }\n\n              self.updtConstraint( { name: 'remote', valid: isConstraintValid }, message );\n              self.manageValidationResult();\n            };\n\n            // transform string response into object\n            var handleResponse = function ( response ) {\n              if ( 'object' === typeof response ) {\n                return response;\n              }\n\n              try {\n                response = $.parseJSON( response );\n              } catch ( err ) {}\n\n              return response;\n            }\n\n            var manageErrorMessage = function ( response ) {\n              return 'object' === typeof response && null !== response ? ( 'undefined' !== typeof response.error ? response.error : ( 'undefined' !== typeof response.message ? response.message : null ) ) : null;\n            }\n\n            $.ajax( $.extend( {}, {\n                url: url\n              , data: data\n              , type: self.options.remoteMethod || 'GET'\n              , success: function ( response ) {\n                response = handleResponse( response );\n                manage( 1 === response || true === response || ( 'object' === typeof response && null !== response && 'undefined' !== typeof response.success ), manageErrorMessage( response )\n                );\n              }\n              , error: function ( response ) {\n                response = handleResponse( response );\n                manage( false, manageErrorMessage( response ) );\n              }\n            }, dataType ) );\n\n            return result;\n          }\n          , priority: 64\n        }\n      }\n\n      /**\n      * Aliases for checkboxes constraints\n      */\n      , mincheck: function () {\n        var that = this;\n        return {\n          validate: function ( obj, val ) { return that.minlength().validate( obj, val ) }\n          , priority: 32\n        }\n      }\n      , maxcheck: function () {\n        var that = this;\n        return {\n          validate: function ( obj, val ) { return that.maxlength().validate( obj, val ) }\n          , priority: 32\n        }\n      }\n      , rangecheck: function () {\n        var that = this;\n        return {\n          validate: function ( obj, arrayRange ) { return that.rangelength().validate( obj, arrayRange ) }\n          , priority: 32\n        }\n      }\n    }\n\n    /*\n    * Register custom validators and messages\n    */\n    , init: function ( options ) {\n      var customValidators = options.validators\n        , customMessages = options.messages\n        , key;\n\n      for ( key in customValidators ) {\n        this.addValidator(key, customValidators[ key ]);\n      }\n\n      for ( key in customMessages ) {\n        this.addMessage(key, customMessages[ key ]);\n      }\n    }\n\n    /**\n    * Replace %s placeholders by values\n    *\n    * @method formatMesssage\n    * @param {String} message Message key\n    * @param {Mixed} args Args passed by validators functions. Could be string, number or object\n    * @return {String} Formatted string\n    */\n    , formatMesssage: function ( message, args ) {\n\n      if ( 'object' === typeof args ) {\n        for ( var i in args ) {\n          message = this.formatMesssage( message, args[ i ] );\n        }\n\n        return message;\n      }\n\n      return 'string' === typeof message ? message.replace( new RegExp( '%s', 'i' ), args ) : '';\n    }\n\n    /**\n    * Add / override a validator in validators list\n    *\n    * @method addValidator\n    * @param {String} name Validator name.\n    * @param {Function} fn Validator. Must return { validator: fn(), priority: int }\n    */\n    , addValidator: function ( name, fn ) {\n      if ('undefined' === typeof fn().validate) {\n        throw new Error( 'Validator `' + name + '` must have a validate method. See more here: http://parsleyjs.org/documentation.html#javascript-general' );\n      }\n\n      // add default prioirty if not given.\n      if ('undefined' === typeof fn().priority) {\n        fn = {\n            validate: fn().validate\n          , priority: 32\n        };\n\n        // Warn if possible\n        if (window.console && window.console.warn) {\n          window.console.warn( 'Validator `' + name + '` should have a priority. Default priority 32 given' );\n        }\n      }\n\n      this.validators[ name ] = fn;\n    }\n\n    /**\n    * Add / override error message\n    *\n    * @method addMessage\n    * @param {String} name Message name. Will automatically be binded to validator with same name\n    * @param {String} message Message\n    */\n    , addMessage: function ( key, message, type ) {\n\n      if ( 'undefined' !== typeof type && true === type ) {\n        this.messages.type[ key ] = message;\n        return;\n      }\n\n      // custom types messages are a bit tricky cuz' nested ;)\n      if ( 'type' === key ) {\n        for ( var i in message ) {\n          this.messages.type[ i ] = message[ i ];\n        }\n\n        return;\n      }\n\n      this.messages[ key ] = message;\n    }\n  };\n\n  var ParsleyUI = function ( ParsleyInstance ) {\n    this.init( ParsleyInstance );\n  };\n\n  ParsleyUI.prototype = {\n\n    constructor: ParsleyUI\n\n    , init: function ( ParsleyInstance ) {\n      this.ParsleyInstance = ParsleyInstance;\n      this.hash = ParsleyInstance.hash;\n      this.options = this.ParsleyInstance.options;\n      this.errorClassHandler = this.options.errors.classHandler( this.ParsleyInstance.element, this.ParsleyInstance.isRadioOrCheckbox ) || this.ParsleyInstance.$element;\n      this.ulErrorManagement();\n    }\n\n    /**\n    * Manage ul error Container\n    *\n    * @private\n    * @method ulErrorManagement\n    */\n    , ulErrorManagement: function () {\n      this.ulError = '#' + this.hash;\n      this.ulTemplate = $( this.options.errors.errorsWrapper ).attr( 'id', this.hash ).addClass( 'parsley-error-list' );\n    }\n\n    /**\n    * Remove li / ul error\n    *\n    * @method removeError\n    * @param  {String} constraintName Method Name\n    * @return ParsleyUI\n    */\n    , removeError: function ( constraintName ) {\n      var liError = this.ulError + ' .' + constraintName\n        , that = this;\n\n      this.options.animate ? $( liError ).fadeOut( this.options.animateDuration, function () {\n        $( this ).remove();\n\n        if ( that.ulError && $( that.ulError ).children().length === 0 ) {\n          that.removeErrors();\n        } } ) : $( liError ).remove();\n\n        return this;\n    }\n\n    /**\n    * Add li error\n    *\n    * @method addError\n    * @param  {Object} { minlength: \"error message for minlength constraint\" }\n    * @return ParsleyUI\n    */\n    , addError: function ( error ) {\n      for ( var constraint in error ) {\n        var liTemplate = $( this.options.errors.errorElem ).addClass( constraint );\n\n        $( this.ulError ).append( this.options.animate ? $( liTemplate ).html( error[ constraint ] ).hide().fadeIn( this.options.animateDuration ) : $( liTemplate ).html( error[ constraint ] ) );\n      }\n\n      return this;\n    }\n\n    /**\n    * Update existing error if text has changed\n    *\n    * @method updateError\n    * @param  {Object} { minlength: \"error message for minlength constraint\" }\n    * @return ParsleyUI\n    */\n    , updateError: function ( error ) {\n      for ( var constraint in error ) {\n        if ( error[ constraint ] !==  $( this.ulError +  \" > li.\" + constraint ).html() ) {\n          this.removeError( constraint ).addError( error );\n        }\n      }\n\n      return this;\n    }\n\n    /**\n    * Remove all ul / li errors\n    *\n    * @method removeErrors\n    * @return ParsleyUI\n    */\n    , removeErrors: function () {\n      this.options.animate ? $( this.ulError ).fadeOut( this.options.animateDuration, function () { $( this ).remove(); } ) : $( this.ulError ).remove();\n\n      return this;\n    }\n\n    /**\n    * Remove ul errors and parsley error or success classes\n    *\n    * @method reset\n    * @return ParsleyUI\n    */\n    , reset: function () {\n      this.ParsleyInstance.valid = null;\n      this.removeErrors();\n      this.ParsleyInstance.validatedOnce = false;\n      this.errorClassHandler.removeClass( this.options.successClass ).removeClass( this.options.errorClass );\n\n      for ( var constraint in this.constraints ) {\n        this.constraints[ constraint ].valid = null;\n      }\n\n      return this;\n    }\n\n    /**\n    * Add li / ul errors messages\n    *\n    * @method manageError\n    * @param  {Object} constraint\n    * @return ParsleyUI\n    */\n    , manageError: function ( constraint ) {\n      // display ulError container if it has been removed previously (or never shown)\n      if ( !$( this.ulError ).length ) {\n        this.manageErrorContainer();\n      }\n\n      // TODO: refacto properly\n      // if required constraint but field is not null, do not display\n      if ( 'required' === constraint.name && null !== this.ParsleyInstance.getVal() && this.ParsleyInstance.getVal().length > 0 ) {\n        return this;\n\n      // if empty required field and non required constraint fails, do not display\n      } else if ( this.ParsleyInstance.isRequired && 'required' !== constraint.name && ( null === this.ParsleyInstance.getVal() || 0 === this.ParsleyInstance.getVal().length ) ) {\n        this.removeError( constraint.name );\n\n        return this;\n      }\n\n      // TODO: refacto error name w/ proper & readable function\n      var constraintName = constraint.name\n        , liClass = false !== this.options.errorMessage ? 'custom-error-message' : constraintName\n        , liError = {}\n        , message = false !== this.options.errorMessage ? this.options.errorMessage : ( constraint.name === 'type' ?\n            this.ParsleyInstance.Validator.messages[ constraintName ][ constraint.requirements ] : ( 'undefined' === typeof this.ParsleyInstance.Validator.messages[ constraintName ] ?\n              this.ParsleyInstance.Validator.messages.defaultMessage : this.ParsleyInstance.Validator.formatMesssage( this.ParsleyInstance.Validator.messages[ constraintName ], constraint.requirements ) ) );\n\n      liError[ liClass ] = message;\n\n      // add liError if not shown. update if already exist\n      !$( this.ulError + ' .' + liClass ).length ? this.addError( liError ) : this.updateError( liError );\n\n      return this;\n    }\n\n    /**\n    * Create ul error container\n    *\n    * @method manageErrorContainer\n    * @return ParsleyUI\n    */\n    , manageErrorContainer: function () {\n      var errorContainer = this.options.errorContainer || this.options.errors.container( this.ParsleyInstance.element, this.ParsleyInstance.isRadioOrCheckbox )\n        , ulTemplate = this.options.animate ? this.ulTemplate.css('display', '') : this.ulTemplate;\n\n      if ( 'undefined' !== typeof errorContainer ) {\n        $( errorContainer ).append( ulTemplate );\n        return;\n      }\n\n      !this.ParsleyInstance.isRadioOrCheckbox ? this.ParsleyInstance.$element.after( ulTemplate ) : this.ParsleyInstance.$element.parent().after( ulTemplate );\n\n      return this;\n    }\n  };\n\n  /**\n  * ParsleyField class manage each form field inside a validated Parsley form.\n  * Returns if field valid or not depending on its value and constraints\n  * Manage field error display and behavior, event triggers and more\n  *\n  * @class ParsleyField\n  * @constructor\n  */\n  var ParsleyField = function ( element, options, type ) {\n    this.options = options;\n\n    // if type is ParsleyFieldMultiple, just return this. used for clone\n    if ( type === 'ParsleyFieldMultiple' ) {\n      return this;\n    }\n\n    this.init( element, type || 'ParsleyField' );\n  };\n\n  ParsleyField.prototype = {\n\n    constructor: ParsleyField\n\n    /**\n    * Set some properties, bind constraint validators and validation events\n    *\n    * @method init\n    * @param {Object} element\n    * @param {Object} options\n    */\n    , init: function ( element, type ) {\n      this.type = type;\n      this.valid = true;\n      this.element = element;\n      this.validatedOnce = false;\n      this.$element = $( element );\n      this.val = this.$element.val();\n      this.Validator = new Validator( this.options );\n      this.isRequired = false;\n      this.constraints = {};\n\n      // overriden by ParsleyItemMultiple if radio or checkbox input\n      if ( 'undefined' === typeof this.isRadioOrCheckbox ) {\n        this.isRadioOrCheckbox = false;\n        this.hash = this.generateHash();\n      }\n\n      // error ul dom management done only once at init\n      this.UI = new ParsleyUI( this );\n\n      // bind some html5 properties\n      if ( this.options.useHtml5Constraints ) {\n        this.bindHtml5Constraints();\n      }\n\n      // bind validators to field\n      this.addConstraints();\n\n      // bind parsley events if validators have been registered\n      if ( this.hasConstraints() ) {\n        this.bindValidationEvents();\n      }\n    }\n\n    , setParent: function ( elem ) {\n      this.$parent = $( elem );\n    }\n\n    , getParent: function () {\n      return this.$parent;\n    }\n\n    /**\n    * Bind some extra html5 types / validators\n    *\n    * @private\n    * @method bindHtml5Constraints\n    */\n    , bindHtml5Constraints: function () {\n      // add html5 required support + class required support\n      if ( this.$element.hasClass( 'required' ) || this.$element.attr( 'required' ) ) {\n        this.options.required = true;\n      }\n\n      // add html5 supported types & options\n      var type = this.$element.attr( 'type' );\n      if ( 'undefined' !== typeof type && new RegExp( type, 'i' ).test( 'email url number range tel' ) ) {\n        this.options.type = 'tel' === type ? 'phone' : type;\n\n        // number and range types could have min and/or max values\n        if ( new RegExp( this.options.type, 'i' ).test( 'number range' ) ) {\n          this.options.type = 'number';\n\n          // double condition to support jQuery and Zepto.. :(\n          if ( 'undefined' !== typeof this.$element.attr( 'min' ) && this.$element.attr( 'min' ).length ) {\n            this.options.min = this.$element.attr( 'min' );\n          }\n\n          if ( 'undefined' !== typeof this.$element.attr( 'max' ) && this.$element.attr( 'max' ).length ) {\n            this.options.max = this.$element.attr( 'max' );\n          }\n        }\n      }\n\n      if ( 'string' === typeof this.$element.attr( 'pattern' ) && this.$element.attr( 'pattern' ).length ) {\n          this.options.regexp = this.$element.attr( 'pattern' );\n      }\n\n    }\n\n    /**\n    * Attach field validators functions passed through data-api\n    *\n    * @private\n    * @method addConstraints\n    */\n    , addConstraints: function () {\n      for ( var constraint in this.options ) {\n        var addConstraint = {};\n        addConstraint[ constraint ] = this.options[ constraint ];\n        this.addConstraint( addConstraint, true, false );\n      }\n    }\n\n    /**\n    * Dynamically add a new constraint to a field\n    *\n    * @method addConstraint\n    * @param {Object} constraint { name: requirements }\n    */\n    , addConstraint: function ( constraint, doNotUpdateValidationEvents, sort ) {\n        for ( var name in constraint ) {\n          name = name.toLowerCase();\n\n          if ( 'function' === typeof this.Validator.validators[ name ] ) {\n            this.constraints[ name ] = {\n                name: name\n              , requirements: constraint[ name ]\n              , valid: null\n            }\n\n            if ( name === 'required' ) {\n              this.isRequired = true;\n            }\n\n            this.addCustomConstraintMessage( name );\n          }\n        }\n\n        // force field validation next check and reset validation events\n        if ( 'undefined' === typeof doNotUpdateValidationEvents ) {\n          this.bindValidationEvents();\n        }\n    }\n\n    /**\n    * Dynamically update an existing constraint to a field.\n    * Simple API: { name: requirements }\n    *\n    * @method updtConstraint\n    * @param {Object} constraint\n    */\n    , updateConstraint: function ( constraint, message ) {\n      for ( var name in constraint ) {\n        this.updtConstraint( { name: name, requirements: constraint[ name ], valid: null }, message );\n      }\n    }\n\n    /**\n    * Dynamically update an existing constraint to a field.\n    * Complex API: { name: name, requirements: requirements, valid: boolean }\n    *\n    * @method updtConstraint\n    * @param {Object} constraint\n    */\n    , updtConstraint: function ( constraint, message ) {\n      this.constraints[ constraint.name ] = $.extend( true, this.constraints[ constraint.name ], constraint );\n\n      if ( 'string' === typeof message ) {\n        if ( constraint.name ===  'type' )\n          this.Validator.messages[ constraint.name ][ constraint.requirements ] = message ;\n        else\n          this.Validator.messages[ constraint.name ] = message ;\n      }\n\n      // force field validation next check and reset validation events\n      this.bindValidationEvents();\n    }\n\n    /**\n    * Dynamically remove an existing constraint to a field.\n    *\n    * @method removeConstraint\n    * @param {String} constraintName\n    */\n    , removeConstraint: function ( constraintName ) {\n      var constraintName = constraintName.toLowerCase();\n\n      delete this.constraints[ constraintName ];\n\n      if ( constraintName === 'required' ) {\n        this.isRequired = false;\n      }\n\n      // if there are no more constraint, reset errors and validation state\n      if ( !this.hasConstraints() ) {\n        this.UI.reset();\n        return;\n      }\n\n      this.bindValidationEvents();\n    }\n\n    /**\n    * Add custom constraint message, passed through data-API\n    *\n    * @private\n    * @method addCustomConstraintMessage\n    * @param constraint\n    */\n    , addCustomConstraintMessage: function ( constraint ) {\n      // custom message type data-type-email-message -> typeEmailMessage | data-minlength-error => minlengthMessage\n      var customMessage = constraint\n        + ( 'type' === constraint && 'undefined' !== typeof this.options[ constraint ] ? this.options[ constraint ].charAt( 0 ).toUpperCase() + this.options[ constraint ].substr( 1 ) : '' )\n        + 'Message';\n\n      if ( 'undefined' !== typeof this.options[ customMessage ] ) {\n        this.Validator.addMessage( 'type' === constraint ? this.options[ constraint ] : constraint, this.options[ customMessage ], 'type' === constraint );\n      }\n    }\n\n    /**\n    * Bind validation events on a field\n    *\n    * @private\n    * @method bindValidationEvents\n    */\n    , bindValidationEvents: function () {\n      // this field has validation events, that means it has to be validated\n      this.valid = null;\n      this.$element.addClass( 'parsley-validated' );\n\n      // remove eventually already binded events\n      this.$element.off( '.' + this.type );\n\n      // force add 'change' event if async remote validator here to have result before form submitting\n      if ( this.options.remote && !new RegExp( 'change', 'i' ).test( this.options.trigger ) ) {\n        this.options.trigger = !this.options.trigger ? 'change' : ' change';\n      }\n\n      // always bind keyup event, for better UX when a field is invalid\n      var triggers = ( !this.options.trigger ? '' : this.options.trigger )\n        + ( new RegExp( 'key', 'i' ).test( this.options.trigger ) ? '' : ' keyup' );\n\n      // always bind change event, for better UX when a select is invalid\n      if ( this.$element.is( 'select' ) ) {\n        triggers += new RegExp( 'change', 'i' ).test( triggers ) ? '' : ' change';\n      }\n\n      // trim triggers to bind them correctly with .on()\n      triggers = triggers.replace( /^\\s+/g , '' ).replace( /\\s+$/g , '' );\n\n      this.$element.on( ( triggers + ' ' ).split( ' ' ).join( '.' + this.type + ' ' ), false, $.proxy( this.eventValidation, this ) );\n    }\n\n    /**\n    * Hash management. Used for ul error\n    *\n    * @method generateHash\n    * @returns {String} 5 letters unique hash\n    */\n    , generateHash: function () {\n      return 'parsley-' + ( Math.random() + '' ).substring( 2 );\n    }\n\n    /**\n    * Public getHash accessor\n    *\n    * @method getHash\n    * @returns {String} hash\n    */\n    , getHash: function () {\n      return this.hash;\n    }\n\n    /**\n    * Returns field val needed for validation\n    * Special treatment for radio & checkboxes\n    *\n    * @method getVal\n    * @returns {String} val\n    */\n    , getVal: function () {\n      if ('undefined' !== typeof this.$element.domApi( this.options.namespace )[ 'value' ]) {\n        return this.$element.domApi( this.options.namespace )[ 'value' ];\n      }\n\n      return this.$element.val();\n    }\n\n    /**\n    * Called when validation is triggered by an event\n    * Do nothing if val.length < this.options.validationMinlength\n    *\n    * @method eventValidation\n    * @param {Object} event jQuery event\n    */\n    , eventValidation: function ( event ) {\n      var val = this.getVal();\n\n      // do nothing on keypress event if not explicitely passed as data-trigger and if field has not already been validated once\n      if ( event.type === 'keyup' && !/keyup/i.test( this.options.trigger ) && !this.validatedOnce ) {\n        return true;\n      }\n\n      // do nothing on change event if not explicitely passed as data-trigger and if field has not already been validated once\n      if ( event.type === 'change' && !/change/i.test( this.options.trigger ) && !this.validatedOnce ) {\n        return true;\n      }\n\n      // start validation process only if field has enough chars and validation never started\n      if ( !this.isRadioOrCheckbox && this.getLength(val) < this.options.validationMinlength && !this.validatedOnce ) {\n        return true;\n      }\n\n      this.validate();\n    }\n\n    /**\n     * Get the length of a given value\n     *\n     * @method getLength\n     * @return {int} The length of the value\n     */\n    , getLength: function ( val ) {\n      return !val || !val.hasOwnProperty( 'length' ) ? 0 : val.length;\n    }\n\n    /**\n    * Return if field verify its constraints\n    *\n    * @method isValid\n    * @return {Boolean} Is field valid or not\n    */\n    , isValid: function () {\n      return this.validate( false );\n    }\n\n    /**\n    * Return if field has constraints\n    *\n    * @method hasConstraints\n    * @return {Boolean} Is field has constraints or not\n    */\n    , hasConstraints: function () {\n      for ( var constraint in this.constraints ) {\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n    * Validate a field & display errors\n    *\n    * @method validate\n    * @param {Boolean} errorBubbling set to false if you just want valid boolean without error bubbling next to fields\n    * @return {Boolean} Is field valid or not\n    */\n    , validate: function ( errorBubbling ) {\n      var val = this.getVal()\n        , valid = null;\n\n      // do not even bother trying validating a field w/o constraints\n      if ( !this.hasConstraints() ) {\n        return null;\n      }\n\n      // do not validate excluded fields\n      if ( this.$element.is( this.options.excluded ) ) {\n        return null;\n      }\n\n      // reset Parsley validation if onFieldValidate returns true, or if field is empty and not required\n      if ( this.options.listeners.onFieldValidate( this.element, this ) || ( '' === val && !this.isRequired ) ) {\n        this.UI.reset();\n        return null;\n      }\n\n      // do not validate a field already validated and unchanged !\n      if ( !this.needsValidation( val ) ) {\n        return this.valid;\n      }\n\n      valid = this.applyValidators();\n\n      if ( 'undefined' !== typeof errorBubbling ? errorBubbling : this.options.showErrors ) {\n        this.manageValidationResult();\n      }\n\n      return valid;\n    }\n\n    /**\n    * Check if value has changed since previous validation\n    *\n    * @method needsValidation\n    * @param value\n    * @return {Boolean}\n    */\n    , needsValidation: function ( val ) {\n      if ( !this.options.validateIfUnchanged && this.valid !== null && this.val === val && this.validatedOnce ) {\n        return false;\n      }\n\n      this.val = val;\n      return this.validatedOnce = true;\n    }\n\n    /**\n    * Loop through every fields validators\n    * Adds errors after unvalid fields\n    *\n    * @method applyValidators\n    * @return {Mixed} {Boolean} If field valid or not, null if not validated\n    */\n    , applyValidators: function () {\n      var valid = null;\n\n      for ( var constraint in this.constraints ) {\n        var result = this.Validator.validators[ this.constraints[ constraint ].name ]().validate( this.val, this.constraints[ constraint ].requirements, this );\n\n        if ( false === result ) {\n          valid = false;\n          this.constraints[ constraint ].valid = valid;\n        } else if ( true === result ) {\n          this.constraints[ constraint ].valid = true;\n          valid = false !== valid;\n        }\n      }\n\n      // listeners' ballet\n      if (false === valid) {\n        this.options.listeners.onFieldError( this.element, this.constraints, this );\n      } else if (true === valid && false === this.options.listeners.onFieldSuccess( this.element, this.constraints, this )) {\n        // if onFieldSuccess returns (bool) false, consider that field si invalid\n        valid = false;\n      }\n\n      return valid;\n    }\n\n    /**\n    * Fired when all validators have be executed\n    * Returns true or false if field is valid or not\n    * Display errors messages below failed fields\n    * Adds parsley-success or parsley-error class on fields\n    *\n    * @method manageValidationResult\n    * @return {Boolean} Is field valid or not\n    */\n    , manageValidationResult: function () {\n      var valid = null\n        , errors = [];\n\n      for ( var constraint in this.constraints ) {\n        if ( false === this.constraints[ constraint ].valid ) {\n          errors.push( this.constraints[ constraint ]);\n          valid = false;\n        } else if ( true === this.constraints[ constraint ].valid ) {\n          this.UI.removeError( this.constraints[ constraint ].name );\n          valid = false !== valid;\n        }\n      }\n\n      this.valid = valid;\n\n      if ( true === this.valid ) {\n        this.UI.removeErrors();\n        this.UI.errorClassHandler.removeClass( this.options.errorClass ).addClass( this.options.successClass );\n\n        return true;\n      } else if ( false === this.valid ) {\n        if ( true === this.options.priorityEnabled ) {\n          var maxPriority = 0, constraint, priority, error, errorArr = [];\n          for ( var i = 0; i < errors.length; i++ ) {\n            error = this.Validator.validators[ errors[ i ].name ]();\n            priority = error.priority;\n            errorArr.push(errors[ i ]);\n\n            if ( priority > maxPriority ) {\n              constraint = errors[ i ];\n              maxPriority = priority;\n            }\n          }\n          for ( var i = 0; i < errorArr.length; i++ ) {\n            if ( constraint === errorArr[ i ] ) {\n              this.UI.manageError( constraint );\n            } else {\n              this.UI.removeError( errorArr[ i ].name );\n            }\n          }\n        } else {\n          for ( var i = 0; i < errors.length; i++ )\n            this.UI.manageError( errors[ i ] );\n        }\n\n        this.UI.errorClassHandler.removeClass( this.options.successClass ).addClass( this.options.errorClass );\n        return false;\n      }\n\n      // remove li error, and ul error if no more li inside\n      if ( this.UI.ulError && $( this.ulError ).children().length === 0 ) {\n        this.UI.removeErrors();\n      }\n\n      return valid;\n    }\n\n    /**\n    * Add custom listeners\n    *\n    * @param {Object} { listener: function () {} }, eg { onFormValidate: function ( valid, event, focus ) { ... } }\n    */\n    , addListener: function ( object ) {\n      for ( var listener in object ) {\n        this.options.listeners[ listener ] = object[ listener ];\n      }\n    }\n\n    /**\n    * Destroy parsley field instance\n    *\n    * @private\n    * @method destroy\n    */\n    , destroy: function () {\n      this.$element.removeClass( 'parsley-validated' );\n      this.UI.reset();\n      this.$element.off( '.' + this.type ).removeData( this.type );\n    }\n  };\n\n  /**\n  * ParsleyFieldMultiple override ParsleyField for checkbox and radio inputs\n  * Pseudo-heritance to manage divergent behavior from ParsleyItem in dedicated methods\n  *\n  * @class ParsleyFieldMultiple\n  * @constructor\n  */\n  var ParsleyFieldMultiple = function ( element, options, type ) {\n    this.initMultiple( element, options );\n    this.inherit( element, options );\n    this.Validator = new Validator( options );\n\n    // call ParsleyField constructor\n    this.init( element, type || 'ParsleyFieldMultiple' );\n  };\n\n  ParsleyFieldMultiple.prototype = {\n\n    constructor: ParsleyFieldMultiple\n\n    /**\n    * Set some specific properties, call some extra methods to manage radio / checkbox\n    *\n    * @method init\n    * @param {Object} element\n    * @param {Object} options\n    */\n    , initMultiple: function ( element, options ) {\n      this.element = element;\n      this.$element = $( element );\n      this.group = options.group || false;\n      this.hash = this.getName();\n      this.siblings = this.group ? '[' + options.namespace + 'group=\"' + this.group + '\"]' : 'input[name=\"' + this.$element.attr( 'name' ) + '\"]';\n      this.isRadioOrCheckbox = true;\n      this.isRadio = this.$element.is( 'input[type=radio]' );\n      this.isCheckbox = this.$element.is( 'input[type=checkbox]' );\n      this.errorClassHandler = options.errors.classHandler( element, this.isRadioOrCheckbox ) || this.$element.parent();\n    }\n\n    /**\n    * Set specific constraints messages, do pseudo-heritance\n    *\n    * @private\n    * @method inherit\n    * @param {Object} element\n    * @param {Object} options\n    */\n    , inherit: function ( element, options ) {\n      var clone = new ParsleyField( element, options, 'ParsleyFieldMultiple' );\n\n      for ( var property in clone ) {\n        if ( 'undefined' === typeof this[ property ] ) {\n          this[ property ] = clone [ property ];\n        }\n      }\n    }\n\n    /**\n    * Set specific constraints messages, do pseudo-heritance\n    *\n    * @method getName\n    * @returns {String} radio / checkbox hash is cleaned 'name' or data-group property\n    */\n   , getName: function () {\n     if ( this.group ) {\n       return 'parsley-' + this.group;\n     }\n\n     if ( 'undefined' === typeof this.$element.attr( 'name' ) ) {\n       throw \"A radio / checkbox input must have a parsley-group attribute or a name to be Parsley validated !\";\n     }\n\n     return 'parsley-' + this.$element.attr( 'name' ).replace( /(:|\\.|\\[|\\]|\\$)/g, '' );\n   }\n\n   /**\n   * Special treatment for radio & checkboxes\n   * Returns checked radio or checkboxes values\n   *\n   * @method getVal\n   * @returns {String} val\n   */\n   , getVal: function () {\n      if ( this.isRadio ) {\n        return $( this.siblings + ':checked' ).val() || '';\n      }\n\n      if ( this.isCheckbox ) {\n        var values = [];\n\n        $( this.siblings + ':checked' ).each( function () {\n          values.push( $( this ).val() );\n        } );\n\n        return values;\n      }\n   }\n\n   /**\n   * Bind validation events on a field\n   *\n   * @private\n   * @method bindValidationEvents\n   */\n   , bindValidationEvents: function () {\n     // this field has validation events, that means it has to be validated\n     this.valid = null;\n     this.$element.addClass( 'parsley-validated' );\n\n     // remove eventually already binded events\n     this.$element.off( '.' + this.type );\n\n      // always bind keyup event, for better UX when a field is invalid\n      var self = this\n        , triggers = ( !this.options.trigger ? '' : this.options.trigger )\n        + ( new RegExp( 'change', 'i' ).test( this.options.trigger ) ? '' : ' change' );\n\n      // trim triggers to bind them correctly with .on()\n      triggers = triggers.replace( /^\\s+/g , '' ).replace( /\\s+$/g ,'' );\n\n     // bind trigger event on every siblings\n     $( this.siblings ).each(function () {\n       $( this ).on( triggers.split( ' ' ).join( '.' + self.type + ' ' ) , false, $.proxy( self.eventValidation, self ) );\n     } )\n   }\n  };\n\n  /**\n  * ParsleyForm class manage Parsley validated form.\n  * Manage its fields and global validation\n  *\n  * @class ParsleyForm\n  * @constructor\n  */\n  var ParsleyForm = function ( element, options, type ) {\n    this.init( element, options, type || 'parsleyForm' );\n  };\n\n  ParsleyForm.prototype = {\n\n    constructor: ParsleyForm\n\n    /* init data, bind jQuery on() actions */\n    , init: function ( element, options, type ) {\n      this.type = type;\n      this.items = [];\n      this.$element = $( element );\n      this.options = options;\n      var self = this;\n\n      this.$element.find( options.inputs ).each( function () {\n        self.addItem( this );\n      });\n\n      this.$element.on( 'submit.' + this.type , false, $.proxy( this.validate, this ) );\n    }\n\n    /**\n    * Add custom listeners\n    *\n    * @param {Object} { listener: function () {} }, eg { onFormValidate: function ( valid, event, focus ) { ... } }\n    */\n    , addListener: function ( object ) {\n      for ( var listener in object ) {\n        if ( new RegExp( 'Field' ).test( listener ) ) {\n          for ( var item = 0; item < this.items.length; item++ ) {\n            this.items[ item ].addListener( object );\n          }\n        } else {\n          this.options.listeners[ listener ] = object[ listener ];\n        }\n      }\n    }\n\n    /**\n    * Adds a new parsleyItem child to ParsleyForm\n    *\n    * @method addItem\n    * @param elem\n    */\n    , addItem: function ( elem ) {\n      var ParsleyField = $( elem ).parsley( this.options );\n      ParsleyField.setParent( this );\n\n      this.items.push( ParsleyField );\n    }\n\n    /**\n    * Removes a parsleyItem child from ParsleyForm\n    *\n    * @method removeItem\n    * @param elem\n    * @return {Boolean}\n    */\n    , removeItem: function ( elem ) {\n      var parsleyItem = $( elem ).parsley();\n\n      // identify & remove item if same Parsley hash\n      for ( var i = 0; i < this.items.length; i++ ) {\n        if ( this.items[ i ].hash === parsleyItem.hash ) {\n          this.items[ i ].destroy();\n          this.items.splice( i, 1 );\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    /**\n    * Process each form field validation\n    * Display errors, call custom onFormValidate() function\n    *\n    * @method validate\n    * @param {Object} event jQuery Event\n    * @return {Boolean} Is form valid or not\n    */\n    , validate: function ( event ) {\n      var valid = true;\n      this.focusedField = false;\n\n      for ( var item = 0; item < this.items.length; item++ ) {\n        if ( 'undefined' !== typeof this.items[ item ] && false === this.items[ item ].validate() ) {\n          valid = false;\n\n          if ( !this.focusedField && 'first' === this.options.focus || 'last' === this.options.focus ) {\n            this.focusedField = this.items[ item ].$element;\n          }\n        }\n      }\n\n      // form is invalid, focus an error field depending on focus policy\n      if ( this.focusedField && !valid ) {\n        // Scroll smoothly\n        if ( this.options.scrollDuration > 0 ) {\n          var that = this,\n              top = this.focusedField.offset().top - $( window ).height() / 2; // Center the window on the field\n\n          $( 'html, body' ).animate( {\n              scrollTop: top\n            },\n            this.options.scrollDuration,\n            function () {\n              that.focusedField.focus();\n            }\n          );\n        // Just focus on the field and let the browser do the rest\n        } else {\n          this.focusedField.focus();\n        }\n      }\n\n      // if onFormValidate returns (bool) false, form won't be submitted, even if valid\n      var onFormValidate = this.options.listeners.onFormValidate( valid, event, this );\n      if ('undefined' !== typeof onFormValidate) {\n        return onFormValidate;\n      }\n\n      return valid;\n    }\n\n    , isValid: function () {\n      for ( var item = 0; item < this.items.length; item++ ) {\n        if ( false === this.items[ item ].isValid() ) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    /**\n    * Remove all errors ul under invalid fields\n    *\n    * @method removeErrors\n    */\n    , removeErrors: function () {\n      for ( var item = 0; item < this.items.length; item++ ) {\n        this.items[ item ].parsley( 'reset' );\n      }\n    }\n\n    /**\n    * destroy Parsley binded on the form and its fields\n    *\n    * @method destroy\n    */\n    , destroy: function () {\n      for ( var item = 0; item < this.items.length; item++ ) {\n        this.items[ item ].destroy();\n      }\n\n      this.$element.off( '.' + this.type ).removeData( this.type );\n    }\n\n    /**\n    * reset Parsley binded on the form and its fields\n    *\n    * @method reset\n    */\n    , reset: function () {\n      for ( var item = 0; item < this.items.length; item++ ) {\n        this.items[ item ].UI.reset();\n      }\n    }\n  };\n\n  /**\n  * Parsley plugin definition\n  * Provides an interface to access public Validator, ParsleyForm and ParsleyField functions\n  *\n  * @class Parsley\n  * @constructor\n  * @param {Mixed} Options. {Object} to configure Parsley or {String} method name to call a public class method\n  * @param {Function} Callback function\n  * @return {Mixed} public class method return\n  */\n  $.fn.parsley = function ( option, fn ) {\n    var namespace = { namespace: $( this ).data( 'parsleyNamespace' ) ? $( this ).data( 'parsleyNamespace' ) : ( 'undefined' !== typeof option && 'undefined' !== typeof option.namespace ? option.namespace : $.fn.parsley.defaults.namespace ) }\n      , options = $.extend( true, {}, $.fn.parsley.defaults, 'undefined' !== typeof window.ParsleyConfig ? window.ParsleyConfig : {}, option, this.domApi( namespace.namespace ) )\n      , newInstance = null\n      , args = Array.prototype.slice.call(arguments, 1);\n\n    function bind ( self, type ) {\n      var parsleyInstance = $( self ).data( type );\n\n      // if data never binded or we want to clone a build (for radio & checkboxes), bind it right now!\n      if ( !parsleyInstance ) {\n        switch ( type ) {\n          case 'parsleyForm':\n            parsleyInstance = new ParsleyForm( self, options, 'parsleyForm' );\n            break;\n          case 'parsleyField':\n            parsleyInstance = new ParsleyField( self, options, 'parsleyField' );\n            break;\n          case 'parsleyFieldMultiple':\n            parsleyInstance = new ParsleyFieldMultiple( self, options, 'parsleyFieldMultiple' );\n            break;\n          default:\n            return;\n        }\n\n        $( self ).data( type, parsleyInstance );\n      }\n\n      // here is our parsley public function accessor\n      if ( 'string' === typeof option && 'function' === typeof parsleyInstance[ option ] ) {\n        var response = parsleyInstance[ option ].apply( parsleyInstance, args );\n\n        return 'undefined' !== typeof response ? response : $( self );\n      }\n\n      return parsleyInstance;\n    }\n\n    // if a form elem is given, bind all its input children\n    if ( $( this ).is( 'form' ) || 'undefined' !== typeof $( this ).domApi( namespace.namespace )[ 'bind' ] ) {\n      newInstance = bind ( $( this ), 'parsleyForm' );\n\n    // if it is a Parsley supported single element, bind it too, except inputs type hidden\n    // add here a return instance, cuz' we could call public methods on single elems with data[ option ]() above\n    } else if ( $( this ).is( options.inputs ) ) {\n      newInstance = bind( $( this ), !$( this ).is( 'input[type=radio], input[type=checkbox]' ) ? 'parsleyField' : 'parsleyFieldMultiple' );\n    }\n\n    return 'function' === typeof fn ? fn() : newInstance;\n  };\n\n  /* PARSLEY auto-binding\n  * =================================================== */\n  $( window ).on( 'load', function () {\n    $( '[parsley-validate], [data-parsley-validate]' ).each( function () {\n      $( this ).parsley();\n    } );\n  } );\n\n  /* PARSLEY DOM API\n  * =================================================== */\n  $.fn.domApi = function ( namespace ) {\n    var attribute,\n      obj = {}\n      , regex = new RegExp(\"^\" + namespace, 'i');\n\n    if ( 'undefined' === typeof this[ 0 ] ) {\n      return {};\n    }\n\n    for ( var i in this[ 0 ].attributes ) {\n      attribute = this[ 0 ].attributes[ i ];\n\n      if ( 'undefined' !== typeof attribute && null !== attribute && attribute.specified && regex.test( attribute.name ) ) {\n        obj[ camelize( attribute.name.replace( namespace, '' ) ) ] = deserializeValue( attribute.value );\n      }\n    }\n\n    return obj;\n  };\n\n  // Zepto deserializeValue function\n  // \"true\"  => true\n  // \"false\" => false\n  // \"null\"  => null\n  // \"42\"    => 42\n  // \"42.5\"  => 42.5\n  // JSON    => parse if valid\n  // String  => self\n  var deserializeValue = function( value ) {\n    var num\n    try {\n      return value ?\n        value == \"true\" ||\n        ( value == \"false\" ? false :\n          value == \"null\" ? null :\n          !isNaN( num = Number( value ) ) ? num :\n          /^[\\[\\{]/.test( value ) ? $.parseJSON( value ) :\n          value )\n        : value;\n    } catch ( e ) {\n      return value;\n    }\n  };\n\n  // Zepto camelize function\n  var camelize = function ( str ) {\n    return str.replace( /-+(.)?/g, function ( match, chr ) {\n      return chr ? chr.toUpperCase() : '';\n    } )\n  };\n\n  // Zepto dasherize function\n  var dasherize = function ( str ) {\n    return str.replace( /::/g, '/' )\n           .replace( /([A-Z]+)([A-Z][a-z])/g, '$1_$2' )\n           .replace( /([a-z\\d])([A-Z])/g, '$1_$2' )\n           .replace( /_/g, '-' )\n           .toLowerCase()\n  };\n\n  /**\n  * Parsley plugin configuration\n  *\n  * @property $.fn.parsley.defaults\n  * @type {Object}\n  */\n  $.fn.parsley.defaults = {\n    // basic data-api overridable properties here..\n    namespace: 'parsley-'                       // DOM-API, default 'parsley-'. W3C valid would be 'data-parsley-' but quite ugly\n    , inputs: 'input, textarea, select'         // Default supported inputs.\n    , excluded: 'input[type=hidden], input[type=file], :disabled' // Do not validate input[type=hidden] & :disabled.\n    , priorityEnabled: true                     // Will display only one error at the time depending on validators priorities\n    , trigger: false                            // $.Event() that will trigger validation. eg: keyup, change..\n    , animate: true                             // fade in / fade out error messages\n    , animateDuration: 300                      // fadein/fadout ms time\n    , scrollDuration: 500                       // Duration in ms time of the window scroll when focusing on invalid field (0 = no scroll)\n    , focus: 'first'                            // 'fist'|'last'|'none' which error field would have focus first on form validation\n    , validationMinlength: 3                    // If trigger validation specified, only if value.length > validationMinlength\n    , successClass: 'parsley-success'           // Class name on each valid input\n    , errorClass: 'parsley-error'               // Class name on each invalid input\n    , errorMessage: false                       // Customize an unique error message showed if one constraint fails\n    , validators: {}                            // Add your custom validators functions\n    , showErrors: true                          // Set to false if you don't want Parsley to display error messages\n    , useHtml5Constraints: true                 // Set to false if you don't want Parsley to use html5 constraints\n    , messages: {}                              // Add your own error messages here\n\n    //some quite advanced configuration here..\n    , validateIfUnchanged: false                                          // false: validate once by field value change\n    , errors: {\n        classHandler: function ( elem, isRadioOrCheckbox ) {}             // specify where parsley error-success classes are set\n      , container: function ( elem, isRadioOrCheckbox ) {}                // specify an elem where errors will be **apened**\n      , errorsWrapper: '<ul></ul>'                                        // do not set an id for this elem, it would have an auto-generated id\n      , errorElem: '<li></li>'                                            // each field constraint fail in an li\n      }\n    , listeners: {\n        onFieldValidate: function ( elem, ParsleyField ) { return false; } // Executed on validation. Return true to ignore field validation\n      , onFormValidate: function ( isFormValid, event, ParsleyForm ) {}     // Executed once on form validation. Return (bool) false to block submit, even if valid\n      , onFieldError: function ( elem, constraints, ParsleyField ) {}     // Executed when a field is detected as invalid\n      , onFieldSuccess: function ( elem, constraints, ParsleyField ) {}   // Executed when a field passes validation\n    }\n  };\n\n// This plugin works with jQuery or Zepto (with data extension built for Zepto.)\n} ( window.jQuery || window.Zepto );"],"sourceRoot":"/source/"}