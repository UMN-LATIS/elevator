Bluepill.application("dclManagement") do |app|
  app.process("prepareDrawers") do |process|
    process.start_command = "/usr/bin/php /opt/elevator/index.php beltdrive prepareDrawers"
    process.group = "dcl"
    process.daemonize = true
    process.pid_file = "/tmp/prepareDrawers"
    process.stdout = process.stderr = "/tmp/prepareDrawers.log"
    process.checks :mem_usage, :every => 20.seconds, :below => 100.megabytes, :times => [3,5]
  end

  app.process("restoreFiles") do |process|
    process.start_command = "/usr/bin/php /opt/elevator/index.php beltdrive restoreFiles"
    process.group = "dcl"
    process.daemonize = true
    process.pid_file = "/tmp/restoreFiles"
    process.stdout = process.stderr = "/tmp/restoreFiles.log"
    process.checks :mem_usage, :every => 20.seconds, :below => 100.megabytes, :times => [3,5]
  end

  app.process("reindex") do |process|
    process.start_command = "/usr/bin/php /opt/elevator/index.php beltdrive updateIndexes"
    process.group = "dcl"
    process.daemonize = true
    process.pid_file = "/tmp/updateIndexes"
    process.stdout = process.stderr = "/tmp/updateIndexes.log"
    process.checks :mem_usage, :every => 20.seconds, :below => 100.megabytes, :times => [3,5]
  end

  app.process("migrate") do |process|
    process.start_command = "/usr/bin/php /opt/elevator/index.php beltdrive migrateCollections"
    process.group = "dcl"
    process.daemonize = true
    process.pid_file = "/tmp/migrateCollections"
    process.stdout = process.stderr = "/tmp/migrateCollections.log"
    process.checks :mem_usage, :every => 20.seconds, :below => 100.megabytes, :times => [3,5]
  end

2.times do |i|
      app.process("processFiles-#{i}") do |process|
        process.start_command = "/usr/bin/php /opt/elevator/index.php beltdrive processFileTask"
        process.daemonize = true
        process.group = "dcl"
        process.pid_file = "/tmp/processFiles-#{i}"
        process.stdout = process.stderr = "/tmp/processFiles.log"
        process.checks :mem_usage, :every => 20.seconds, :below => 100.megabytes, :times => [3,5]
      end
end

2.times do |i|
      app.process("transcode-#{i}") do |process|
        process.start_command = "/usr/bin/php /opt/elevator/index.php transcoder transcodeTask"
        process.group = "dcl"
        process.daemonize = true
        process.pid_file = "/tmp/transcodeTask-#{i}"
        process.stdout = process.stderr = "/tmp/transcodeTask.log"
        process.checks :mem_usage, :every => 20.seconds, :below => 100.megabytes, :times => [3,5]
      end
end
end


